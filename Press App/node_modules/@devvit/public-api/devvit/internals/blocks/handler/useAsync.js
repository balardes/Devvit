var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AsyncHook_hookId, _AsyncHook_initializer, _AsyncHook_changed;
import { EffectType } from '@devvit/protos';
import { registerHook } from './BlocksHandler.js';
class AsyncHook {
    constructor(initializer, params) {
        _AsyncHook_hookId.set(this, void 0);
        _AsyncHook_initializer.set(this, void 0);
        _AsyncHook_changed.set(this, void 0);
        this.state = { data: null, loading: false, error: null };
        __classPrivateFieldSet(this, _AsyncHook_hookId, params.hookId, "f");
        __classPrivateFieldSet(this, _AsyncHook_initializer, initializer, "f");
        __classPrivateFieldSet(this, _AsyncHook_changed, params.changed, "f");
    }
    /**
     * After we look at our state, we need to decide if we need to dispatch a request to load the data.
     */
    onLoad(context) {
        if (this.state.data === null && this.state.error === null && this.state.loading === false) {
            this.state.loading = true;
            __classPrivateFieldGet(this, _AsyncHook_changed, "f").call(this);
            context.emitEffect(__classPrivateFieldGet(this, _AsyncHook_hookId, "f"), {
                type: EffectType.EFFECT_SEND_EVENT,
                sendEvent: {
                    event: {
                        asyncRequest: { requestId: __classPrivateFieldGet(this, _AsyncHook_hookId, "f") },
                        async: true,
                        hook: __classPrivateFieldGet(this, _AsyncHook_hookId, "f"),
                    },
                },
            });
        }
    }
    async onUIEvent(event, context) {
        /**
         * Requests and responses are both handled here. If we have a request, we need to load the data
         * and then send a response.  If we have a response, we need to update our state and re-render.
         *
         * This is a very event-driven way to handle state, but it's the only way to handle async state.
         */
        if (event.asyncRequest) {
            const asyncResponse = { requestId: event.asyncRequest.requestId };
            try {
                asyncResponse.data = {
                    value: await __classPrivateFieldGet(this, _AsyncHook_initializer, "f").call(this),
                };
            }
            catch (e) {
                if (e instanceof Error) {
                    asyncResponse.error = { message: e.message, details: e.stack ?? '' };
                }
                else {
                    asyncResponse.error = { message: 'Unknown error', details: String(e) };
                }
            }
            context.emitEffect(__classPrivateFieldGet(this, _AsyncHook_hookId, "f"), {
                type: EffectType.EFFECT_SEND_EVENT,
                sendEvent: {
                    event: {
                        asyncResponse,
                        hook: __classPrivateFieldGet(this, _AsyncHook_hookId, "f"),
                    },
                },
            });
        }
        else if (event.asyncResponse) {
            const result = {
                data: event.asyncResponse.data?.value,
                loading: false,
                error: event.asyncResponse.error ?? null,
            };
            this.state = result;
            __classPrivateFieldGet(this, _AsyncHook_changed, "f").call(this);
        }
        else {
            throw new Error('Unknown event type');
        }
    }
}
_AsyncHook_hookId = new WeakMap(), _AsyncHook_initializer = new WeakMap(), _AsyncHook_changed = new WeakMap();
/**
 * This is the preferred way to handle async state in Devvit.
 *
 * @param initializer -- any async function that returns a JSONValue
 * @returns UseAsyncResult<S>
 */
export function useAsync(initializer) {
    const hook = registerHook({ namespace: 'useAsync' }, (params) => {
        return new AsyncHook(initializer, params);
    });
    return hook.state;
}
