/**
 * #glclient.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { Metadata } from "../../../../lib/Types.js";
import { Empty } from '../../../google/protobuf/empty.js';
export interface ConfigMessage {
    width: number;
    height: number;
}
export interface TickMessage {
}
export interface InputMessage {
}
export declare const ConfigMessage: {
    $type: "devvit.actor.gl.ConfigMessage";
    encode(message: ConfigMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConfigMessage;
    fromJSON(object: any): ConfigMessage;
    toJSON(message: ConfigMessage): unknown;
    create(base?: DeepPartial<ConfigMessage>): ConfigMessage;
    fromPartial(object: DeepPartial<ConfigMessage>): ConfigMessage;
};
export declare const TickMessage: {
    $type: "devvit.actor.gl.TickMessage";
    encode(_: TickMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TickMessage;
    fromJSON(_: any): TickMessage;
    toJSON(_: TickMessage): unknown;
    create(base?: DeepPartial<TickMessage>): TickMessage;
    fromPartial(_: DeepPartial<TickMessage>): TickMessage;
};
export declare const InputMessage: {
    $type: "devvit.actor.gl.InputMessage";
    encode(_: InputMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InputMessage;
    fromJSON(_: any): InputMessage;
    toJSON(_: InputMessage): unknown;
    create(base?: DeepPartial<InputMessage>): InputMessage;
    fromPartial(_: DeepPartial<InputMessage>): InputMessage;
};
export interface GLClient {
    OnConfig(request: ConfigMessage, metadata?: Metadata): Promise<Empty>;
    OnFrameTick(request: TickMessage, metadata?: Metadata): Promise<Empty>;
    OnInput(request: InputMessage, metadata?: Metadata): Promise<Empty>;
}
export declare const GLClientServiceName = "devvit.actor.gl.GLClient";
export declare class GLClientClientImpl implements GLClient {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnConfig(request: ConfigMessage, metadata?: Metadata): Promise<Empty>;
    OnFrameTick(request: TickMessage, metadata?: Metadata): Promise<Empty>;
    OnInput(request: InputMessage, metadata?: Metadata): Promise<Empty>;
}
export type GLClientDefinition = typeof GLClientDefinition;
export declare const GLClientDefinition: {
    readonly name: "GLClient";
    readonly fullName: "devvit.actor.gl.GLClient";
    readonly methods: {
        readonly onConfig: {
            readonly name: "OnConfig";
            readonly requestType: {
                $type: "devvit.actor.gl.ConfigMessage";
                encode(message: ConfigMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ConfigMessage;
                fromJSON(object: any): ConfigMessage;
                toJSON(message: ConfigMessage): unknown;
                create(base?: DeepPartial<ConfigMessage>): ConfigMessage;
                fromPartial(object: DeepPartial<ConfigMessage>): ConfigMessage;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly onFrameTick: {
            readonly name: "OnFrameTick";
            readonly requestType: {
                $type: "devvit.actor.gl.TickMessage";
                encode(_: TickMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): TickMessage;
                fromJSON(_: any): TickMessage;
                toJSON(_: TickMessage): unknown;
                create(base?: DeepPartial<TickMessage>): TickMessage;
                fromPartial(_: DeepPartial<TickMessage>): TickMessage;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly onInput: {
            readonly name: "OnInput";
            readonly requestType: {
                $type: "devvit.actor.gl.InputMessage";
                encode(_: InputMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): InputMessage;
                fromJSON(_: any): InputMessage;
                toJSON(_: InputMessage): unknown;
                create(base?: DeepPartial<InputMessage>): InputMessage;
                fromPartial(_: DeepPartial<InputMessage>): InputMessage;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=glclient.d.ts.map