/**
 * #glrenderer.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import Long from "long";
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { Value } from '../../../google/protobuf/struct.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
import { gLMethodFromJSON, gLMethodToJSON } from './methods.js';
import { gLMethodTypeFromJSON, gLMethodTypeToJSON } from './methodtype.js';
function createBaseCommandArgument() {
    return { null: undefined, scalar: undefined, blob: undefined, referenceId: undefined };
}
export const CommandArgument = {
    $type: "devvit.plugin.gl.CommandArgument",
    encode(message, writer = _m0.Writer.create()) {
        if (message.null !== undefined) {
            writer.uint32(8).bool(message.null);
        }
        if (message.scalar !== undefined) {
            Value.encode(Value.wrap(message.scalar), writer.uint32(18).fork()).ldelim();
        }
        if (message.blob !== undefined) {
            writer.uint32(26).bytes(message.blob);
        }
        if (message.referenceId !== undefined) {
            writer.uint32(32).uint64(message.referenceId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCommandArgument();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.null = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.scalar = Value.unwrap(Value.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.blob = reader.bytes();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.referenceId = longToNumber(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            null: isSet(object.null) ? globalThis.Boolean(object.null) : undefined,
            scalar: isSet(object?.scalar) ? object.scalar : undefined,
            blob: isSet(object.blob) ? bytesFromBase64(object.blob) : undefined,
            referenceId: isSet(object.referenceId) ? globalThis.Number(object.referenceId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.null !== undefined) {
            obj.null = message.null;
        }
        if (message.scalar !== undefined) {
            obj.scalar = message.scalar;
        }
        if (message.blob !== undefined) {
            obj.blob = base64FromBytes(message.blob);
        }
        if (message.referenceId !== undefined) {
            obj.referenceId = Math.round(message.referenceId);
        }
        return obj;
    },
    create(base) {
        return CommandArgument.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCommandArgument();
        message.null = object.null ?? undefined;
        message.scalar = object.scalar ?? undefined;
        message.blob = object.blob ?? undefined;
        message.referenceId = object.referenceId ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(CommandArgument.$type, CommandArgument);
function createBaseGLCommand() {
    return { method: 0, type: 0, args: [], referenceId: 0 };
}
export const GLCommand = {
    $type: "devvit.plugin.gl.GLCommand",
    encode(message, writer = _m0.Writer.create()) {
        if (message.method !== 0) {
            writer.uint32(8).int32(message.method);
        }
        if (message.type !== 0) {
            writer.uint32(16).int32(message.type);
        }
        for (const v of message.args) {
            CommandArgument.encode(v, writer.uint32(26).fork()).ldelim();
        }
        if (message.referenceId !== 0) {
            writer.uint32(32).uint64(message.referenceId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGLCommand();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.method = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.args.push(CommandArgument.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.referenceId = longToNumber(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            method: isSet(object.method) ? gLMethodFromJSON(object.method) : 0,
            type: isSet(object.type) ? gLMethodTypeFromJSON(object.type) : 0,
            args: globalThis.Array.isArray(object?.args) ? object.args.map((e) => CommandArgument.fromJSON(e)) : [],
            referenceId: isSet(object.referenceId) ? globalThis.Number(object.referenceId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.method !== 0) {
            obj.method = gLMethodToJSON(message.method);
        }
        if (message.type !== 0) {
            obj.type = gLMethodTypeToJSON(message.type);
        }
        if (message.args?.length) {
            obj.args = message.args.map((e) => CommandArgument.toJSON(e));
        }
        if (message.referenceId !== 0) {
            obj.referenceId = Math.round(message.referenceId);
        }
        return obj;
    },
    create(base) {
        return GLCommand.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGLCommand();
        message.method = object.method ?? 0;
        message.type = object.type ?? 0;
        message.args = object.args?.map((e) => CommandArgument.fromPartial(e)) || [];
        message.referenceId = object.referenceId ?? 0;
        return message;
    },
};
messageTypeRegistry.set(GLCommand.$type, GLCommand);
function createBaseExecuteMessage() {
    return { commands: [] };
}
export const ExecuteMessage = {
    $type: "devvit.plugin.gl.ExecuteMessage",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.commands) {
            GLCommand.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExecuteMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.commands.push(GLCommand.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            commands: globalThis.Array.isArray(object?.commands)
                ? object.commands.map((e) => GLCommand.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.commands?.length) {
            obj.commands = message.commands.map((e) => GLCommand.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ExecuteMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseExecuteMessage();
        message.commands = object.commands?.map((e) => GLCommand.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(ExecuteMessage.$type, ExecuteMessage);
export const GLRendererServiceName = "devvit.plugin.gl.GLRenderer";
export class GLRendererClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || GLRendererServiceName;
        this.rpc = rpc;
        this.Execute = this.Execute.bind(this);
    }
    Execute(request, metadata) {
        const data = ExecuteMessage.encode(request).finish();
        const promise = this.rpc.request(this.service, "Execute", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
}
export const GLRendererDefinition = {
    name: "GLRenderer",
    fullName: "devvit.plugin.gl.GLRenderer",
    methods: {
        execute: {
            name: "Execute",
            requestType: ExecuteMessage,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function longToNumber(long) {
    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
