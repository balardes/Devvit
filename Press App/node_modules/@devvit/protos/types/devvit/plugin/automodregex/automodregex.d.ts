/**
 * #automodregex.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { Metadata } from "../../../../lib/Types.js";
export interface AutomodRegexInput {
    pattern: string;
    input: string;
    caseInsensitive: boolean;
}
export interface AutomodRegexMatchOutput {
    groups: string[];
}
export interface AutomodRegexTestOutput {
    match: boolean;
}
export declare const AutomodRegexInput: {
    $type: "devvit.plugin.automodregex.AutomodRegexInput";
    encode(message: AutomodRegexInput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomodRegexInput;
    fromJSON(object: any): AutomodRegexInput;
    toJSON(message: AutomodRegexInput): unknown;
    create(base?: DeepPartial<AutomodRegexInput>): AutomodRegexInput;
    fromPartial(object: DeepPartial<AutomodRegexInput>): AutomodRegexInput;
};
export declare const AutomodRegexMatchOutput: {
    $type: "devvit.plugin.automodregex.AutomodRegexMatchOutput";
    encode(message: AutomodRegexMatchOutput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomodRegexMatchOutput;
    fromJSON(object: any): AutomodRegexMatchOutput;
    toJSON(message: AutomodRegexMatchOutput): unknown;
    create(base?: DeepPartial<AutomodRegexMatchOutput>): AutomodRegexMatchOutput;
    fromPartial(object: DeepPartial<AutomodRegexMatchOutput>): AutomodRegexMatchOutput;
};
export declare const AutomodRegexTestOutput: {
    $type: "devvit.plugin.automodregex.AutomodRegexTestOutput";
    encode(message: AutomodRegexTestOutput, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomodRegexTestOutput;
    fromJSON(object: any): AutomodRegexTestOutput;
    toJSON(message: AutomodRegexTestOutput): unknown;
    create(base?: DeepPartial<AutomodRegexTestOutput>): AutomodRegexTestOutput;
    fromPartial(object: DeepPartial<AutomodRegexTestOutput>): AutomodRegexTestOutput;
};
/**
 * This interface is for regex evaluation for Automod
 * There are special cases in Automod regexes that JS can't
 * handle, so we execute them in golang instead.
 *
 * NOTE: These methods do attempt to emulate full regex
 * functionality. It is only fulfilling the cases required by Automod
 */
export interface AutomodRegex {
    AutomodRegexMatch(request: AutomodRegexInput, metadata?: Metadata): Promise<AutomodRegexMatchOutput>;
    AutomodRegexTest(request: AutomodRegexInput, metadata?: Metadata): Promise<AutomodRegexTestOutput>;
}
export declare const AutomodRegexServiceName = "devvit.plugin.automodregex.AutomodRegex";
export declare class AutomodRegexClientImpl implements AutomodRegex {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    AutomodRegexMatch(request: AutomodRegexInput, metadata?: Metadata): Promise<AutomodRegexMatchOutput>;
    AutomodRegexTest(request: AutomodRegexInput, metadata?: Metadata): Promise<AutomodRegexTestOutput>;
}
/**
 * This interface is for regex evaluation for Automod
 * There are special cases in Automod regexes that JS can't
 * handle, so we execute them in golang instead.
 *
 * NOTE: These methods do attempt to emulate full regex
 * functionality. It is only fulfilling the cases required by Automod
 */
export type AutomodRegexDefinition = typeof AutomodRegexDefinition;
export declare const AutomodRegexDefinition: {
    readonly name: "AutomodRegex";
    readonly fullName: "devvit.plugin.automodregex.AutomodRegex";
    readonly methods: {
        readonly automodRegexMatch: {
            readonly name: "AutomodRegexMatch";
            readonly requestType: {
                $type: "devvit.plugin.automodregex.AutomodRegexInput";
                encode(message: AutomodRegexInput, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomodRegexInput;
                fromJSON(object: any): AutomodRegexInput;
                toJSON(message: AutomodRegexInput): unknown;
                create(base?: DeepPartial<AutomodRegexInput>): AutomodRegexInput;
                fromPartial(object: DeepPartial<AutomodRegexInput>): AutomodRegexInput;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.automodregex.AutomodRegexMatchOutput";
                encode(message: AutomodRegexMatchOutput, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomodRegexMatchOutput;
                fromJSON(object: any): AutomodRegexMatchOutput;
                toJSON(message: AutomodRegexMatchOutput): unknown;
                create(base?: DeepPartial<AutomodRegexMatchOutput>): AutomodRegexMatchOutput;
                fromPartial(object: DeepPartial<AutomodRegexMatchOutput>): AutomodRegexMatchOutput;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly automodRegexTest: {
            readonly name: "AutomodRegexTest";
            readonly requestType: {
                $type: "devvit.plugin.automodregex.AutomodRegexInput";
                encode(message: AutomodRegexInput, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomodRegexInput;
                fromJSON(object: any): AutomodRegexInput;
                toJSON(message: AutomodRegexInput): unknown;
                create(base?: DeepPartial<AutomodRegexInput>): AutomodRegexInput;
                fromPartial(object: DeepPartial<AutomodRegexInput>): AutomodRegexInput;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.automodregex.AutomodRegexTestOutput";
                encode(message: AutomodRegexTestOutput, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomodRegexTestOutput;
                fromJSON(object: any): AutomodRegexTestOutput;
                toJSON(message: AutomodRegexTestOutput): unknown;
                create(base?: DeepPartial<AutomodRegexTestOutput>): AutomodRegexTestOutput;
                fromPartial(object: DeepPartial<AutomodRegexTestOutput>): AutomodRegexTestOutput;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=automodregex.d.ts.map