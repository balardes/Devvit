/**
 * #redditapiv2.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { Metadata } from "../../../../lib/Types.js";
import { JsonStatus } from '../redditapi/common/common_msg.js';
import { DeleteFlairTemplateRequest } from '../redditapi/flair/flair_msg.js';
import { SubredditCollectionsRequest, SubredditCollectionsResponse } from '../redditapi/postcollections/postcollections_msg.js';
export interface RedditAPIV2 {
    GetSubredditCollections(request: SubredditCollectionsRequest, metadata?: Metadata): Promise<SubredditCollectionsResponse>;
    DeleteFlairTemplate(request: DeleteFlairTemplateRequest, metadata?: Metadata): Promise<JsonStatus>;
}
export declare const RedditAPIV2ServiceName = "devvit.plugin.redditapiv2.RedditAPIV2";
export declare class RedditAPIV2ClientImpl implements RedditAPIV2 {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetSubredditCollections(request: SubredditCollectionsRequest, metadata?: Metadata): Promise<SubredditCollectionsResponse>;
    DeleteFlairTemplate(request: DeleteFlairTemplateRequest, metadata?: Metadata): Promise<JsonStatus>;
}
export type RedditAPIV2Definition = typeof RedditAPIV2Definition;
export declare const RedditAPIV2Definition: {
    readonly name: "RedditAPIV2";
    readonly fullName: "devvit.plugin.redditapiv2.RedditAPIV2";
    readonly methods: {
        readonly getSubredditCollections: {
            readonly name: "GetSubredditCollections";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.postcollections.SubredditCollectionsRequest";
                encode(message: SubredditCollectionsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SubredditCollectionsRequest;
                fromJSON(object: any): SubredditCollectionsRequest;
                toJSON(message: SubredditCollectionsRequest): unknown;
                create(base?: {
                    srFullname?: string | undefined;
                } | undefined): SubredditCollectionsRequest;
                fromPartial(object: {
                    srFullname?: string | undefined;
                }): SubredditCollectionsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.postcollections.SubredditCollectionsResponse";
                encode(message: SubredditCollectionsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SubredditCollectionsResponse;
                fromJSON(object: any): SubredditCollectionsResponse;
                toJSON(message: SubredditCollectionsResponse): unknown;
                create(base?: {
                    collections?: {
                        collectionId?: string | undefined;
                        subredditId?: string | undefined;
                        title?: string | undefined;
                        description?: string | undefined;
                        authorId?: string | undefined;
                        authorName?: string | undefined;
                        permalink?: string | undefined;
                        linkIds?: string[];
                        primaryLinkId?: string | undefined;
                        displayLayout?: string | undefined;
                        createdAtUtc?: Date | undefined;
                        lastUpdateUtc?: Date | undefined;
                    }[];
                } | undefined): SubredditCollectionsResponse;
                fromPartial(object: {
                    collections?: {
                        collectionId?: string | undefined;
                        subredditId?: string | undefined;
                        title?: string | undefined;
                        description?: string | undefined;
                        authorId?: string | undefined;
                        authorName?: string | undefined;
                        permalink?: string | undefined;
                        linkIds?: string[];
                        primaryLinkId?: string | undefined;
                        displayLayout?: string | undefined;
                        createdAtUtc?: Date | undefined;
                        lastUpdateUtc?: Date | undefined;
                    }[];
                }): SubredditCollectionsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly deleteFlairTemplate: {
            readonly name: "DeleteFlairTemplate";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.flair.DeleteFlairTemplateRequest";
                encode(message: DeleteFlairTemplateRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DeleteFlairTemplateRequest;
                fromJSON(object: any): DeleteFlairTemplateRequest;
                toJSON(message: DeleteFlairTemplateRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    flairTemplateId?: string;
                } | undefined): DeleteFlairTemplateRequest;
                fromPartial(object: {
                    subreddit?: string;
                    flairTemplateId?: string;
                }): DeleteFlairTemplateRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.common.JsonStatus";
                encode(message: JsonStatus, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): JsonStatus;
                fromJSON(object: any): JsonStatus;
                toJSON(message: JsonStatus): unknown;
                create(base?: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                } | undefined): JsonStatus;
                fromPartial(object: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                }): JsonStatus;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=redditapiv2.d.ts.map