/**
 * #newmodmail_svc.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { ApproveConversationResponse, ArchiveConversationResponse, BasicConversationRequest, BasicConversationsRequest, BulkReadConversationsRequest, BulkReadConversationsResponse, ConversationUserData, CreateConversationMessageRequest, CreateConversationMessageResponse, CreateConversationRequest, CreateConversationResponse, GetConversationRequest, GetConversationResponse, GetConversationsRequest, GetConversationsResponse, HighlightConversationResponse, MuteConversationRequest, MuteConversationResponse, SubredditsResponse, TempBanRequest, TempBanResponse, UnreadCountResponse, } from './newmodmail_msg.js';
export const NewModmailServiceName = "devvit.plugin.redditapi.newmodmail.NewModmail";
export class NewModmailClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || NewModmailServiceName;
        this.rpc = rpc;
        this.BulkReadConversations = this.BulkReadConversations.bind(this);
        this.GetConversations = this.GetConversations.bind(this);
        this.CreateConversation = this.CreateConversation.bind(this);
        this.GetConversation = this.GetConversation.bind(this);
        this.CreateConversationMessage = this.CreateConversationMessage.bind(this);
        this.ApproveConversation = this.ApproveConversation.bind(this);
        this.ArchiveConversation = this.ArchiveConversation.bind(this);
        this.DisapproveConversation = this.DisapproveConversation.bind(this);
        this.UnhighlightConversation = this.UnhighlightConversation.bind(this);
        this.HighlightConversation = this.HighlightConversation.bind(this);
        this.MuteConversation = this.MuteConversation.bind(this);
        this.TempBan = this.TempBan.bind(this);
        this.UnarchiveConversation = this.UnarchiveConversation.bind(this);
        this.Unban = this.Unban.bind(this);
        this.UnmuteConversation = this.UnmuteConversation.bind(this);
        this.UserConversations = this.UserConversations.bind(this);
        this.Read = this.Read.bind(this);
        this.Subreddits = this.Subreddits.bind(this);
        this.Unread = this.Unread.bind(this);
        this.UnreadCount = this.UnreadCount.bind(this);
    }
    BulkReadConversations(request, metadata) {
        const data = BulkReadConversationsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "BulkReadConversations", data, metadata);
        return promise.then((data) => BulkReadConversationsResponse.decode(_m0.Reader.create(data)));
    }
    GetConversations(request, metadata) {
        const data = GetConversationsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetConversations", data, metadata);
        return promise.then((data) => GetConversationsResponse.decode(_m0.Reader.create(data)));
    }
    CreateConversation(request, metadata) {
        const data = CreateConversationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CreateConversation", data, metadata);
        return promise.then((data) => CreateConversationResponse.decode(_m0.Reader.create(data)));
    }
    GetConversation(request, metadata) {
        const data = GetConversationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetConversation", data, metadata);
        return promise.then((data) => GetConversationResponse.decode(_m0.Reader.create(data)));
    }
    CreateConversationMessage(request, metadata) {
        const data = CreateConversationMessageRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CreateConversationMessage", data, metadata);
        return promise.then((data) => CreateConversationMessageResponse.decode(_m0.Reader.create(data)));
    }
    ApproveConversation(request, metadata) {
        const data = BasicConversationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ApproveConversation", data, metadata);
        return promise.then((data) => ApproveConversationResponse.decode(_m0.Reader.create(data)));
    }
    ArchiveConversation(request, metadata) {
        const data = BasicConversationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ArchiveConversation", data, metadata);
        return promise.then((data) => ArchiveConversationResponse.decode(_m0.Reader.create(data)));
    }
    DisapproveConversation(request, metadata) {
        const data = BasicConversationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "DisapproveConversation", data, metadata);
        return promise.then((data) => ApproveConversationResponse.decode(_m0.Reader.create(data)));
    }
    UnhighlightConversation(request, metadata) {
        const data = BasicConversationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UnhighlightConversation", data, metadata);
        return promise.then((data) => HighlightConversationResponse.decode(_m0.Reader.create(data)));
    }
    HighlightConversation(request, metadata) {
        const data = BasicConversationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "HighlightConversation", data, metadata);
        return promise.then((data) => HighlightConversationResponse.decode(_m0.Reader.create(data)));
    }
    MuteConversation(request, metadata) {
        const data = MuteConversationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "MuteConversation", data, metadata);
        return promise.then((data) => MuteConversationResponse.decode(_m0.Reader.create(data)));
    }
    TempBan(request, metadata) {
        const data = TempBanRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "TempBan", data, metadata);
        return promise.then((data) => TempBanResponse.decode(_m0.Reader.create(data)));
    }
    UnarchiveConversation(request, metadata) {
        const data = BasicConversationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UnarchiveConversation", data, metadata);
        return promise.then((data) => ArchiveConversationResponse.decode(_m0.Reader.create(data)));
    }
    Unban(request, metadata) {
        const data = BasicConversationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Unban", data, metadata);
        return promise.then((data) => TempBanResponse.decode(_m0.Reader.create(data)));
    }
    UnmuteConversation(request, metadata) {
        const data = BasicConversationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UnmuteConversation", data, metadata);
        return promise.then((data) => MuteConversationResponse.decode(_m0.Reader.create(data)));
    }
    UserConversations(request, metadata) {
        const data = BasicConversationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UserConversations", data, metadata);
        return promise.then((data) => ConversationUserData.decode(_m0.Reader.create(data)));
    }
    Read(request, metadata) {
        const data = BasicConversationsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Read", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    Subreddits(request, metadata) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request(this.service, "Subreddits", data, metadata);
        return promise.then((data) => SubredditsResponse.decode(_m0.Reader.create(data)));
    }
    Unread(request, metadata) {
        const data = BasicConversationsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Unread", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    UnreadCount(request, metadata) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request(this.service, "UnreadCount", data, metadata);
        return promise.then((data) => UnreadCountResponse.decode(_m0.Reader.create(data)));
    }
}
export const NewModmailDefinition = {
    name: "NewModmail",
    fullName: "devvit.plugin.redditapi.newmodmail.NewModmail",
    methods: {
        /** https://www.reddit.com/dev/api#POST_api_mod_bulk_read */
        bulkReadConversations: {
            name: "BulkReadConversations",
            requestType: BulkReadConversationsRequest,
            requestStream: false,
            responseType: BulkReadConversationsResponse,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#GET_api_mod_conversations */
        getConversations: {
            name: "GetConversations",
            requestType: GetConversationsRequest,
            requestStream: false,
            responseType: GetConversationsResponse,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_mod_conversations */
        createConversation: {
            name: "CreateConversation",
            requestType: CreateConversationRequest,
            requestStream: false,
            responseType: CreateConversationResponse,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#GET_api_mod_conversations_:conversation_id */
        getConversation: {
            name: "GetConversation",
            requestType: GetConversationRequest,
            requestStream: false,
            responseType: GetConversationResponse,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_mod_conversations_:conversation_id */
        createConversationMessage: {
            name: "CreateConversationMessage",
            requestType: CreateConversationMessageRequest,
            requestStream: false,
            responseType: CreateConversationMessageResponse,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_mod_conversations_:conversation_id_approve */
        approveConversation: {
            name: "ApproveConversation",
            requestType: BasicConversationRequest,
            requestStream: false,
            responseType: ApproveConversationResponse,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_mod_conversations_:conversation_id_archive */
        archiveConversation: {
            name: "ArchiveConversation",
            requestType: BasicConversationRequest,
            requestStream: false,
            responseType: ArchiveConversationResponse,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_mod_conversations_:conversation_id_disapprove */
        disapproveConversation: {
            name: "DisapproveConversation",
            requestType: BasicConversationRequest,
            requestStream: false,
            responseType: ApproveConversationResponse,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#DELETE_api_mod_conversations_:conversation_id_highlight */
        unhighlightConversation: {
            name: "UnhighlightConversation",
            requestType: BasicConversationRequest,
            requestStream: false,
            responseType: HighlightConversationResponse,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_mod_conversations_:conversation_id_highlight */
        highlightConversation: {
            name: "HighlightConversation",
            requestType: BasicConversationRequest,
            requestStream: false,
            responseType: HighlightConversationResponse,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_mod_conversations_:conversation_id_mute */
        muteConversation: {
            name: "MuteConversation",
            requestType: MuteConversationRequest,
            requestStream: false,
            responseType: MuteConversationResponse,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_mod_conversations_:conversation_id_temp_ban */
        tempBan: {
            name: "TempBan",
            requestType: TempBanRequest,
            requestStream: false,
            responseType: TempBanResponse,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_mod_conversations_:conversation_id_unarchive */
        unarchiveConversation: {
            name: "UnarchiveConversation",
            requestType: BasicConversationRequest,
            requestStream: false,
            responseType: ArchiveConversationResponse,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_mod_conversations_:conversation_id_unban */
        unban: {
            name: "Unban",
            requestType: BasicConversationRequest,
            requestStream: false,
            responseType: TempBanResponse,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_mod_conversations_:conversation_id_unmute */
        unmuteConversation: {
            name: "UnmuteConversation",
            requestType: BasicConversationRequest,
            requestStream: false,
            responseType: MuteConversationResponse,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#GET_api_mod_conversations_:conversation_id_user */
        userConversations: {
            name: "UserConversations",
            requestType: BasicConversationRequest,
            requestStream: false,
            responseType: ConversationUserData,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_mod_conversations_read */
        read: {
            name: "Read",
            requestType: BasicConversationsRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#GET_api_mod_conversations_subreddits */
        subreddits: {
            name: "Subreddits",
            requestType: Empty,
            requestStream: false,
            responseType: SubredditsResponse,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_mod_conversations_unread */
        unread: {
            name: "Unread",
            requestType: BasicConversationsRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#GET_api_mod_conversations_unread_count */
        unreadCount: {
            name: "UnreadCount",
            requestType: Empty,
            requestStream: false,
            responseType: UnreadCountResponse,
            responseStream: false,
            options: {},
        },
    },
};
