/**
 * #automod.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { Metadata } from "../../../lib/Types.js";
import { Comment } from '../reddit/comment.js';
import { Post } from '../reddit/post.js';
import { Subreddit } from '../reddit/subreddit.js';
import { User } from '../reddit/user.js';
export interface AutomodInvocation {
    /** Rule YAML to evaluate */
    yamlText?: string | undefined;
    comment?: Comment | undefined;
    post?: Post | undefined;
    /** Content author */
    author?: User | undefined;
    /** Comment parent post */
    parentPost?: Post | undefined;
    /** Content subreddit */
    subreddit?: Subreddit | undefined;
    /** Content crosspost */
    crosspost?: Post | undefined;
    /** Content crosspost subreddit */
    crosspostSubreddit?: Subreddit | undefined;
    /** Content crosspost author */
    crosspostAuthor?: User | undefined;
    /** Content poll */
    poll?: Poll | undefined;
}
export interface Poll {
    isPrediction?: boolean | undefined;
    options: {
        [key: string]: any;
    }[];
    predictionStatus?: string | undefined;
    resolvedOptionId?: string | undefined;
    totalStakeAmount?: number | undefined;
    totalVoteCount?: number | undefined;
    tournamentId?: string | undefined;
    userSelection?: string | undefined;
    userWonAmount?: number | undefined;
    voteUpdatesRemained?: number | undefined;
    votingEndTimestamp?: number | undefined;
}
export interface AutomodResult {
    result: string;
    errors: string;
}
export declare const AutomodInvocation: {
    $type: "devvit.gateway.AutomodInvocation";
    encode(message: AutomodInvocation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomodInvocation;
    fromJSON(object: any): AutomodInvocation;
    toJSON(message: AutomodInvocation): unknown;
    create(base?: DeepPartial<AutomodInvocation>): AutomodInvocation;
    fromPartial(object: DeepPartial<AutomodInvocation>): AutomodInvocation;
};
export declare const Poll: {
    $type: "devvit.gateway.Poll";
    encode(message: Poll, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Poll;
    fromJSON(object: any): Poll;
    toJSON(message: Poll): unknown;
    create(base?: DeepPartial<Poll>): Poll;
    fromPartial(object: DeepPartial<Poll>): Poll;
};
export declare const AutomodResult: {
    $type: "devvit.gateway.AutomodResult";
    encode(message: AutomodResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomodResult;
    fromJSON(object: any): AutomodResult;
    toJSON(message: AutomodResult): unknown;
    create(base?: DeepPartial<AutomodResult>): AutomodResult;
    fromPartial(object: DeepPartial<AutomodResult>): AutomodResult;
};
/** Temporary Automod interface for tap/compare purposes */
export interface Automod {
    Evaluate(request: AutomodInvocation, metadata?: Metadata): Promise<AutomodResult>;
}
export declare const AutomodServiceName = "devvit.gateway.Automod";
export declare class AutomodClientImpl implements Automod {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Evaluate(request: AutomodInvocation, metadata?: Metadata): Promise<AutomodResult>;
}
/** Temporary Automod interface for tap/compare purposes */
export type AutomodDefinition = typeof AutomodDefinition;
export declare const AutomodDefinition: {
    readonly name: "Automod";
    readonly fullName: "devvit.gateway.Automod";
    readonly methods: {
        readonly evaluate: {
            readonly name: "Evaluate";
            readonly requestType: {
                $type: "devvit.gateway.AutomodInvocation";
                encode(message: AutomodInvocation, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomodInvocation;
                fromJSON(object: any): AutomodInvocation;
                toJSON(message: AutomodInvocation): unknown;
                create(base?: DeepPartial<AutomodInvocation>): AutomodInvocation;
                fromPartial(object: DeepPartial<AutomodInvocation>): AutomodInvocation;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.gateway.AutomodResult";
                encode(message: AutomodResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomodResult;
                fromJSON(object: any): AutomodResult;
                toJSON(message: AutomodResult): unknown;
                create(base?: DeepPartial<AutomodResult>): AutomodResult;
                fromPartial(object: DeepPartial<AutomodResult>): AutomodResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=automod.d.ts.map