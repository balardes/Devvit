import { getFormValues } from '../../../../apis/ui/helpers/getFormValues.js';
import { registerHook } from './BlocksHandler.js';
class UseFormHook {
    constructor(params, form, onSubmit) {
        this.state = null;
        this.hookId = params.hookId;
        this.form = form;
        this.onSubmit = onSubmit;
        this.onUIEvent = async (event) => {
            if (event.formSubmitted) {
                await onSubmit(getFormValues(event.formSubmitted.results));
            }
        };
    }
}
export function useForm(form, onSubmit) {
    const hook = registerHook({ namespace: 'useForm' }, (params) => new UseFormHook(params, form, onSubmit));
    return hookRefToFormKey({ id: hook.hookId });
}
export function hookRefToFormKey(hookRef) {
    return `form.hook.${hookRef.id}.0`;
}
export function formKeyToHookRef(formKey) {
    // extract the hook id from the form key with a regex
    return { id: formKey.match(/form\.hook\.(.+)\.0/)[1] };
}
export function getFormDefinition(renderContext, formKey) {
    const hookId = formKeyToHookRef(formKey);
    return renderContext.getHook(hookId);
}
