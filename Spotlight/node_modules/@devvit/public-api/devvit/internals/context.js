import { Header } from '@devvit/shared-types/Header.js';
import { assertNonNull } from '@devvit/shared-types/NonNull.js';
export function getContextFromMetadata(metadata, postId, commentId) {
    const subredditId = metadata[Header.Subreddit]?.values[0];
    assertNonNull(subredditId, 'subreddit is missing from Context');
    const appAccountId = metadata[Header.AppUser]?.values[0];
    assertNonNull(appAccountId, 'appAccountId is missing from Context');
    const userId = metadata[Header.User]?.values[0];
    const debug = parseDebug(metadata);
    return {
        appAccountId,
        subredditId,
        userId,
        postId,
        commentId,
        debug,
        toJSON() {
            return {
                appAccountId,
                subredditId,
                userId,
                postId,
                commentId,
                debug,
            };
        },
    };
}
/** @internal */
export function parseDebug(meta) {
    // Roughly aligns to initDevvitGlobal() except an empty devvit-debug doesn't
    // enable all.
    var _a;
    // All known AppDebug keys.
    const keyset = {
        blocks: undefined,
        emitSnapshots: undefined,
        emitState: undefined,
        runtime: undefined,
        surface: undefined,
        useAsync: undefined,
        useChannel: undefined,
    };
    // {[key: Lowercase<AppDebug>]: AppDebug}
    const lowerKeyToKey = {};
    for (const key in keyset)
        lowerKeyToKey[key.toLowerCase()] = key;
    const debug = { metadata: meta };
    // hack: gRPC-web header values don't split in compute. always join then split
    //       for parity in both local and remote runtimes.
    for (const kv of (meta[Header.Debug]?.values ?? []).join().split(',')) {
        let [key, val] = kv.split('=');
        if (!key)
            continue;
        key = key.trim();
        val = val?.trim();
        if (key.toLowerCase() in lowerKeyToKey)
            key = lowerKeyToKey[key.toLowerCase()];
        else
            console.warn(`[api] unknown devvit-debug header "${key}"`);
        debug[_a = key] ?? (debug[_a] = val || `${true}`);
        console.info(`[api] set devvit-debug ${key}=${debug[key]}`);
    }
    return debug;
}
