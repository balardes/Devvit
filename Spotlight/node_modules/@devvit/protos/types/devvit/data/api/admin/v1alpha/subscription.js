/**
 * #subscription.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../../../typeRegistry.js';
import { firehoseEventFromJSON, firehoseEventToJSON } from '../../../../options/options.js';
import { subredditRatingFromJSON, subredditRatingToJSON, } from '../../../../reddit/v2alpha/subredditv2.js';
function createBaseSubscription() {
    return { id: "", name: "", organizationId: "", description: "", events: [], subreddits: [], subredditRatings: [] };
}
export const Subscription = {
    $type: "devvit.data.api.admin.v1alpha.Subscription",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.organizationId !== "") {
            writer.uint32(26).string(message.organizationId);
        }
        if (message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        writer.uint32(42).fork();
        for (const v of message.events) {
            writer.int32(v);
        }
        writer.ldelim();
        for (const v of message.subreddits) {
            writer.uint32(50).string(v);
        }
        writer.uint32(58).fork();
        for (const v of message.subredditRatings) {
            writer.int32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubscription();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.organizationId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 5:
                    if (tag === 40) {
                        message.events.push(reader.int32());
                        continue;
                    }
                    if (tag === 42) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.events.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.subreddits.push(reader.string());
                    continue;
                case 7:
                    if (tag === 56) {
                        message.subredditRatings.push(reader.int32());
                        continue;
                    }
                    if (tag === 58) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.subredditRatings.push(reader.int32());
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            organizationId: isSet(object.organizationId) ? globalThis.String(object.organizationId) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            events: globalThis.Array.isArray(object?.events) ? object.events.map((e) => firehoseEventFromJSON(e)) : [],
            subreddits: globalThis.Array.isArray(object?.subreddits)
                ? object.subreddits.map((e) => globalThis.String(e))
                : [],
            subredditRatings: globalThis.Array.isArray(object?.subredditRatings)
                ? object.subredditRatings.map((e) => subredditRatingFromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.organizationId !== "") {
            obj.organizationId = message.organizationId;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.events?.length) {
            obj.events = message.events.map((e) => firehoseEventToJSON(e));
        }
        if (message.subreddits?.length) {
            obj.subreddits = message.subreddits;
        }
        if (message.subredditRatings?.length) {
            obj.subredditRatings = message.subredditRatings.map((e) => subredditRatingToJSON(e));
        }
        return obj;
    },
    create(base) {
        return Subscription.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSubscription();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.organizationId = object.organizationId ?? "";
        message.description = object.description ?? "";
        message.events = object.events?.map((e) => e) || [];
        message.subreddits = object.subreddits?.map((e) => e) || [];
        message.subredditRatings = object.subredditRatings?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set(Subscription.$type, Subscription);
function createBaseCreateSubscriptionRequest() {
    return { events: [], subreddits: [], subredditRatings: [], organizationId: "", name: "", description: "" };
}
export const CreateSubscriptionRequest = {
    $type: "devvit.data.api.admin.v1alpha.CreateSubscriptionRequest",
    encode(message, writer = _m0.Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.events) {
            writer.int32(v);
        }
        writer.ldelim();
        for (const v of message.subreddits) {
            writer.uint32(18).string(v);
        }
        writer.uint32(26).fork();
        for (const v of message.subredditRatings) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.organizationId !== "") {
            writer.uint32(34).string(message.organizationId);
        }
        if (message.name !== "") {
            writer.uint32(42).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(50).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateSubscriptionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag === 8) {
                        message.events.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.events.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.subreddits.push(reader.string());
                    continue;
                case 3:
                    if (tag === 24) {
                        message.subredditRatings.push(reader.int32());
                        continue;
                    }
                    if (tag === 26) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.subredditRatings.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.organizationId = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            events: globalThis.Array.isArray(object?.events) ? object.events.map((e) => firehoseEventFromJSON(e)) : [],
            subreddits: globalThis.Array.isArray(object?.subreddits)
                ? object.subreddits.map((e) => globalThis.String(e))
                : [],
            subredditRatings: globalThis.Array.isArray(object?.subredditRatings)
                ? object.subredditRatings.map((e) => subredditRatingFromJSON(e))
                : [],
            organizationId: isSet(object.organizationId) ? globalThis.String(object.organizationId) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.events?.length) {
            obj.events = message.events.map((e) => firehoseEventToJSON(e));
        }
        if (message.subreddits?.length) {
            obj.subreddits = message.subreddits;
        }
        if (message.subredditRatings?.length) {
            obj.subredditRatings = message.subredditRatings.map((e) => subredditRatingToJSON(e));
        }
        if (message.organizationId !== "") {
            obj.organizationId = message.organizationId;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return CreateSubscriptionRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateSubscriptionRequest();
        message.events = object.events?.map((e) => e) || [];
        message.subreddits = object.subreddits?.map((e) => e) || [];
        message.subredditRatings = object.subredditRatings?.map((e) => e) || [];
        message.organizationId = object.organizationId ?? "";
        message.name = object.name ?? "";
        message.description = object.description ?? "";
        return message;
    },
};
messageTypeRegistry.set(CreateSubscriptionRequest.$type, CreateSubscriptionRequest);
function createBaseCreateSubscriptionResponse() {
    return { subscription: undefined };
}
export const CreateSubscriptionResponse = {
    $type: "devvit.data.api.admin.v1alpha.CreateSubscriptionResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subscription !== undefined) {
            Subscription.encode(message.subscription, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateSubscriptionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subscription = Subscription.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { subscription: isSet(object.subscription) ? Subscription.fromJSON(object.subscription) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscription !== undefined) {
            obj.subscription = Subscription.toJSON(message.subscription);
        }
        return obj;
    },
    create(base) {
        return CreateSubscriptionResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateSubscriptionResponse();
        message.subscription = (object.subscription !== undefined && object.subscription !== null)
            ? Subscription.fromPartial(object.subscription)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(CreateSubscriptionResponse.$type, CreateSubscriptionResponse);
function createBaseGetSubscriptionByIdRequest() {
    return { subscriptionId: "" };
}
export const GetSubscriptionByIdRequest = {
    $type: "devvit.data.api.admin.v1alpha.GetSubscriptionByIdRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subscriptionId !== "") {
            writer.uint32(10).string(message.subscriptionId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSubscriptionByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subscriptionId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { subscriptionId: isSet(object.subscriptionId) ? globalThis.String(object.subscriptionId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscriptionId !== "") {
            obj.subscriptionId = message.subscriptionId;
        }
        return obj;
    },
    create(base) {
        return GetSubscriptionByIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSubscriptionByIdRequest();
        message.subscriptionId = object.subscriptionId ?? "";
        return message;
    },
};
messageTypeRegistry.set(GetSubscriptionByIdRequest.$type, GetSubscriptionByIdRequest);
function createBaseGetSubscriptionByIdResponse() {
    return { subscription: undefined };
}
export const GetSubscriptionByIdResponse = {
    $type: "devvit.data.api.admin.v1alpha.GetSubscriptionByIdResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subscription !== undefined) {
            Subscription.encode(message.subscription, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSubscriptionByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subscription = Subscription.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { subscription: isSet(object.subscription) ? Subscription.fromJSON(object.subscription) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscription !== undefined) {
            obj.subscription = Subscription.toJSON(message.subscription);
        }
        return obj;
    },
    create(base) {
        return GetSubscriptionByIdResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSubscriptionByIdResponse();
        message.subscription = (object.subscription !== undefined && object.subscription !== null)
            ? Subscription.fromPartial(object.subscription)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(GetSubscriptionByIdResponse.$type, GetSubscriptionByIdResponse);
function createBaseGetSubscriptionsByOrganizationNameRequest() {
    return { organizationName: "" };
}
export const GetSubscriptionsByOrganizationNameRequest = {
    $type: "devvit.data.api.admin.v1alpha.GetSubscriptionsByOrganizationNameRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.organizationName !== "") {
            writer.uint32(10).string(message.organizationName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSubscriptionsByOrganizationNameRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.organizationName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { organizationName: isSet(object.organizationName) ? globalThis.String(object.organizationName) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.organizationName !== "") {
            obj.organizationName = message.organizationName;
        }
        return obj;
    },
    create(base) {
        return GetSubscriptionsByOrganizationNameRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSubscriptionsByOrganizationNameRequest();
        message.organizationName = object.organizationName ?? "";
        return message;
    },
};
messageTypeRegistry.set(GetSubscriptionsByOrganizationNameRequest.$type, GetSubscriptionsByOrganizationNameRequest);
function createBaseGetSubscriptionsByOrganizationNameResponse() {
    return { subscriptions: [] };
}
export const GetSubscriptionsByOrganizationNameResponse = {
    $type: "devvit.data.api.admin.v1alpha.GetSubscriptionsByOrganizationNameResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.subscriptions) {
            Subscription.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSubscriptionsByOrganizationNameResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subscriptions.push(Subscription.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            subscriptions: globalThis.Array.isArray(object?.subscriptions)
                ? object.subscriptions.map((e) => Subscription.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscriptions?.length) {
            obj.subscriptions = message.subscriptions.map((e) => Subscription.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return GetSubscriptionsByOrganizationNameResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetSubscriptionsByOrganizationNameResponse();
        message.subscriptions = object.subscriptions?.map((e) => Subscription.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(GetSubscriptionsByOrganizationNameResponse.$type, GetSubscriptionsByOrganizationNameResponse);
function createBaseUpdateSubscriptionRequest() {
    return {
        subscriptionId: "",
        name: undefined,
        description: undefined,
        events: [],
        subreddits: [],
        subredditRatings: [],
    };
}
export const UpdateSubscriptionRequest = {
    $type: "devvit.data.api.admin.v1alpha.UpdateSubscriptionRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subscriptionId !== "") {
            writer.uint32(10).string(message.subscriptionId);
        }
        if (message.name !== undefined) {
            writer.uint32(18).string(message.name);
        }
        if (message.description !== undefined) {
            writer.uint32(26).string(message.description);
        }
        writer.uint32(34).fork();
        for (const v of message.events) {
            writer.int32(v);
        }
        writer.ldelim();
        for (const v of message.subreddits) {
            writer.uint32(42).string(v);
        }
        writer.uint32(50).fork();
        for (const v of message.subredditRatings) {
            writer.int32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSubscriptionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subscriptionId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 4:
                    if (tag === 32) {
                        message.events.push(reader.int32());
                        continue;
                    }
                    if (tag === 34) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.events.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.subreddits.push(reader.string());
                    continue;
                case 6:
                    if (tag === 48) {
                        message.subredditRatings.push(reader.int32());
                        continue;
                    }
                    if (tag === 50) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.subredditRatings.push(reader.int32());
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            subscriptionId: isSet(object.subscriptionId) ? globalThis.String(object.subscriptionId) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            description: isSet(object.description) ? globalThis.String(object.description) : undefined,
            events: globalThis.Array.isArray(object?.events) ? object.events.map((e) => firehoseEventFromJSON(e)) : [],
            subreddits: globalThis.Array.isArray(object?.subreddits)
                ? object.subreddits.map((e) => globalThis.String(e))
                : [],
            subredditRatings: globalThis.Array.isArray(object?.subredditRatings)
                ? object.subredditRatings.map((e) => subredditRatingFromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscriptionId !== "") {
            obj.subscriptionId = message.subscriptionId;
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.description !== undefined) {
            obj.description = message.description;
        }
        if (message.events?.length) {
            obj.events = message.events.map((e) => firehoseEventToJSON(e));
        }
        if (message.subreddits?.length) {
            obj.subreddits = message.subreddits;
        }
        if (message.subredditRatings?.length) {
            obj.subredditRatings = message.subredditRatings.map((e) => subredditRatingToJSON(e));
        }
        return obj;
    },
    create(base) {
        return UpdateSubscriptionRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSubscriptionRequest();
        message.subscriptionId = object.subscriptionId ?? "";
        message.name = object.name ?? undefined;
        message.description = object.description ?? undefined;
        message.events = object.events?.map((e) => e) || [];
        message.subreddits = object.subreddits?.map((e) => e) || [];
        message.subredditRatings = object.subredditRatings?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set(UpdateSubscriptionRequest.$type, UpdateSubscriptionRequest);
function createBaseUpdateSubscriptionResponse() {
    return { subscription: undefined };
}
export const UpdateSubscriptionResponse = {
    $type: "devvit.data.api.admin.v1alpha.UpdateSubscriptionResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subscription !== undefined) {
            Subscription.encode(message.subscription, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSubscriptionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subscription = Subscription.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { subscription: isSet(object.subscription) ? Subscription.fromJSON(object.subscription) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscription !== undefined) {
            obj.subscription = Subscription.toJSON(message.subscription);
        }
        return obj;
    },
    create(base) {
        return UpdateSubscriptionResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSubscriptionResponse();
        message.subscription = (object.subscription !== undefined && object.subscription !== null)
            ? Subscription.fromPartial(object.subscription)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(UpdateSubscriptionResponse.$type, UpdateSubscriptionResponse);
function createBaseDeleteSubscriptionRequest() {
    return { subscriptionId: "" };
}
export const DeleteSubscriptionRequest = {
    $type: "devvit.data.api.admin.v1alpha.DeleteSubscriptionRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subscriptionId !== "") {
            writer.uint32(10).string(message.subscriptionId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteSubscriptionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subscriptionId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { subscriptionId: isSet(object.subscriptionId) ? globalThis.String(object.subscriptionId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscriptionId !== "") {
            obj.subscriptionId = message.subscriptionId;
        }
        return obj;
    },
    create(base) {
        return DeleteSubscriptionRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteSubscriptionRequest();
        message.subscriptionId = object.subscriptionId ?? "";
        return message;
    },
};
messageTypeRegistry.set(DeleteSubscriptionRequest.$type, DeleteSubscriptionRequest);
function createBaseDeleteSubscriptionResponse() {
    return {};
}
export const DeleteSubscriptionResponse = {
    $type: "devvit.data.api.admin.v1alpha.DeleteSubscriptionResponse",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteSubscriptionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return DeleteSubscriptionResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseDeleteSubscriptionResponse();
        return message;
    },
};
messageTypeRegistry.set(DeleteSubscriptionResponse.$type, DeleteSubscriptionResponse);
function isSet(value) {
    return value !== null && value !== undefined;
}
