/**
 * #organization.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../../../typeRegistry.js';
function createBaseOrganization() {
    return { id: "", name: "", isInternal: false };
}
export const Organization = {
    $type: "devvit.data.api.admin.v1alpha.Organization",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.isInternal !== false) {
            writer.uint32(24).bool(message.isInternal);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrganization();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.isInternal = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            isInternal: isSet(object.isInternal) ? globalThis.Boolean(object.isInternal) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.isInternal !== false) {
            obj.isInternal = message.isInternal;
        }
        return obj;
    },
    create(base) {
        return Organization.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOrganization();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.isInternal = object.isInternal ?? false;
        return message;
    },
};
messageTypeRegistry.set(Organization.$type, Organization);
function createBaseCreateOrganizationRequest() {
    return { name: "", isInternal: false };
}
export const CreateOrganizationRequest = {
    $type: "devvit.data.api.admin.v1alpha.CreateOrganizationRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.isInternal !== false) {
            writer.uint32(16).bool(message.isInternal);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateOrganizationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.isInternal = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            isInternal: isSet(object.isInternal) ? globalThis.Boolean(object.isInternal) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.isInternal !== false) {
            obj.isInternal = message.isInternal;
        }
        return obj;
    },
    create(base) {
        return CreateOrganizationRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateOrganizationRequest();
        message.name = object.name ?? "";
        message.isInternal = object.isInternal ?? false;
        return message;
    },
};
messageTypeRegistry.set(CreateOrganizationRequest.$type, CreateOrganizationRequest);
function createBaseCreateOrganizationResponse() {
    return { organization: undefined };
}
export const CreateOrganizationResponse = {
    $type: "devvit.data.api.admin.v1alpha.CreateOrganizationResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.organization !== undefined) {
            Organization.encode(message.organization, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateOrganizationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.organization = Organization.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { organization: isSet(object.organization) ? Organization.fromJSON(object.organization) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.organization !== undefined) {
            obj.organization = Organization.toJSON(message.organization);
        }
        return obj;
    },
    create(base) {
        return CreateOrganizationResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateOrganizationResponse();
        message.organization = (object.organization !== undefined && object.organization !== null)
            ? Organization.fromPartial(object.organization)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(CreateOrganizationResponse.$type, CreateOrganizationResponse);
function createBaseGetOrganizationByNameRequest() {
    return { name: "" };
}
export const GetOrganizationByNameRequest = {
    $type: "devvit.data.api.admin.v1alpha.GetOrganizationByNameRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrganizationByNameRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        return obj;
    },
    create(base) {
        return GetOrganizationByNameRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOrganizationByNameRequest();
        message.name = object.name ?? "";
        return message;
    },
};
messageTypeRegistry.set(GetOrganizationByNameRequest.$type, GetOrganizationByNameRequest);
function createBaseGetOrganizationByNameResponse() {
    return { organization: undefined };
}
export const GetOrganizationByNameResponse = {
    $type: "devvit.data.api.admin.v1alpha.GetOrganizationByNameResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.organization !== undefined) {
            Organization.encode(message.organization, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrganizationByNameResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.organization = Organization.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { organization: isSet(object.organization) ? Organization.fromJSON(object.organization) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.organization !== undefined) {
            obj.organization = Organization.toJSON(message.organization);
        }
        return obj;
    },
    create(base) {
        return GetOrganizationByNameResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOrganizationByNameResponse();
        message.organization = (object.organization !== undefined && object.organization !== null)
            ? Organization.fromPartial(object.organization)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(GetOrganizationByNameResponse.$type, GetOrganizationByNameResponse);
function createBaseGetOrganizationByIdRequest() {
    return { id: "" };
}
export const GetOrganizationByIdRequest = {
    $type: "devvit.data.api.admin.v1alpha.GetOrganizationByIdRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrganizationByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return GetOrganizationByIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOrganizationByIdRequest();
        message.id = object.id ?? "";
        return message;
    },
};
messageTypeRegistry.set(GetOrganizationByIdRequest.$type, GetOrganizationByIdRequest);
function createBaseGetOrganizationByIdResponse() {
    return { organization: undefined };
}
export const GetOrganizationByIdResponse = {
    $type: "devvit.data.api.admin.v1alpha.GetOrganizationByIdResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.organization !== undefined) {
            Organization.encode(message.organization, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrganizationByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.organization = Organization.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { organization: isSet(object.organization) ? Organization.fromJSON(object.organization) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.organization !== undefined) {
            obj.organization = Organization.toJSON(message.organization);
        }
        return obj;
    },
    create(base) {
        return GetOrganizationByIdResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOrganizationByIdResponse();
        message.organization = (object.organization !== undefined && object.organization !== null)
            ? Organization.fromPartial(object.organization)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(GetOrganizationByIdResponse.$type, GetOrganizationByIdResponse);
function createBaseGetOrganizationsRequest() {
    return {};
}
export const GetOrganizationsRequest = {
    $type: "devvit.data.api.admin.v1alpha.GetOrganizationsRequest",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrganizationsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return GetOrganizationsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseGetOrganizationsRequest();
        return message;
    },
};
messageTypeRegistry.set(GetOrganizationsRequest.$type, GetOrganizationsRequest);
function createBaseGetOrganizationsResponse() {
    return { organizations: [] };
}
export const GetOrganizationsResponse = {
    $type: "devvit.data.api.admin.v1alpha.GetOrganizationsResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.organizations) {
            Organization.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrganizationsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.organizations.push(Organization.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            organizations: globalThis.Array.isArray(object?.organizations)
                ? object.organizations.map((e) => Organization.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.organizations?.length) {
            obj.organizations = message.organizations.map((e) => Organization.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return GetOrganizationsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOrganizationsResponse();
        message.organizations = object.organizations?.map((e) => Organization.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(GetOrganizationsResponse.$type, GetOrganizationsResponse);
function isSet(value) {
    return value !== null && value !== undefined;
}
