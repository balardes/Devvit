/**
 * #service.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { CreateAuditLogEventRequest, CreateAuditLogEventResponse, GetAuditLogEventsByOrganizationNameRequest, GetAuditLogEventsByOrganizationNameResponse, } from './audit.js';
import { CreateAccessTokenRequest, CreateAccessTokenResponse, GetAccessTokenByIdRequest, GetAccessTokenByIdResponse, GetAccessTokensByOrganizationNameRequest, GetAccessTokensByOrganizationNameResponse, RevokeAccessTokenByIdRequest, RevokeAccessTokenByIdResponse, } from './auth.js';
import { CreateOrganizationRequest, CreateOrganizationResponse, GetOrganizationByIdRequest, GetOrganizationByIdResponse, GetOrganizationByNameRequest, GetOrganizationByNameResponse, GetOrganizationsRequest, GetOrganizationsResponse, } from './organization.js';
import { CreateSubscriptionRequest, CreateSubscriptionResponse, DeleteSubscriptionRequest, DeleteSubscriptionResponse, GetSubscriptionByIdRequest, GetSubscriptionByIdResponse, GetSubscriptionsByOrganizationNameRequest, GetSubscriptionsByOrganizationNameResponse, UpdateSubscriptionRequest, UpdateSubscriptionResponse, } from './subscription.js';
import { UIGetOrganizationsRequest, UIGetOrganizationsResponse } from './ui.js';
export const AdminServiceName = "devvit.data.api.admin.v1alpha.Admin";
export class AdminClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || AdminServiceName;
        this.rpc = rpc;
        this.CreateAccessToken = this.CreateAccessToken.bind(this);
        this.GetAccessTokenById = this.GetAccessTokenById.bind(this);
        this.GetAccessTokensByOrganizationName = this.GetAccessTokensByOrganizationName.bind(this);
        this.RevokeAccessTokenById = this.RevokeAccessTokenById.bind(this);
        this.CreateSubscription = this.CreateSubscription.bind(this);
        this.GetSubscriptionById = this.GetSubscriptionById.bind(this);
        this.GetSubscriptionsByOrganizationName = this.GetSubscriptionsByOrganizationName.bind(this);
        this.UpdateSubscription = this.UpdateSubscription.bind(this);
        this.DeleteSubscription = this.DeleteSubscription.bind(this);
        this.CreateOrganization = this.CreateOrganization.bind(this);
        this.GetOrganizationById = this.GetOrganizationById.bind(this);
        this.GetOrganizationByName = this.GetOrganizationByName.bind(this);
        this.GetOrganizations = this.GetOrganizations.bind(this);
        this.GetAuditLogEventsByOrganizationName = this.GetAuditLogEventsByOrganizationName.bind(this);
        this.CreateAuditLogEvent = this.CreateAuditLogEvent.bind(this);
        this.UIGetHydratedOrganizations = this.UIGetHydratedOrganizations.bind(this);
    }
    CreateAccessToken(request, metadata) {
        const data = CreateAccessTokenRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CreateAccessToken", data, metadata);
        return promise.then((data) => CreateAccessTokenResponse.decode(_m0.Reader.create(data)));
    }
    GetAccessTokenById(request, metadata) {
        const data = GetAccessTokenByIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetAccessTokenById", data, metadata);
        return promise.then((data) => GetAccessTokenByIdResponse.decode(_m0.Reader.create(data)));
    }
    GetAccessTokensByOrganizationName(request, metadata) {
        const data = GetAccessTokensByOrganizationNameRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetAccessTokensByOrganizationName", data, metadata);
        return promise.then((data) => GetAccessTokensByOrganizationNameResponse.decode(_m0.Reader.create(data)));
    }
    RevokeAccessTokenById(request, metadata) {
        const data = RevokeAccessTokenByIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RevokeAccessTokenById", data, metadata);
        return promise.then((data) => RevokeAccessTokenByIdResponse.decode(_m0.Reader.create(data)));
    }
    CreateSubscription(request, metadata) {
        const data = CreateSubscriptionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CreateSubscription", data, metadata);
        return promise.then((data) => CreateSubscriptionResponse.decode(_m0.Reader.create(data)));
    }
    GetSubscriptionById(request, metadata) {
        const data = GetSubscriptionByIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetSubscriptionById", data, metadata);
        return promise.then((data) => GetSubscriptionByIdResponse.decode(_m0.Reader.create(data)));
    }
    GetSubscriptionsByOrganizationName(request, metadata) {
        const data = GetSubscriptionsByOrganizationNameRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetSubscriptionsByOrganizationName", data, metadata);
        return promise.then((data) => GetSubscriptionsByOrganizationNameResponse.decode(_m0.Reader.create(data)));
    }
    UpdateSubscription(request, metadata) {
        const data = UpdateSubscriptionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateSubscription", data, metadata);
        return promise.then((data) => UpdateSubscriptionResponse.decode(_m0.Reader.create(data)));
    }
    DeleteSubscription(request, metadata) {
        const data = DeleteSubscriptionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "DeleteSubscription", data, metadata);
        return promise.then((data) => DeleteSubscriptionResponse.decode(_m0.Reader.create(data)));
    }
    CreateOrganization(request, metadata) {
        const data = CreateOrganizationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CreateOrganization", data, metadata);
        return promise.then((data) => CreateOrganizationResponse.decode(_m0.Reader.create(data)));
    }
    GetOrganizationById(request, metadata) {
        const data = GetOrganizationByIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetOrganizationById", data, metadata);
        return promise.then((data) => GetOrganizationByIdResponse.decode(_m0.Reader.create(data)));
    }
    GetOrganizationByName(request, metadata) {
        const data = GetOrganizationByNameRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetOrganizationByName", data, metadata);
        return promise.then((data) => GetOrganizationByNameResponse.decode(_m0.Reader.create(data)));
    }
    GetOrganizations(request, metadata) {
        const data = GetOrganizationsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetOrganizations", data, metadata);
        return promise.then((data) => GetOrganizationsResponse.decode(_m0.Reader.create(data)));
    }
    GetAuditLogEventsByOrganizationName(request, metadata) {
        const data = GetAuditLogEventsByOrganizationNameRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetAuditLogEventsByOrganizationName", data, metadata);
        return promise.then((data) => GetAuditLogEventsByOrganizationNameResponse.decode(_m0.Reader.create(data)));
    }
    CreateAuditLogEvent(request, metadata) {
        const data = CreateAuditLogEventRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CreateAuditLogEvent", data, metadata);
        return promise.then((data) => CreateAuditLogEventResponse.decode(_m0.Reader.create(data)));
    }
    UIGetHydratedOrganizations(request, metadata) {
        const data = UIGetOrganizationsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UIGetHydratedOrganizations", data, metadata);
        return promise.then((data) => UIGetOrganizationsResponse.decode(_m0.Reader.create(data)));
    }
}
export const AdminDefinition = {
    name: "Admin",
    fullName: "devvit.data.api.admin.v1alpha.Admin",
    methods: {
        /** Auth */
        createAccessToken: {
            name: "CreateAccessToken",
            requestType: CreateAccessTokenRequest,
            requestStream: false,
            responseType: CreateAccessTokenResponse,
            responseStream: false,
            options: {},
        },
        getAccessTokenById: {
            name: "GetAccessTokenById",
            requestType: GetAccessTokenByIdRequest,
            requestStream: false,
            responseType: GetAccessTokenByIdResponse,
            responseStream: false,
            options: {},
        },
        getAccessTokensByOrganizationName: {
            name: "GetAccessTokensByOrganizationName",
            requestType: GetAccessTokensByOrganizationNameRequest,
            requestStream: false,
            responseType: GetAccessTokensByOrganizationNameResponse,
            responseStream: false,
            options: {},
        },
        revokeAccessTokenById: {
            name: "RevokeAccessTokenById",
            requestType: RevokeAccessTokenByIdRequest,
            requestStream: false,
            responseType: RevokeAccessTokenByIdResponse,
            responseStream: false,
            options: {},
        },
        /** Subscriptions */
        createSubscription: {
            name: "CreateSubscription",
            requestType: CreateSubscriptionRequest,
            requestStream: false,
            responseType: CreateSubscriptionResponse,
            responseStream: false,
            options: {},
        },
        getSubscriptionById: {
            name: "GetSubscriptionById",
            requestType: GetSubscriptionByIdRequest,
            requestStream: false,
            responseType: GetSubscriptionByIdResponse,
            responseStream: false,
            options: {},
        },
        getSubscriptionsByOrganizationName: {
            name: "GetSubscriptionsByOrganizationName",
            requestType: GetSubscriptionsByOrganizationNameRequest,
            requestStream: false,
            responseType: GetSubscriptionsByOrganizationNameResponse,
            responseStream: false,
            options: {},
        },
        updateSubscription: {
            name: "UpdateSubscription",
            requestType: UpdateSubscriptionRequest,
            requestStream: false,
            responseType: UpdateSubscriptionResponse,
            responseStream: false,
            options: {},
        },
        deleteSubscription: {
            name: "DeleteSubscription",
            requestType: DeleteSubscriptionRequest,
            requestStream: false,
            responseType: DeleteSubscriptionResponse,
            responseStream: false,
            options: {},
        },
        /** Organizations */
        createOrganization: {
            name: "CreateOrganization",
            requestType: CreateOrganizationRequest,
            requestStream: false,
            responseType: CreateOrganizationResponse,
            responseStream: false,
            options: {},
        },
        getOrganizationById: {
            name: "GetOrganizationById",
            requestType: GetOrganizationByIdRequest,
            requestStream: false,
            responseType: GetOrganizationByIdResponse,
            responseStream: false,
            options: {},
        },
        getOrganizationByName: {
            name: "GetOrganizationByName",
            requestType: GetOrganizationByNameRequest,
            requestStream: false,
            responseType: GetOrganizationByNameResponse,
            responseStream: false,
            options: {},
        },
        getOrganizations: {
            name: "GetOrganizations",
            requestType: GetOrganizationsRequest,
            requestStream: false,
            responseType: GetOrganizationsResponse,
            responseStream: false,
            options: {},
        },
        /** Audit Logs */
        getAuditLogEventsByOrganizationName: {
            name: "GetAuditLogEventsByOrganizationName",
            requestType: GetAuditLogEventsByOrganizationNameRequest,
            requestStream: false,
            responseType: GetAuditLogEventsByOrganizationNameResponse,
            responseStream: false,
            options: {},
        },
        createAuditLogEvent: {
            name: "CreateAuditLogEvent",
            requestType: CreateAuditLogEventRequest,
            requestStream: false,
            responseType: CreateAuditLogEventResponse,
            responseStream: false,
            options: {},
        },
        /** UI Helpers */
        uIGetHydratedOrganizations: {
            name: "UIGetHydratedOrganizations",
            requestType: UIGetOrganizationsRequest,
            requestStream: false,
            responseType: UIGetOrganizationsResponse,
            responseStream: false,
            options: {},
        },
    },
};
