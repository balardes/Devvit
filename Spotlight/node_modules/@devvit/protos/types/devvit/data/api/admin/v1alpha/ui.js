/**
 * #ui.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../../../typeRegistry.js';
import { AccessToken } from './auth.js';
import { Organization } from './organization.js';
import { Subscription } from './subscription.js';
function createBaseUIGetOrganizationsRequest() {
    return {};
}
export const UIGetOrganizationsRequest = {
    $type: "devvit.data.api.admin.v1alpha.UIGetOrganizationsRequest",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUIGetOrganizationsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return UIGetOrganizationsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseUIGetOrganizationsRequest();
        return message;
    },
};
messageTypeRegistry.set(UIGetOrganizationsRequest.$type, UIGetOrganizationsRequest);
function createBaseUIGetOrganizationsResponse() {
    return { organizations: [] };
}
export const UIGetOrganizationsResponse = {
    $type: "devvit.data.api.admin.v1alpha.UIGetOrganizationsResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.organizations) {
            UIGetOrganizationsResponse_HydratedOrganization.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUIGetOrganizationsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.organizations.push(UIGetOrganizationsResponse_HydratedOrganization.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            organizations: globalThis.Array.isArray(object?.organizations)
                ? object.organizations.map((e) => UIGetOrganizationsResponse_HydratedOrganization.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.organizations?.length) {
            obj.organizations = message.organizations.map((e) => UIGetOrganizationsResponse_HydratedOrganization.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return UIGetOrganizationsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUIGetOrganizationsResponse();
        message.organizations =
            object.organizations?.map((e) => UIGetOrganizationsResponse_HydratedOrganization.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(UIGetOrganizationsResponse.$type, UIGetOrganizationsResponse);
function createBaseUIGetOrganizationsResponse_HydratedOrganization() {
    return { organization: undefined, subscriptions: [], acccessTokens: [] };
}
export const UIGetOrganizationsResponse_HydratedOrganization = {
    $type: "devvit.data.api.admin.v1alpha.UIGetOrganizationsResponse.HydratedOrganization",
    encode(message, writer = _m0.Writer.create()) {
        if (message.organization !== undefined) {
            Organization.encode(message.organization, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.subscriptions) {
            Subscription.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.acccessTokens) {
            AccessToken.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUIGetOrganizationsResponse_HydratedOrganization();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.organization = Organization.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.subscriptions.push(Subscription.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.acccessTokens.push(AccessToken.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            organization: isSet(object.organization) ? Organization.fromJSON(object.organization) : undefined,
            subscriptions: globalThis.Array.isArray(object?.subscriptions)
                ? object.subscriptions.map((e) => Subscription.fromJSON(e))
                : [],
            acccessTokens: globalThis.Array.isArray(object?.acccessTokens)
                ? object.acccessTokens.map((e) => AccessToken.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.organization !== undefined) {
            obj.organization = Organization.toJSON(message.organization);
        }
        if (message.subscriptions?.length) {
            obj.subscriptions = message.subscriptions.map((e) => Subscription.toJSON(e));
        }
        if (message.acccessTokens?.length) {
            obj.acccessTokens = message.acccessTokens.map((e) => AccessToken.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return UIGetOrganizationsResponse_HydratedOrganization.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUIGetOrganizationsResponse_HydratedOrganization();
        message.organization = (object.organization !== undefined && object.organization !== null)
            ? Organization.fromPartial(object.organization)
            : undefined;
        message.subscriptions = object.subscriptions?.map((e) => Subscription.fromPartial(e)) || [];
        message.acccessTokens = object.acccessTokens?.map((e) => AccessToken.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(UIGetOrganizationsResponse_HydratedOrganization.$type, UIGetOrganizationsResponse_HydratedOrganization);
function isSet(value) {
    return value !== null && value !== undefined;
}
