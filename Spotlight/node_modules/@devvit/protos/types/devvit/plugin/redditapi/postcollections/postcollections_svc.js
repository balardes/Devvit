/**
 * #postcollections_svc.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { AddPostToCollectionRequest, CollectionRequest, CollectionResponse, CreateCollectionRequest, DeleteCollectionRequest, FollowCollectionRequest, RemovePostInCollectionRequest, ReorderCollectionRequest, SubredditCollectionsRequest, SubredditCollectionsResponse, UpdateCollectionDescriptionRequest, UpdateCollectionDisplayLayoutRequest, UpdateCollectionTitleRequest, } from './postcollections_msg.js';
export const PostCollectionsServiceName = "devvit.plugin.redditapi.postcollections.PostCollections";
export class PostCollectionsClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || PostCollectionsServiceName;
        this.rpc = rpc;
        this.Collection = this.Collection.bind(this);
        this.SubredditCollections = this.SubredditCollections.bind(this);
        this.Create = this.Create.bind(this);
        this.Delete = this.Delete.bind(this);
        this.AddPost = this.AddPost.bind(this);
        this.RemovePost = this.RemovePost.bind(this);
        this.Follow = this.Follow.bind(this);
        this.Reorder = this.Reorder.bind(this);
        this.UpdateTitle = this.UpdateTitle.bind(this);
        this.UpdateDescription = this.UpdateDescription.bind(this);
        this.UpdateDisplayLayout = this.UpdateDisplayLayout.bind(this);
    }
    Collection(request, metadata) {
        const data = CollectionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Collection", data, metadata);
        return promise.then((data) => CollectionResponse.decode(_m0.Reader.create(data)));
    }
    SubredditCollections(request, metadata) {
        const data = SubredditCollectionsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "SubredditCollections", data, metadata);
        return promise.then((data) => SubredditCollectionsResponse.decode(_m0.Reader.create(data)));
    }
    Create(request, metadata) {
        const data = CreateCollectionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Create", data, metadata);
        return promise.then((data) => CollectionResponse.decode(_m0.Reader.create(data)));
    }
    Delete(request, metadata) {
        const data = DeleteCollectionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Delete", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    AddPost(request, metadata) {
        const data = AddPostToCollectionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddPost", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    RemovePost(request, metadata) {
        const data = RemovePostInCollectionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RemovePost", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    Follow(request, metadata) {
        const data = FollowCollectionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Follow", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    Reorder(request, metadata) {
        const data = ReorderCollectionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Reorder", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    UpdateTitle(request, metadata) {
        const data = UpdateCollectionTitleRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateTitle", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    UpdateDescription(request, metadata) {
        const data = UpdateCollectionDescriptionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateDescription", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    UpdateDisplayLayout(request, metadata) {
        const data = UpdateCollectionDisplayLayoutRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateDisplayLayout", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
}
export const PostCollectionsDefinition = {
    name: "PostCollections",
    fullName: "devvit.plugin.redditapi.postcollections.PostCollections",
    methods: {
        /** https://www.reddit.com/dev/api/#GET_api_v1_collections_collection */
        collection: {
            name: "Collection",
            requestType: CollectionRequest,
            requestStream: false,
            responseType: CollectionResponse,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api/#GET_api_v1_collections_subreddit_collections */
        subredditCollections: {
            name: "SubredditCollections",
            requestType: SubredditCollectionsRequest,
            requestStream: false,
            responseType: SubredditCollectionsResponse,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api/#POST_api_v1_collections_create_collection */
        create: {
            name: "Create",
            requestType: CreateCollectionRequest,
            requestStream: false,
            responseType: CollectionResponse,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api/#POST_api_v1_collections_delete_collection */
        delete: {
            name: "Delete",
            requestType: DeleteCollectionRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api/#POST_api_v1_collections_add_post_to_collection */
        addPost: {
            name: "AddPost",
            requestType: AddPostToCollectionRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api/#POST_api_v1_collections_remove_post_in_collection */
        removePost: {
            name: "RemovePost",
            requestType: RemovePostInCollectionRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api/#POST_api_v1_collections_follow_collection */
        follow: {
            name: "Follow",
            requestType: FollowCollectionRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api/#POST_api_v1_collections_reorder_collection */
        reorder: {
            name: "Reorder",
            requestType: ReorderCollectionRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api/#POST_api_v1_collections_update_collection_title */
        updateTitle: {
            name: "UpdateTitle",
            requestType: UpdateCollectionTitleRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api/#POST_api_v1_collections_update_collection_description */
        updateDescription: {
            name: "UpdateDescription",
            requestType: UpdateCollectionDescriptionRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api/#POST_api_v1_collections_update_collection_display_layout */
        updateDisplayLayout: {
            name: "UpdateDisplayLayout",
            requestType: UpdateCollectionDisplayLayoutRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
    },
};
