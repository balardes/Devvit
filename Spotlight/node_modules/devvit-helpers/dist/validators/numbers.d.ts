import { Context, SettingsFormFieldValidatorEvent } from "@devvit/public-api";
/**
 * This function validates a positive integer, zero is not considered valid.
 * @param event Takes the Devvit string settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage The error message to return if the validation fails, returns a default error message if not specified.
 * @returns The error message if the validation fails, or undefined if it passes.
 * @deprecated Consider using validateMultiple with validatePositive, validateInteger, and validateNonZero instead.
 */
export declare function validatePositiveInteger(event: SettingsFormFieldValidatorEvent<number>, _context?: Context, errorMessage?: string): Promise<string | undefined>;
/**
 * This function validates a positive number, zero and infinity are not considered valid.
 * @param event Takes the Devvit number settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage The error message to return if the validation fails, returns a default error message if not specified.
 * @returns The error message if the validation fails, or undefined if it passes.
 * @deprecated Consider using validateMultiple with validatePositive and validateNonZero instead.
 */
export declare function validatePositiveNumber(event: SettingsFormFieldValidatorEvent<number>, _context?: Context, errorMessage?: string): Promise<string | undefined>;
/**
 * This function validates a positive number.
 * @param event Takes the Devvit number settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage The error message to return if the validation fails, returns a default error message if not specified.
 * @returns The error message if the validation fails, or undefined if it passes.
 */
export declare function validatePositive(event: SettingsFormFieldValidatorEvent<number>, _context?: Context, errorMessage?: string): Promise<string | undefined>;
/**
 * This function validates a negative number, zero is considered positive.
 * @param event Takes the Devvit number settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage The error message to return if the validation fails, returns a default error message if not specified.
 * @returns
 */
export declare function validateNegative(event: SettingsFormFieldValidatorEvent<number>, _context?: Context, errorMessage?: string): Promise<string | undefined>;
/**
 * This function validates that a number is an integer.
 * @param event Takes the Devvit number settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage The error message to return if the validation fails, returns a default error message if not specified.
 * @returns The error message if the validation fails, or undefined if it passes.
 */
export declare function validateInteger(event: SettingsFormFieldValidatorEvent<number>, _context?: Context, errorMessage?: string): Promise<string | undefined>;
/**
 * This function validates that a number is not zero.
 * @param event Takes the Devvit number settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage The error message to return if the validation fails, returns a default error message if not specified.
 * @returns The error message if the validation fails, or undefined if it passes.
 */
export declare function validateNonZero(event: SettingsFormFieldValidatorEvent<number>, _context?: Context, errorMessage?: string): Promise<string | undefined>;
/**
 * This function validates that a number is finite as opposed to infinite or NaN.
 * @param event Takes the Devvit number settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage The error message to return if the validation fails, returns a default error message if not specified.
 * @returns The error message if the validation fails, or undefined if it passes.
 */
export declare function validateFinite(event: SettingsFormFieldValidatorEvent<number>, _context?: Context, errorMessage?: string): Promise<string | undefined>;
/**
 * This function validates a number.
 * @param event Takes the Devvit number settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage The error message to return if the validation fails, returns a default error message if not specified.
 * @returns The error message if the validation fails, or undefined if it passes.
 */
export declare function validateNumber(event: SettingsFormFieldValidatorEvent<number>, _context?: Context, errorMessage?: string): Promise<string | undefined>;
