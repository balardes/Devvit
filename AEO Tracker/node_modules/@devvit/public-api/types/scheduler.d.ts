import { Data } from './data.js';
import { Devvit } from '../devvit/Devvit.js';
export interface ScheduledJob {
    /** ID of the scheduled job. Use this with scheduler.cancelJob to cancel the job. */
    id: string;
    /** The name of the scheduled job type */
    name: string;
    /** Additional data passed in by the scheduler client */
    data: Data | undefined;
    /** The Date of when this job should run */
    runAt: Date;
}
export interface ScheduledCronJob {
    /** ID of the scheduled job. Use this with scheduler.cancelJob to cancel the job. */
    id: string;
    /** The name of the scheduled job type */
    name: string;
    /** Additional data passed in by the scheduler client */
    data: Data | undefined;
    /** The cron string of when this job should run */
    cron: string;
}
export interface ScheduledJobOptions {
    /** The name of the scheduled job type */
    name: string;
    /** Additional data passed in by the scheduler client */
    data?: Data | undefined;
    /** The Date of when this job should run */
    runAt: Date;
}
export interface ScheduledCronJobOptions {
    /** The name of the scheduled job type */
    name: string;
    /** Additional data passed in by the scheduler client */
    data?: Data | undefined;
    /** The cron string of when this job should run */
    cron: string;
}
/**
 * Schedule a new job to run at a specific time or on a cron schedule
 * @param job The job to schedule
 * @returns {} The id of the scheduled job
 */
export type RunJob = (job: ScheduledJobOptions | ScheduledCronJobOptions) => Promise<string>;
/**
 * Cancel a scheduled job
 * @param jobId The id of the job to cancel
 */
export type CancelJob = (jobId: string) => Promise<void>;
/**
 * The Scheduler client lets you schedule new jobs or cancel existing jobs.
 * You must have the `scheduler` enabled in `Devvit.configure` to use this client.
 */
export interface Scheduler {
    /**
     * Schedule a new job to run at a specific time or on a cron schedule
     * @param job The job to schedule
     * @returns {} The id of the scheduled job
     */
    runJob: RunJob;
    /**
     * Cancel a scheduled job
     * @param jobId The id of the job to cancel
     */
    cancelJob: CancelJob;
    /**
     * Gets the list of all scheduled jobs.
     */
    listJobs: () => Promise<(ScheduledJob | ScheduledCronJob)[]>;
}
export interface ScheduledJobEvent {
    /** The name of the scheduled job */
    name: string;
    /** Additional data passed in by the scheduler client */
    data?: Data | undefined;
}
export type ScheduledJobHandler = (event: ScheduledJobEvent, context: Devvit.Context) => void | Promise<void>;
export interface ScheduledJobType {
    /** The name of the scheduled job type */
    name: string;
    /** The function that will be called when the job is scheduled to run */
    onRun: ScheduledJobHandler;
}
//# sourceMappingURL=scheduler.d.ts.map