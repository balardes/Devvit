import { RedisClient } from '../../types/redis.js';
import { JSONValue } from '@devvit/shared-types/json.js';
import { BlocksReconciler } from './blocks/BlocksReconciler.js';
export type CacheOptions = {
    /**
     * Time to live in milliseconds.
     */
    ttl: number;
    /**
     * Key to use for caching.
     */
    key: string;
};
export type CacheHelper = <T extends JSONValue>(fn: () => Promise<T>, options: CacheOptions) => Promise<T>;
export type CacheEntry = {
    value: JSONValue;
    expires: number;
};
interface Clock {
    now(): Date;
}
type LocalCache = {
    [key: string]: CacheEntry;
};
export declare function makeCache(redis: RedisClient, state: Partial<BlocksReconciler['state']> & {
    __cache?: LocalCache;
}, clock?: Clock): CacheHelper;
export {};
//# sourceMappingURL=cache.d.ts.map