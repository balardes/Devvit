import type { Effect, UIRequest, UIEvent } from '@devvit/protos';
import type { Devvit } from '../../../Devvit.js';
import type { BlocksState, HookSegment, Hook, EventHandler, HookRef } from './types.js';
import type { EffectEmitter } from '../EffectEmitter.js';
/**
 * The RenderContext is a class that holds the state of the rendering process.
 *
 * There are many properties that start with an underscore, which is a convention we use to
 * indicate that they are private and should not be accessed directly.  They are used internally
 * in tests and in the implementation of the BlocksHandler.
 *
 * DO your best to avoid adding new properties to this class to support new features.  It will be tempting
 * to add special cases for new features, but we should strive to work within the existing framework.
 */
export declare class RenderContext implements EffectEmitter {
    request: UIRequest;
    _state: BlocksState;
    _segments: (HookSegment & {
        next: number;
    })[];
    _hooks: {
        [key: string]: Hook;
    };
    _prevHookId: string;
    _effects: {
        [key: string]: Effect;
    };
    _changed: {
        [key: string]: boolean;
    };
    _rootProps: {
        [key: string]: any;
    };
    _generated: {
        [key: string]: boolean;
    };
    static _staticUndeliveredHandlers: {
        [key: string]: EventHandler;
    };
    _undeliveredHandlers: {
        [key: string]: EventHandler;
    };
    _devvitContext?: Devvit.Context;
    get devvitContext(): Devvit.Context;
    set devvitContext(context: Devvit.Context);
    constructor(request: UIRequest);
    push(options: HookSegment): void;
    pop(): void;
    addUndeliveredEventHandler(id: string, handler: EventHandler): void;
    addGlobalUndeliveredEventHandler(id: string, handler: EventHandler): void;
    getHook(ref: HookRef): Hook;
    static addGlobalUndeliveredEventHandler(id: string, handler: EventHandler): void;
    handleUndeliveredEvent(ev: UIEvent): Promise<Effect[] | void>;
    emitEffect(dedupeKey: string, effect: Effect): void;
    get effects(): Effect[];
    nextHookId(options: HookSegment): string;
}
//# sourceMappingURL=RenderContext.d.ts.map