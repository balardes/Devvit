/**
 * #automation_ui_builder.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { Metadata } from "../../../../../lib/Types.js";
import { Form } from '../../../ui/form_builder/v1alpha/form.js';
import { Automation } from '../v1alpha/automation.js';
import { Trigger, TriggerType } from '../v1alpha/trigger.js';
/** The type of step it is. Used to filter list request */
export declare enum AutomationUIBuilderStepType {
    /** ACTION - Action type step */
    ACTION = 0,
    /** FILTER - Filter type step */
    FILTER = 1,
    UNRECOGNIZED = -1
}
export declare function automationUIBuilderStepTypeFromJSON(object: any): AutomationUIBuilderStepType;
export declare function automationUIBuilderStepTypeToJSON(object: AutomationUIBuilderStepType): number;
/** Arguments for listing available triggers */
export interface AutomationUIBuilderListTriggersRequest {
}
/** A list of triggers that may kick off an automation */
export interface AutomationUIBuilderListTriggersResponse {
    triggers: Trigger[];
}
/** Arguments for listing available steps */
export interface AutomationUIBuilderListStepsRequest {
    /** t5 id for subreddit */
    location: string;
    /** datatype the step operates on */
    triggerType: TriggerType;
    /** type of step */
    stepType: AutomationUIBuilderStepType;
}
export interface AutomationUIBuilderStepActor {
    actor: string;
    label: string;
    description: string;
    type: AutomationUIBuilderStepType;
}
/** A list of steps that can be added to an automation */
export interface AutomationUIBuilderListStepsResponse {
    steps: AutomationUIBuilderStepActor[];
}
/** Arguments for listing installed automations for a subreddit */
export interface AutomationUIBuilderListAutomationsRequest {
    /** t5_id for subreddit */
    location: string;
}
/** A list of automations installed to a subreddit */
export interface AutomationUIBuilderListAutomationsResponse {
    automations: Automation[];
}
export interface AutomationUIBuilderGetAutomationRequest {
    /** automation uuid */
    id: string;
}
export interface AutomationUIBuilderGetAutomationResponse {
    /** automation */
    automation?: Automation | undefined;
}
export interface AutomationUIBuilderGetStepFormRequest {
    actor: string;
}
export interface AutomationUIBuilderGetStepFormResponse {
    form?: Form | undefined;
}
/** Arguments for updating a specific automation */
export interface AutomationUIBuilderUpdateAutomationRequest {
    /** The uuid of the automation */
    id: string;
    /** The automation engine representation of the automation */
    automation?: Automation | undefined;
}
export interface AutomationUIBuilderUpdateAutomationResponse {
}
export declare const AutomationUIBuilderListTriggersRequest: {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderListTriggersRequest";
    encode(_: AutomationUIBuilderListTriggersRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderListTriggersRequest;
    fromJSON(_: any): AutomationUIBuilderListTriggersRequest;
    toJSON(_: AutomationUIBuilderListTriggersRequest): unknown;
    create(base?: DeepPartial<AutomationUIBuilderListTriggersRequest>): AutomationUIBuilderListTriggersRequest;
    fromPartial(_: DeepPartial<AutomationUIBuilderListTriggersRequest>): AutomationUIBuilderListTriggersRequest;
};
export declare const AutomationUIBuilderListTriggersResponse: {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderListTriggersResponse";
    encode(message: AutomationUIBuilderListTriggersResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderListTriggersResponse;
    fromJSON(object: any): AutomationUIBuilderListTriggersResponse;
    toJSON(message: AutomationUIBuilderListTriggersResponse): unknown;
    create(base?: DeepPartial<AutomationUIBuilderListTriggersResponse>): AutomationUIBuilderListTriggersResponse;
    fromPartial(object: DeepPartial<AutomationUIBuilderListTriggersResponse>): AutomationUIBuilderListTriggersResponse;
};
export declare const AutomationUIBuilderListStepsRequest: {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderListStepsRequest";
    encode(message: AutomationUIBuilderListStepsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderListStepsRequest;
    fromJSON(object: any): AutomationUIBuilderListStepsRequest;
    toJSON(message: AutomationUIBuilderListStepsRequest): unknown;
    create(base?: DeepPartial<AutomationUIBuilderListStepsRequest>): AutomationUIBuilderListStepsRequest;
    fromPartial(object: DeepPartial<AutomationUIBuilderListStepsRequest>): AutomationUIBuilderListStepsRequest;
};
export declare const AutomationUIBuilderStepActor: {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderStepActor";
    encode(message: AutomationUIBuilderStepActor, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderStepActor;
    fromJSON(object: any): AutomationUIBuilderStepActor;
    toJSON(message: AutomationUIBuilderStepActor): unknown;
    create(base?: DeepPartial<AutomationUIBuilderStepActor>): AutomationUIBuilderStepActor;
    fromPartial(object: DeepPartial<AutomationUIBuilderStepActor>): AutomationUIBuilderStepActor;
};
export declare const AutomationUIBuilderListStepsResponse: {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderListStepsResponse";
    encode(message: AutomationUIBuilderListStepsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderListStepsResponse;
    fromJSON(object: any): AutomationUIBuilderListStepsResponse;
    toJSON(message: AutomationUIBuilderListStepsResponse): unknown;
    create(base?: DeepPartial<AutomationUIBuilderListStepsResponse>): AutomationUIBuilderListStepsResponse;
    fromPartial(object: DeepPartial<AutomationUIBuilderListStepsResponse>): AutomationUIBuilderListStepsResponse;
};
export declare const AutomationUIBuilderListAutomationsRequest: {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderListAutomationsRequest";
    encode(message: AutomationUIBuilderListAutomationsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderListAutomationsRequest;
    fromJSON(object: any): AutomationUIBuilderListAutomationsRequest;
    toJSON(message: AutomationUIBuilderListAutomationsRequest): unknown;
    create(base?: DeepPartial<AutomationUIBuilderListAutomationsRequest>): AutomationUIBuilderListAutomationsRequest;
    fromPartial(object: DeepPartial<AutomationUIBuilderListAutomationsRequest>): AutomationUIBuilderListAutomationsRequest;
};
export declare const AutomationUIBuilderListAutomationsResponse: {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderListAutomationsResponse";
    encode(message: AutomationUIBuilderListAutomationsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderListAutomationsResponse;
    fromJSON(object: any): AutomationUIBuilderListAutomationsResponse;
    toJSON(message: AutomationUIBuilderListAutomationsResponse): unknown;
    create(base?: DeepPartial<AutomationUIBuilderListAutomationsResponse>): AutomationUIBuilderListAutomationsResponse;
    fromPartial(object: DeepPartial<AutomationUIBuilderListAutomationsResponse>): AutomationUIBuilderListAutomationsResponse;
};
export declare const AutomationUIBuilderGetAutomationRequest: {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderGetAutomationRequest";
    encode(message: AutomationUIBuilderGetAutomationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderGetAutomationRequest;
    fromJSON(object: any): AutomationUIBuilderGetAutomationRequest;
    toJSON(message: AutomationUIBuilderGetAutomationRequest): unknown;
    create(base?: DeepPartial<AutomationUIBuilderGetAutomationRequest>): AutomationUIBuilderGetAutomationRequest;
    fromPartial(object: DeepPartial<AutomationUIBuilderGetAutomationRequest>): AutomationUIBuilderGetAutomationRequest;
};
export declare const AutomationUIBuilderGetAutomationResponse: {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderGetAutomationResponse";
    encode(message: AutomationUIBuilderGetAutomationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderGetAutomationResponse;
    fromJSON(object: any): AutomationUIBuilderGetAutomationResponse;
    toJSON(message: AutomationUIBuilderGetAutomationResponse): unknown;
    create(base?: DeepPartial<AutomationUIBuilderGetAutomationResponse>): AutomationUIBuilderGetAutomationResponse;
    fromPartial(object: DeepPartial<AutomationUIBuilderGetAutomationResponse>): AutomationUIBuilderGetAutomationResponse;
};
export declare const AutomationUIBuilderGetStepFormRequest: {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderGetStepFormRequest";
    encode(message: AutomationUIBuilderGetStepFormRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderGetStepFormRequest;
    fromJSON(object: any): AutomationUIBuilderGetStepFormRequest;
    toJSON(message: AutomationUIBuilderGetStepFormRequest): unknown;
    create(base?: DeepPartial<AutomationUIBuilderGetStepFormRequest>): AutomationUIBuilderGetStepFormRequest;
    fromPartial(object: DeepPartial<AutomationUIBuilderGetStepFormRequest>): AutomationUIBuilderGetStepFormRequest;
};
export declare const AutomationUIBuilderGetStepFormResponse: {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderGetStepFormResponse";
    encode(message: AutomationUIBuilderGetStepFormResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderGetStepFormResponse;
    fromJSON(object: any): AutomationUIBuilderGetStepFormResponse;
    toJSON(message: AutomationUIBuilderGetStepFormResponse): unknown;
    create(base?: DeepPartial<AutomationUIBuilderGetStepFormResponse>): AutomationUIBuilderGetStepFormResponse;
    fromPartial(object: DeepPartial<AutomationUIBuilderGetStepFormResponse>): AutomationUIBuilderGetStepFormResponse;
};
export declare const AutomationUIBuilderUpdateAutomationRequest: {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderUpdateAutomationRequest";
    encode(message: AutomationUIBuilderUpdateAutomationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderUpdateAutomationRequest;
    fromJSON(object: any): AutomationUIBuilderUpdateAutomationRequest;
    toJSON(message: AutomationUIBuilderUpdateAutomationRequest): unknown;
    create(base?: DeepPartial<AutomationUIBuilderUpdateAutomationRequest>): AutomationUIBuilderUpdateAutomationRequest;
    fromPartial(object: DeepPartial<AutomationUIBuilderUpdateAutomationRequest>): AutomationUIBuilderUpdateAutomationRequest;
};
export declare const AutomationUIBuilderUpdateAutomationResponse: {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderUpdateAutomationResponse";
    encode(_: AutomationUIBuilderUpdateAutomationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderUpdateAutomationResponse;
    fromJSON(_: any): AutomationUIBuilderUpdateAutomationResponse;
    toJSON(_: AutomationUIBuilderUpdateAutomationResponse): unknown;
    create(base?: DeepPartial<AutomationUIBuilderUpdateAutomationResponse>): AutomationUIBuilderUpdateAutomationResponse;
    fromPartial(_: DeepPartial<AutomationUIBuilderUpdateAutomationResponse>): AutomationUIBuilderUpdateAutomationResponse;
};
/** Service for providing data to Automation Builder UI element */
export interface AutomationUIBuilder {
    /** Looks up all registered Triggers from the database */
    ListTriggers(request: AutomationUIBuilderListTriggersRequest, metadata?: Metadata): Promise<AutomationUIBuilderListTriggersResponse>;
    /** Find all installed Apps for the installation and return any actors that implement the trigger and step type */
    ListSteps(request: AutomationUIBuilderListStepsRequest, metadata?: Metadata): Promise<AutomationUIBuilderListStepsResponse>;
    /** Get all automations for a given location (subreddit) */
    ListAutomations(request: AutomationUIBuilderListAutomationsRequest, metadata?: Metadata): Promise<AutomationUIBuilderListAutomationsResponse>;
    /** Gets an automation */
    GetAutomation(request: AutomationUIBuilderGetAutomationRequest, metadata?: Metadata): Promise<AutomationUIBuilderGetAutomationResponse>;
    /** Updates an automation. Will create a new automation if ID isn't set */
    UpdateAutomation(request: AutomationUIBuilderUpdateAutomationRequest, metadata?: Metadata): Promise<AutomationUIBuilderUpdateAutomationResponse>;
    /** Get form layout for step */
    GetStepForm(request: AutomationUIBuilderGetStepFormRequest, metadata?: Metadata): Promise<AutomationUIBuilderGetStepFormResponse>;
}
export declare const AutomationUIBuilderServiceName = "devvit.actor.automation.v2alpha.AutomationUIBuilder";
export declare class AutomationUIBuilderClientImpl implements AutomationUIBuilder {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    ListTriggers(request: AutomationUIBuilderListTriggersRequest, metadata?: Metadata): Promise<AutomationUIBuilderListTriggersResponse>;
    ListSteps(request: AutomationUIBuilderListStepsRequest, metadata?: Metadata): Promise<AutomationUIBuilderListStepsResponse>;
    ListAutomations(request: AutomationUIBuilderListAutomationsRequest, metadata?: Metadata): Promise<AutomationUIBuilderListAutomationsResponse>;
    GetAutomation(request: AutomationUIBuilderGetAutomationRequest, metadata?: Metadata): Promise<AutomationUIBuilderGetAutomationResponse>;
    UpdateAutomation(request: AutomationUIBuilderUpdateAutomationRequest, metadata?: Metadata): Promise<AutomationUIBuilderUpdateAutomationResponse>;
    GetStepForm(request: AutomationUIBuilderGetStepFormRequest, metadata?: Metadata): Promise<AutomationUIBuilderGetStepFormResponse>;
}
/** Service for providing data to Automation Builder UI element */
export type AutomationUIBuilderDefinition = typeof AutomationUIBuilderDefinition;
export declare const AutomationUIBuilderDefinition: {
    readonly name: "AutomationUIBuilder";
    readonly fullName: "devvit.actor.automation.v2alpha.AutomationUIBuilder";
    readonly methods: {
        /** Looks up all registered Triggers from the database */
        readonly listTriggers: {
            readonly name: "ListTriggers";
            readonly requestType: {
                $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderListTriggersRequest";
                encode(_: AutomationUIBuilderListTriggersRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderListTriggersRequest;
                fromJSON(_: any): AutomationUIBuilderListTriggersRequest;
                toJSON(_: AutomationUIBuilderListTriggersRequest): unknown;
                create(base?: DeepPartial<AutomationUIBuilderListTriggersRequest>): AutomationUIBuilderListTriggersRequest;
                fromPartial(_: DeepPartial<AutomationUIBuilderListTriggersRequest>): AutomationUIBuilderListTriggersRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderListTriggersResponse";
                encode(message: AutomationUIBuilderListTriggersResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderListTriggersResponse;
                fromJSON(object: any): AutomationUIBuilderListTriggersResponse;
                toJSON(message: AutomationUIBuilderListTriggersResponse): unknown;
                create(base?: DeepPartial<AutomationUIBuilderListTriggersResponse>): AutomationUIBuilderListTriggersResponse;
                fromPartial(object: DeepPartial<AutomationUIBuilderListTriggersResponse>): AutomationUIBuilderListTriggersResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Find all installed Apps for the installation and return any actors that implement the trigger and step type */
        readonly listSteps: {
            readonly name: "ListSteps";
            readonly requestType: {
                $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderListStepsRequest";
                encode(message: AutomationUIBuilderListStepsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderListStepsRequest;
                fromJSON(object: any): AutomationUIBuilderListStepsRequest;
                toJSON(message: AutomationUIBuilderListStepsRequest): unknown;
                create(base?: DeepPartial<AutomationUIBuilderListStepsRequest>): AutomationUIBuilderListStepsRequest;
                fromPartial(object: DeepPartial<AutomationUIBuilderListStepsRequest>): AutomationUIBuilderListStepsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderListStepsResponse";
                encode(message: AutomationUIBuilderListStepsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderListStepsResponse;
                fromJSON(object: any): AutomationUIBuilderListStepsResponse;
                toJSON(message: AutomationUIBuilderListStepsResponse): unknown;
                create(base?: DeepPartial<AutomationUIBuilderListStepsResponse>): AutomationUIBuilderListStepsResponse;
                fromPartial(object: DeepPartial<AutomationUIBuilderListStepsResponse>): AutomationUIBuilderListStepsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Get all automations for a given location (subreddit) */
        readonly listAutomations: {
            readonly name: "ListAutomations";
            readonly requestType: {
                $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderListAutomationsRequest";
                encode(message: AutomationUIBuilderListAutomationsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderListAutomationsRequest;
                fromJSON(object: any): AutomationUIBuilderListAutomationsRequest;
                toJSON(message: AutomationUIBuilderListAutomationsRequest): unknown;
                create(base?: DeepPartial<AutomationUIBuilderListAutomationsRequest>): AutomationUIBuilderListAutomationsRequest;
                fromPartial(object: DeepPartial<AutomationUIBuilderListAutomationsRequest>): AutomationUIBuilderListAutomationsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderListAutomationsResponse";
                encode(message: AutomationUIBuilderListAutomationsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderListAutomationsResponse;
                fromJSON(object: any): AutomationUIBuilderListAutomationsResponse;
                toJSON(message: AutomationUIBuilderListAutomationsResponse): unknown;
                create(base?: DeepPartial<AutomationUIBuilderListAutomationsResponse>): AutomationUIBuilderListAutomationsResponse;
                fromPartial(object: DeepPartial<AutomationUIBuilderListAutomationsResponse>): AutomationUIBuilderListAutomationsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Gets an automation */
        readonly getAutomation: {
            readonly name: "GetAutomation";
            readonly requestType: {
                $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderGetAutomationRequest";
                encode(message: AutomationUIBuilderGetAutomationRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderGetAutomationRequest;
                fromJSON(object: any): AutomationUIBuilderGetAutomationRequest;
                toJSON(message: AutomationUIBuilderGetAutomationRequest): unknown;
                create(base?: DeepPartial<AutomationUIBuilderGetAutomationRequest>): AutomationUIBuilderGetAutomationRequest;
                fromPartial(object: DeepPartial<AutomationUIBuilderGetAutomationRequest>): AutomationUIBuilderGetAutomationRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderGetAutomationResponse";
                encode(message: AutomationUIBuilderGetAutomationResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderGetAutomationResponse;
                fromJSON(object: any): AutomationUIBuilderGetAutomationResponse;
                toJSON(message: AutomationUIBuilderGetAutomationResponse): unknown;
                create(base?: DeepPartial<AutomationUIBuilderGetAutomationResponse>): AutomationUIBuilderGetAutomationResponse;
                fromPartial(object: DeepPartial<AutomationUIBuilderGetAutomationResponse>): AutomationUIBuilderGetAutomationResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Updates an automation. Will create a new automation if ID isn't set */
        readonly updateAutomation: {
            readonly name: "UpdateAutomation";
            readonly requestType: {
                $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderUpdateAutomationRequest";
                encode(message: AutomationUIBuilderUpdateAutomationRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderUpdateAutomationRequest;
                fromJSON(object: any): AutomationUIBuilderUpdateAutomationRequest;
                toJSON(message: AutomationUIBuilderUpdateAutomationRequest): unknown;
                create(base?: DeepPartial<AutomationUIBuilderUpdateAutomationRequest>): AutomationUIBuilderUpdateAutomationRequest;
                fromPartial(object: DeepPartial<AutomationUIBuilderUpdateAutomationRequest>): AutomationUIBuilderUpdateAutomationRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderUpdateAutomationResponse";
                encode(_: AutomationUIBuilderUpdateAutomationResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderUpdateAutomationResponse;
                fromJSON(_: any): AutomationUIBuilderUpdateAutomationResponse;
                toJSON(_: AutomationUIBuilderUpdateAutomationResponse): unknown;
                create(base?: DeepPartial<AutomationUIBuilderUpdateAutomationResponse>): AutomationUIBuilderUpdateAutomationResponse;
                fromPartial(_: DeepPartial<AutomationUIBuilderUpdateAutomationResponse>): AutomationUIBuilderUpdateAutomationResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Get form layout for step */
        readonly getStepForm: {
            readonly name: "GetStepForm";
            readonly requestType: {
                $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderGetStepFormRequest";
                encode(message: AutomationUIBuilderGetStepFormRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderGetStepFormRequest;
                fromJSON(object: any): AutomationUIBuilderGetStepFormRequest;
                toJSON(message: AutomationUIBuilderGetStepFormRequest): unknown;
                create(base?: DeepPartial<AutomationUIBuilderGetStepFormRequest>): AutomationUIBuilderGetStepFormRequest;
                fromPartial(object: DeepPartial<AutomationUIBuilderGetStepFormRequest>): AutomationUIBuilderGetStepFormRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderGetStepFormResponse";
                encode(message: AutomationUIBuilderGetStepFormResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomationUIBuilderGetStepFormResponse;
                fromJSON(object: any): AutomationUIBuilderGetStepFormResponse;
                toJSON(message: AutomationUIBuilderGetStepFormResponse): unknown;
                create(base?: DeepPartial<AutomationUIBuilderGetStepFormResponse>): AutomationUIBuilderGetStepFormResponse;
                fromPartial(object: DeepPartial<AutomationUIBuilderGetStepFormResponse>): AutomationUIBuilderGetStepFormResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=automation_ui_builder.d.ts.map