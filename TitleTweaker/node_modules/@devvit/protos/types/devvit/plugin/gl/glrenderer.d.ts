/**
 * #glrenderer.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { Metadata } from "../../../../lib/Types.js";
import { Empty } from '../../../google/protobuf/empty.js';
import { GLMethod } from './methods.js';
import { GLMethodType } from './methodtype.js';
export interface CommandArgument {
    null?: boolean | undefined;
    scalar?: any | undefined;
    blob?: Uint8Array | undefined;
    referenceId?: number | undefined;
}
export interface GLCommand {
    method: GLMethod;
    type: GLMethodType;
    args: CommandArgument[];
    referenceId: number;
}
export interface ExecuteMessage {
    commands: GLCommand[];
}
export declare const CommandArgument: {
    $type: "devvit.plugin.gl.CommandArgument";
    encode(message: CommandArgument, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommandArgument;
    fromJSON(object: any): CommandArgument;
    toJSON(message: CommandArgument): unknown;
    create(base?: DeepPartial<CommandArgument>): CommandArgument;
    fromPartial(object: DeepPartial<CommandArgument>): CommandArgument;
};
export declare const GLCommand: {
    $type: "devvit.plugin.gl.GLCommand";
    encode(message: GLCommand, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GLCommand;
    fromJSON(object: any): GLCommand;
    toJSON(message: GLCommand): unknown;
    create(base?: DeepPartial<GLCommand>): GLCommand;
    fromPartial(object: DeepPartial<GLCommand>): GLCommand;
};
export declare const ExecuteMessage: {
    $type: "devvit.plugin.gl.ExecuteMessage";
    encode(message: ExecuteMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExecuteMessage;
    fromJSON(object: any): ExecuteMessage;
    toJSON(message: ExecuteMessage): unknown;
    create(base?: DeepPartial<ExecuteMessage>): ExecuteMessage;
    fromPartial(object: DeepPartial<ExecuteMessage>): ExecuteMessage;
};
export interface GLRenderer {
    Execute(request: ExecuteMessage, metadata?: Metadata): Promise<Empty>;
}
export declare const GLRendererServiceName = "devvit.plugin.gl.GLRenderer";
export declare class GLRendererClientImpl implements GLRenderer {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Execute(request: ExecuteMessage, metadata?: Metadata): Promise<Empty>;
}
export type GLRendererDefinition = typeof GLRendererDefinition;
export declare const GLRendererDefinition: {
    readonly name: "GLRenderer";
    readonly fullName: "devvit.plugin.gl.GLRenderer";
    readonly methods: {
        readonly execute: {
            readonly name: "Execute";
            readonly requestType: {
                $type: "devvit.plugin.gl.ExecuteMessage";
                encode(message: ExecuteMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ExecuteMessage;
                fromJSON(object: any): ExecuteMessage;
                toJSON(message: ExecuteMessage): unknown;
                create(base?: DeepPartial<ExecuteMessage>): ExecuteMessage;
                fromPartial(object: DeepPartial<ExecuteMessage>): ExecuteMessage;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=glrenderer.d.ts.map