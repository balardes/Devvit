/**
 * #modnote_svc.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { DeleteNotesRequest, DeleteNotesResponse, GetNotesRequest, ModNotesResponse, PostModNotesResponse, PostNotesRequest, PostRemovalNoteRequest, RecentNotesRequest, } from './modnote_msg.js';
export const ModNoteServiceName = "devvit.plugin.redditapi.modnote.ModNote";
export class ModNoteClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || ModNoteServiceName;
        this.rpc = rpc;
        this.GetNotes = this.GetNotes.bind(this);
        this.DeleteNotes = this.DeleteNotes.bind(this);
        this.PostNotes = this.PostNotes.bind(this);
        this.PostRemovalNote = this.PostRemovalNote.bind(this);
        this.RecentNotes = this.RecentNotes.bind(this);
    }
    GetNotes(request, metadata) {
        const data = GetNotesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetNotes", data, metadata);
        return promise.then((data) => ModNotesResponse.decode(_m0.Reader.create(data)));
    }
    DeleteNotes(request, metadata) {
        const data = DeleteNotesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "DeleteNotes", data, metadata);
        return promise.then((data) => DeleteNotesResponse.decode(_m0.Reader.create(data)));
    }
    PostNotes(request, metadata) {
        const data = PostNotesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "PostNotes", data, metadata);
        return promise.then((data) => PostModNotesResponse.decode(_m0.Reader.create(data)));
    }
    PostRemovalNote(request, metadata) {
        const data = PostRemovalNoteRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "PostRemovalNote", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    RecentNotes(request, metadata) {
        const data = RecentNotesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RecentNotes", data, metadata);
        return promise.then((data) => ModNotesResponse.decode(_m0.Reader.create(data)));
    }
}
export const ModNoteDefinition = {
    name: "ModNote",
    fullName: "devvit.plugin.redditapi.modnote.ModNote",
    methods: {
        /** @see {@link https://www.reddit.com/dev/api#GET_api_mod_notes} */
        getNotes: {
            name: "GetNotes",
            requestType: GetNotesRequest,
            requestStream: false,
            responseType: ModNotesResponse,
            responseStream: false,
            options: {},
        },
        /** @see {@link https://www.reddit.com/dev/api/#DELETE_api_mod_notes} */
        deleteNotes: {
            name: "DeleteNotes",
            requestType: DeleteNotesRequest,
            requestStream: false,
            responseType: DeleteNotesResponse,
            responseStream: false,
            options: {},
        },
        /** @see {@link https://www.reddit.com/dev/api#POST_api_mod_notes} */
        postNotes: {
            name: "PostNotes",
            requestType: PostNotesRequest,
            requestStream: false,
            responseType: PostModNotesResponse,
            responseStream: false,
            options: {},
        },
        /** Add a mod note for why a post or comment was removed */
        postRemovalNote: {
            name: "PostRemovalNote",
            requestType: PostRemovalNoteRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** @see {@link https://www.reddit.com/dev/api#GET_api_mod_notes_recent} */
        recentNotes: {
            name: "RecentNotes",
            requestType: RecentNotesRequest,
            requestStream: false,
            responseType: ModNotesResponse,
            responseStream: false,
            options: {},
        },
    },
};
