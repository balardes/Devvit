/**
 * #send_event.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { BoolValue } from '../../../../google/protobuf/wrappers.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
import { UIEvent } from '../../events/v1alpha/event.js';
function createBaseSendEventEffect() {
    return { event: undefined, jumpsQueue: undefined };
}
export const SendEventEffect = {
    $type: "devvit.ui.effects.v1alpha.SendEventEffect",
    encode(message, writer = _m0.Writer.create()) {
        if (message.event !== undefined) {
            UIEvent.encode(message.event, writer.uint32(10).fork()).ldelim();
        }
        if (message.jumpsQueue !== undefined) {
            BoolValue.encode({ value: message.jumpsQueue }, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSendEventEffect();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.event = UIEvent.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.jumpsQueue = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            event: isSet(object.event) ? UIEvent.fromJSON(object.event) : undefined,
            jumpsQueue: isSet(object.jumpsQueue) ? Boolean(object.jumpsQueue) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.event !== undefined) {
            obj.event = UIEvent.toJSON(message.event);
        }
        if (message.jumpsQueue !== undefined) {
            obj.jumpsQueue = message.jumpsQueue;
        }
        return obj;
    },
    create(base) {
        return SendEventEffect.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSendEventEffect();
        message.event = (object.event !== undefined && object.event !== null)
            ? UIEvent.fromPartial(object.event)
            : undefined;
        message.jumpsQueue = object.jumpsQueue ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(SendEventEffect.$type, SendEventEffect);
function isSet(value) {
    return value !== null && value !== undefined;
}
