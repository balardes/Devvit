import { Context, SettingsFormFieldValidatorEvent } from "@devvit/public-api";
/**
 * This function validates a comma-separated list of usernames.
 * @param event Takes the Devvit string settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage This is the returned error message if the regex test at the end fails, most likely due to username length or invalid characters.
 * @param errorMessagePrefix This is the returned error message if the string contains a forward slash, indicating the presence of a /u/.
 * @param errorMessageSpace This is the returned error message if the string contains a space.
 * @param errorMessageTrailing This is the returned error message if the string ends with a comma.
 * @returns The error message if the validation fails, or undefined if it passes.
 */
export declare function validateUsernameList(event: SettingsFormFieldValidatorEvent<string>, _context?: Context, errorMessage?: string, errorMessagePrefix?: string, errorMessageSpace?: string, errorMessageTrailing?: string): Promise<string | undefined>;
/**
 * This function validates a comma-separated list of subreddit names.
 * @param event Takes the Devvit string settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage This is the returned error message if the regex test at the end fails, most likely due to subname length or invalid characters.
 * @param errorMessagePrefix This is the returned error message if the string contains a forward slash, indicating the presence of a /r/.
 * @param errorMessageSpace This is the returned error message if the string contains a space.
 * @param errorMessageTrailing This is the returned error message if the string ends with a comma.
 * @returns The error message if the validation fails, or undefined if it passes.
 */
export declare function validateSubredditNameList(event: SettingsFormFieldValidatorEvent<string>, _context?: Context, errorMessage?: string, errorMessagePrefix?: string, errorMessageSpace?: string, errorMessageTrailing?: string): Promise<string | undefined>;
/**
 * This function validates a username.
 * @param event Takes the Devvit string settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage This is the returned error message if the regex test at the end fails, most likely due to username length or invalid characters.
 * @param errorMessagePrefix This is the returned error message if the string contains a forward slash, indicating the presence of a /u/.
 * @param errorMessageSpace This is the returned error message if the string contains a space.
 * @param errorMessageComma This is the returned error message if the string contains a comma.
 * @returns The error message if the validation fails, or undefined if it passes.
 */
export declare function validateUsername(event: SettingsFormFieldValidatorEvent<string>, _context?: Context, errorMessage?: string, errorMessagePrefix?: string, errorMessageSpace?: string, errorMessageComma?: string): Promise<string | undefined>;
/**
 * This function validates a subreddit name.
 * @param event Takes the Devvit string settings field validator object.
 * @param _context Takes the Devvit context object for compatability, but it's not used in this function.
 * @param errorMessage This is the returned error message if the regex test at the end fails, most likely due to subreddit name length or invalid characters.
 * @param errorMessagePrefix This is the returned error message if the string contains a forward slash, indicating the presence of a /r/.
 * @param errorMessageSpace This is the returned error message if the string contains a space.
 * @param errorMessageComma This is the returned error message if the string contains a comma.
 * @returns The error message if the validation fails, or undefined if it passes.
 */
export declare function validateSubredditName(event: SettingsFormFieldValidatorEvent<string>, _context?: Context, errorMessage?: string, errorMessagePrefix?: string, errorMessageSpace?: string, errorMessageComma?: string): Promise<string | undefined>;
