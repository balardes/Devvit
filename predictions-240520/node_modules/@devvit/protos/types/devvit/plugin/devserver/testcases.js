/**
 * #testcases.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
function createBaseTestCasesList() {
    return { actorName: "", testCases: [] };
}
export const TestCasesList = {
    $type: "devvit.plugin.devserver.TestCasesList",
    encode(message, writer = _m0.Writer.create()) {
        if (message.actorName !== "") {
            writer.uint32(10).string(message.actorName);
        }
        for (const v of message.testCases) {
            TestCase.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestCasesList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.actorName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.testCases.push(TestCase.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            actorName: isSet(object.actorName) ? globalThis.String(object.actorName) : "",
            testCases: globalThis.Array.isArray(object?.testCases)
                ? object.testCases.map((e) => TestCase.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.actorName !== "") {
            obj.actorName = message.actorName;
        }
        if (message.testCases?.length) {
            obj.testCases = message.testCases.map((e) => TestCase.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return TestCasesList.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTestCasesList();
        message.actorName = object.actorName ?? "";
        message.testCases = object.testCases?.map((e) => TestCase.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(TestCasesList.$type, TestCasesList);
function createBaseTestCase() {
    return { methodName: "", testName: "", testInput: "" };
}
export const TestCase = {
    $type: "devvit.plugin.devserver.TestCase",
    encode(message, writer = _m0.Writer.create()) {
        if (message.methodName !== "") {
            writer.uint32(10).string(message.methodName);
        }
        if (message.testName !== "") {
            writer.uint32(18).string(message.testName);
        }
        if (message.testInput !== "") {
            writer.uint32(26).string(message.testInput);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestCase();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.methodName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.testName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.testInput = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            methodName: isSet(object.methodName) ? globalThis.String(object.methodName) : "",
            testName: isSet(object.testName) ? globalThis.String(object.testName) : "",
            testInput: isSet(object.testInput) ? globalThis.String(object.testInput) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.methodName !== "") {
            obj.methodName = message.methodName;
        }
        if (message.testName !== "") {
            obj.testName = message.testName;
        }
        if (message.testInput !== "") {
            obj.testInput = message.testInput;
        }
        return obj;
    },
    create(base) {
        return TestCase.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTestCase();
        message.methodName = object.methodName ?? "";
        message.testName = object.testName ?? "";
        message.testInput = object.testInput ?? "";
        return message;
    },
};
messageTypeRegistry.set(TestCase.$type, TestCase);
function isSet(value) {
    return value !== null && value !== undefined;
}
