/**
 * #automodregex.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../typeRegistry.js';
function createBaseAutomodRegexInput() {
    return { pattern: "", input: "", caseInsensitive: false };
}
export const AutomodRegexInput = {
    $type: "devvit.plugin.automodregex.AutomodRegexInput",
    encode(message, writer = _m0.Writer.create()) {
        if (message.pattern !== "") {
            writer.uint32(10).string(message.pattern);
        }
        if (message.input !== "") {
            writer.uint32(18).string(message.input);
        }
        if (message.caseInsensitive !== false) {
            writer.uint32(24).bool(message.caseInsensitive);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAutomodRegexInput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.pattern = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.input = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.caseInsensitive = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pattern: isSet(object.pattern) ? globalThis.String(object.pattern) : "",
            input: isSet(object.input) ? globalThis.String(object.input) : "",
            caseInsensitive: isSet(object.caseInsensitive) ? globalThis.Boolean(object.caseInsensitive) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pattern !== "") {
            obj.pattern = message.pattern;
        }
        if (message.input !== "") {
            obj.input = message.input;
        }
        if (message.caseInsensitive !== false) {
            obj.caseInsensitive = message.caseInsensitive;
        }
        return obj;
    },
    create(base) {
        return AutomodRegexInput.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAutomodRegexInput();
        message.pattern = object.pattern ?? "";
        message.input = object.input ?? "";
        message.caseInsensitive = object.caseInsensitive ?? false;
        return message;
    },
};
messageTypeRegistry.set(AutomodRegexInput.$type, AutomodRegexInput);
function createBaseAutomodRegexMatchOutput() {
    return { groups: [] };
}
export const AutomodRegexMatchOutput = {
    $type: "devvit.plugin.automodregex.AutomodRegexMatchOutput",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.groups) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAutomodRegexMatchOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.groups.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            groups: globalThis.Array.isArray(object?.groups) ? object.groups.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.groups?.length) {
            obj.groups = message.groups;
        }
        return obj;
    },
    create(base) {
        return AutomodRegexMatchOutput.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAutomodRegexMatchOutput();
        message.groups = object.groups?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set(AutomodRegexMatchOutput.$type, AutomodRegexMatchOutput);
function createBaseAutomodRegexTestOutput() {
    return { match: false };
}
export const AutomodRegexTestOutput = {
    $type: "devvit.plugin.automodregex.AutomodRegexTestOutput",
    encode(message, writer = _m0.Writer.create()) {
        if (message.match !== false) {
            writer.uint32(8).bool(message.match);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAutomodRegexTestOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.match = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { match: isSet(object.match) ? globalThis.Boolean(object.match) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.match !== false) {
            obj.match = message.match;
        }
        return obj;
    },
    create(base) {
        return AutomodRegexTestOutput.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAutomodRegexTestOutput();
        message.match = object.match ?? false;
        return message;
    },
};
messageTypeRegistry.set(AutomodRegexTestOutput.$type, AutomodRegexTestOutput);
export const AutomodRegexServiceName = "devvit.plugin.automodregex.AutomodRegex";
export class AutomodRegexClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || AutomodRegexServiceName;
        this.rpc = rpc;
        this.AutomodRegexMatch = this.AutomodRegexMatch.bind(this);
        this.AutomodRegexTest = this.AutomodRegexTest.bind(this);
    }
    AutomodRegexMatch(request, metadata) {
        const data = AutomodRegexInput.encode(request).finish();
        const promise = this.rpc.request(this.service, "AutomodRegexMatch", data, metadata);
        return promise.then((data) => AutomodRegexMatchOutput.decode(_m0.Reader.create(data)));
    }
    AutomodRegexTest(request, metadata) {
        const data = AutomodRegexInput.encode(request).finish();
        const promise = this.rpc.request(this.service, "AutomodRegexTest", data, metadata);
        return promise.then((data) => AutomodRegexTestOutput.decode(_m0.Reader.create(data)));
    }
}
export const AutomodRegexDefinition = {
    name: "AutomodRegex",
    fullName: "devvit.plugin.automodregex.AutomodRegex",
    methods: {
        automodRegexMatch: {
            name: "AutomodRegexMatch",
            requestType: AutomodRegexInput,
            requestStream: false,
            responseType: AutomodRegexMatchOutput,
            responseStream: false,
            options: {},
        },
        automodRegexTest: {
            name: "AutomodRegexTest",
            requestType: AutomodRegexInput,
            requestStream: false,
            responseType: AutomodRegexTestOutput,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
