/**
 * #listings_svc.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Listing } from '../common/common_msg.js';
import { GetBestRequest, GetByIdRequest, GetCommentsRequest, GetDuplicatesRequest, GetHotRequest, GetNewRequest, GetRisingRequest, GetSortRequest, ListingResponse, } from './listings_msg.js';
export const ListingsServiceName = "devvit.plugin.redditapi.listings.Listings";
export class ListingsClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || ListingsServiceName;
        this.rpc = rpc;
        this.Best = this.Best.bind(this);
        this.ById = this.ById.bind(this);
        this.Comments = this.Comments.bind(this);
        this.Duplicates = this.Duplicates.bind(this);
        this.Hot = this.Hot.bind(this);
        this.New = this.New.bind(this);
        this.Rising = this.Rising.bind(this);
        this.Sort = this.Sort.bind(this);
    }
    Best(request, metadata) {
        const data = GetBestRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Best", data, metadata);
        return promise.then((data) => Listing.decode(_m0.Reader.create(data)));
    }
    ById(request, metadata) {
        const data = GetByIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ById", data, metadata);
        return promise.then((data) => Listing.decode(_m0.Reader.create(data)));
    }
    Comments(request, metadata) {
        const data = GetCommentsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Comments", data, metadata);
        return promise.then((data) => ListingResponse.decode(_m0.Reader.create(data)));
    }
    Duplicates(request, metadata) {
        const data = GetDuplicatesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Duplicates", data, metadata);
        return promise.then((data) => ListingResponse.decode(_m0.Reader.create(data)));
    }
    Hot(request, metadata) {
        const data = GetHotRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Hot", data, metadata);
        return promise.then((data) => Listing.decode(_m0.Reader.create(data)));
    }
    New(request, metadata) {
        const data = GetNewRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "New", data, metadata);
        return promise.then((data) => Listing.decode(_m0.Reader.create(data)));
    }
    Rising(request, metadata) {
        const data = GetRisingRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Rising", data, metadata);
        return promise.then((data) => Listing.decode(_m0.Reader.create(data)));
    }
    Sort(request, metadata) {
        const data = GetSortRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Sort", data, metadata);
        return promise.then((data) => Listing.decode(_m0.Reader.create(data)));
    }
}
export const ListingsDefinition = {
    name: "Listings",
    fullName: "devvit.plugin.redditapi.listings.Listings",
    methods: {
        /**
         * Home listing
         *
         * @see {@link https://www.reddit.com/dev/api#GET_best}
         */
        best: {
            name: "Best",
            requestType: GetBestRequest,
            requestStream: false,
            responseType: Listing,
            responseStream: false,
            options: {},
        },
        /**
         * Create a custom listing with the Post IDs provided
         *
         * @see {@link https://www.reddit.com/dev/api#GET_by_id_\{names\}}
         */
        byId: {
            name: "ById",
            requestType: GetByIdRequest,
            requestStream: false,
            responseType: Listing,
            responseStream: false,
            options: {},
        },
        /**
         * Get a comment tree for a Post
         *
         * @see {@link https://www.reddit.com/dev/api#GET_comments_\{article\}}
         */
        comments: {
            name: "Comments",
            requestType: GetCommentsRequest,
            requestStream: false,
            responseType: ListingResponse,
            responseStream: false,
            options: {},
        },
        /**
         * Find duplicate posts that reference the same URL as this Post
         *
         * @see {@link https://www.reddit.com/dev/api#GET_duplicates_\{article\}}
         */
        duplicates: {
            name: "Duplicates",
            requestType: GetDuplicatesRequest,
            requestStream: false,
            responseType: ListingResponse,
            responseStream: false,
            options: {},
        },
        /**
         * Listing with Hot sort
         *
         * @see {@link https://www.reddit.com/dev/api#GET_hot}
         */
        hot: {
            name: "Hot",
            requestType: GetHotRequest,
            requestStream: false,
            responseType: Listing,
            responseStream: false,
            options: {},
        },
        /**
         * Listing with New sort
         *
         * @see {@link https://www.reddit.com/dev/api#GET_new}
         */
        new: {
            name: "New",
            requestType: GetNewRequest,
            requestStream: false,
            responseType: Listing,
            responseStream: false,
            options: {},
        },
        /**
         * Listing with Rising sort
         *
         * @see {@link https://www.reddit.com/dev/api#GET_rising}
         */
        rising: {
            name: "Rising",
            requestType: GetRisingRequest,
            requestStream: false,
            responseType: Listing,
            responseStream: false,
            options: {},
        },
        /**
         * Listing with Top or Controversial sort
         *
         * @see {@link https://www.reddit.com/dev/api#GET_\{sort\}}
         */
        sort: {
            name: "Sort",
            requestType: GetSortRequest,
            requestStream: false,
            responseType: Listing,
            responseStream: false,
            options: {},
        },
    },
};
