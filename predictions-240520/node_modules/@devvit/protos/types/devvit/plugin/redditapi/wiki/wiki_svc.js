/**
 * #wiki_svc.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { AllowEditorRequest, EditWikiPageRequest, GetWikiPageRequest, GetWikiPageResponse, GetWikiPageRevisionsRequest, GetWikiPageSettingsRequest, GetWikiPagesRequest, GetWikiPagesResponse, GetWikiRevisionsRequest, HideWikiPageRevisionRequest, HideWikiPageRevisionResponse, RevertWikiPageRequest, UpdateWikiPageSettingsRequest, WikiPageRevisionListing, WikiPageSettings, } from './wiki_msg.js';
export const WikiServiceName = "devvit.plugin.redditapi.wiki.Wiki";
export class WikiClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || WikiServiceName;
        this.rpc = rpc;
        this.GetWikiPages = this.GetWikiPages.bind(this);
        this.GetWikiPage = this.GetWikiPage.bind(this);
        this.EditWikiPage = this.EditWikiPage.bind(this);
        this.HideWikiPageRevision = this.HideWikiPageRevision.bind(this);
        this.GetWikiPageRevisions = this.GetWikiPageRevisions.bind(this);
        this.GetWikiRevisions = this.GetWikiRevisions.bind(this);
        this.RevertWikiPage = this.RevertWikiPage.bind(this);
        this.GetWikiPageSettings = this.GetWikiPageSettings.bind(this);
        this.UpdateWikiPageSettings = this.UpdateWikiPageSettings.bind(this);
        this.AllowEditor = this.AllowEditor.bind(this);
    }
    GetWikiPages(request, metadata) {
        const data = GetWikiPagesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetWikiPages", data, metadata);
        return promise.then((data) => GetWikiPagesResponse.decode(_m0.Reader.create(data)));
    }
    GetWikiPage(request, metadata) {
        const data = GetWikiPageRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetWikiPage", data, metadata);
        return promise.then((data) => GetWikiPageResponse.decode(_m0.Reader.create(data)));
    }
    EditWikiPage(request, metadata) {
        const data = EditWikiPageRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "EditWikiPage", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    HideWikiPageRevision(request, metadata) {
        const data = HideWikiPageRevisionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "HideWikiPageRevision", data, metadata);
        return promise.then((data) => HideWikiPageRevisionResponse.decode(_m0.Reader.create(data)));
    }
    GetWikiPageRevisions(request, metadata) {
        const data = GetWikiPageRevisionsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetWikiPageRevisions", data, metadata);
        return promise.then((data) => WikiPageRevisionListing.decode(_m0.Reader.create(data)));
    }
    GetWikiRevisions(request, metadata) {
        const data = GetWikiRevisionsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetWikiRevisions", data, metadata);
        return promise.then((data) => WikiPageRevisionListing.decode(_m0.Reader.create(data)));
    }
    RevertWikiPage(request, metadata) {
        const data = RevertWikiPageRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RevertWikiPage", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    GetWikiPageSettings(request, metadata) {
        const data = GetWikiPageSettingsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetWikiPageSettings", data, metadata);
        return promise.then((data) => WikiPageSettings.decode(_m0.Reader.create(data)));
    }
    UpdateWikiPageSettings(request, metadata) {
        const data = UpdateWikiPageSettingsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateWikiPageSettings", data, metadata);
        return promise.then((data) => WikiPageSettings.decode(_m0.Reader.create(data)));
    }
    AllowEditor(request, metadata) {
        const data = AllowEditorRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AllowEditor", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
}
export const WikiDefinition = {
    name: "Wiki",
    fullName: "devvit.plugin.redditapi.wiki.Wiki",
    methods: {
        /**
         * Get a list of wiki pages for a subreddit
         *
         * @see {@link https://www.reddit.com/dev/api#GET_wiki_pages}
         */
        getWikiPages: {
            name: "GetWikiPages",
            requestType: GetWikiPagesRequest,
            requestStream: false,
            responseType: GetWikiPagesResponse,
            responseStream: false,
            options: {},
        },
        /**
         * Get a wiki page
         *
         * @see {@link https://www.reddit.com/dev/api#GET_wiki_\{page\}}
         */
        getWikiPage: {
            name: "GetWikiPage",
            requestType: GetWikiPageRequest,
            requestStream: false,
            responseType: GetWikiPageResponse,
            responseStream: false,
            options: {},
        },
        /**
         * Edit wiki page
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_wiki_edit}
         */
        editWikiPage: {
            name: "EditWikiPage",
            requestType: EditWikiPageRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /**
         * Hide a wiki page revision
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_wiki_hide}
         */
        hideWikiPageRevision: {
            name: "HideWikiPageRevision",
            requestType: HideWikiPageRevisionRequest,
            requestStream: false,
            responseType: HideWikiPageRevisionResponse,
            responseStream: false,
            options: {},
        },
        /**
         * Get a list of revisions of a wiki page
         *
         * @see {@link https://www.reddit.com/dev/api#GET_wiki_revisions_\{page\}}
         */
        getWikiPageRevisions: {
            name: "GetWikiPageRevisions",
            requestType: GetWikiPageRevisionsRequest,
            requestStream: false,
            responseType: WikiPageRevisionListing,
            responseStream: false,
            options: {},
        },
        /**
         * Retrieve a list of recently changed wiki pages in this subreddit
         *
         * @see {@link https://www.reddit.com/dev/api#GET_wiki_revisions}
         */
        getWikiRevisions: {
            name: "GetWikiRevisions",
            requestType: GetWikiRevisionsRequest,
            requestStream: false,
            responseType: WikiPageRevisionListing,
            responseStream: false,
            options: {},
        },
        /**
         * Revert a wiki page to revision
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_wiki_revert}
         */
        revertWikiPage: {
            name: "RevertWikiPage",
            requestType: RevertWikiPageRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /**
         * Retrieve the current permission settings for page
         *
         * @see {@link https://www.reddit.com/dev/api#GET_wiki_settings_\{page\}}
         */
        getWikiPageSettings: {
            name: "GetWikiPageSettings",
            requestType: GetWikiPageSettingsRequest,
            requestStream: false,
            responseType: WikiPageSettings,
            responseStream: false,
            options: {},
        },
        /**
         * Update the permissions and visibility of wiki page
         *
         * @see {@link https://www.reddit.com/dev/api#POST_wiki_settings_\{page\}}
         */
        updateWikiPageSettings: {
            name: "UpdateWikiPageSettings",
            requestType: UpdateWikiPageSettingsRequest,
            requestStream: false,
            responseType: WikiPageSettings,
            responseStream: false,
            options: {},
        },
        /**
         * Allow/deny username to edit this wiki page
         * Note act must be either "add" or "del"
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_wiki_alloweditor_\{act\}}
         */
        allowEditor: {
            name: "AllowEditor",
            requestType: AllowEditorRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
    },
};
