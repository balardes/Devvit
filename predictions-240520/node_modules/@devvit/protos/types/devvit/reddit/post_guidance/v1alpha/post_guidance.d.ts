/**
 * #post_guidance.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { Metadata } from "../../../../../lib/Types.js";
export declare enum DiscussionType {
    NULL_VALUE = 0,
    CHAT = 1,
    UNRECOGNIZED = -1
}
export declare function discussionTypeFromJSON(object: any): DiscussionType;
export declare function discussionTypeToJSON(object: DiscussionType): number;
export declare enum PostType {
    UNKNOWN = 0,
    LINK = 1,
    TEXT = 2,
    LINK_TEXT = 3,
    MEDIA_UPLOAD = 4,
    POLL = 5,
    CROSSPOST = 6,
    GALLERY = 7,
    IMAGE = 9,
    VIDEO = 10,
    UNRECOGNIZED = -1
}
export declare function postTypeFromJSON(object: any): PostType;
export declare function postTypeToJSON(object: PostType): number;
export declare enum MediaType {
    MEDIA_UNKNOWN = 0,
    MEDIA_IMAGE = 1,
    MEDIA_VIDEO = 2,
    MEDIA_VIDEOGIF = 3,
    MEDIA_STREAMING = 4,
    UNRECOGNIZED = -1
}
export declare function mediaTypeFromJSON(object: any): MediaType;
export declare function mediaTypeToJSON(object: MediaType): number;
export interface PostContent {
    url?: string | undefined;
    body?: string | undefined;
    isRtjson?: boolean | undefined;
    crosspostLinkId?: string | undefined;
    mediaType: MediaType;
    isUserUpload?: boolean | undefined;
    galleryItems: GalleryItem[];
}
export interface PostMetadata {
    title?: string | undefined;
    subredditId?: string | undefined;
    userId?: string | undefined;
    postType: PostType;
    isLocked?: boolean | undefined;
    isNsfw?: boolean | undefined;
    isOriginalContent?: boolean | undefined;
    isReceivingReplies?: boolean | undefined;
    isSpoiler?: boolean | undefined;
    isUnlisted?: boolean | undefined;
    flairId?: string | undefined;
    flairText?: string | undefined;
    eventStart?: number | undefined;
    eventEnd?: number | undefined;
    discussionType: DiscussionType;
    collectionId?: string | undefined;
    ip?: string | undefined;
    isPromoted?: boolean | undefined;
}
export interface GalleryItem {
    id?: string | undefined;
    mediaId?: string | undefined;
    caption?: string | undefined;
    outboundUrl?: string | undefined;
    isDeleted?: boolean | undefined;
    callToAction?: string | undefined;
    displayUrl?: string | undefined;
    product?: Product | undefined;
}
export interface Product {
    title?: string | undefined;
    price?: string | undefined;
    description?: string | undefined;
}
export interface ValidatePostRequirementsRequest {
    postContent?: PostContent | undefined;
    postMetadata?: PostMetadata | undefined;
}
export interface ValidationError {
    reason?: string | undefined;
    field?: string | undefined;
    shortName?: string | undefined;
}
export interface ValidatePostRequirementsResponse {
    errors: ValidationError[];
}
export declare const PostContent: {
    $type: "devvit.reddit.post_guidance.v1alpha.PostContent";
    encode(message: PostContent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostContent;
    fromJSON(object: any): PostContent;
    toJSON(message: PostContent): unknown;
    create(base?: DeepPartial<PostContent>): PostContent;
    fromPartial(object: DeepPartial<PostContent>): PostContent;
};
export declare const PostMetadata: {
    $type: "devvit.reddit.post_guidance.v1alpha.PostMetadata";
    encode(message: PostMetadata, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostMetadata;
    fromJSON(object: any): PostMetadata;
    toJSON(message: PostMetadata): unknown;
    create(base?: DeepPartial<PostMetadata>): PostMetadata;
    fromPartial(object: DeepPartial<PostMetadata>): PostMetadata;
};
export declare const GalleryItem: {
    $type: "devvit.reddit.post_guidance.v1alpha.GalleryItem";
    encode(message: GalleryItem, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GalleryItem;
    fromJSON(object: any): GalleryItem;
    toJSON(message: GalleryItem): unknown;
    create(base?: DeepPartial<GalleryItem>): GalleryItem;
    fromPartial(object: DeepPartial<GalleryItem>): GalleryItem;
};
export declare const Product: {
    $type: "devvit.reddit.post_guidance.v1alpha.Product";
    encode(message: Product, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Product;
    fromJSON(object: any): Product;
    toJSON(message: Product): unknown;
    create(base?: DeepPartial<Product>): Product;
    fromPartial(object: DeepPartial<Product>): Product;
};
export declare const ValidatePostRequirementsRequest: {
    $type: "devvit.reddit.post_guidance.v1alpha.ValidatePostRequirementsRequest";
    encode(message: ValidatePostRequirementsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ValidatePostRequirementsRequest;
    fromJSON(object: any): ValidatePostRequirementsRequest;
    toJSON(message: ValidatePostRequirementsRequest): unknown;
    create(base?: DeepPartial<ValidatePostRequirementsRequest>): ValidatePostRequirementsRequest;
    fromPartial(object: DeepPartial<ValidatePostRequirementsRequest>): ValidatePostRequirementsRequest;
};
export declare const ValidationError: {
    $type: "devvit.reddit.post_guidance.v1alpha.ValidationError";
    encode(message: ValidationError, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ValidationError;
    fromJSON(object: any): ValidationError;
    toJSON(message: ValidationError): unknown;
    create(base?: DeepPartial<ValidationError>): ValidationError;
    fromPartial(object: DeepPartial<ValidationError>): ValidationError;
};
export declare const ValidatePostRequirementsResponse: {
    $type: "devvit.reddit.post_guidance.v1alpha.ValidatePostRequirementsResponse";
    encode(message: ValidatePostRequirementsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ValidatePostRequirementsResponse;
    fromJSON(object: any): ValidatePostRequirementsResponse;
    toJSON(message: ValidatePostRequirementsResponse): unknown;
    create(base?: DeepPartial<ValidatePostRequirementsResponse>): ValidatePostRequirementsResponse;
    fromPartial(object: DeepPartial<ValidatePostRequirementsResponse>): ValidatePostRequirementsResponse;
};
export interface PostGuidance {
    GetPostGuidance(request: ValidatePostRequirementsRequest, metadata?: Metadata): Promise<ValidatePostRequirementsResponse>;
}
export declare const PostGuidanceServiceName = "devvit.reddit.post_guidance.v1alpha.PostGuidance";
export declare class PostGuidanceClientImpl implements PostGuidance {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetPostGuidance(request: ValidatePostRequirementsRequest, metadata?: Metadata): Promise<ValidatePostRequirementsResponse>;
}
export type PostGuidanceDefinition = typeof PostGuidanceDefinition;
export declare const PostGuidanceDefinition: {
    readonly name: "PostGuidance";
    readonly fullName: "devvit.reddit.post_guidance.v1alpha.PostGuidance";
    readonly methods: {
        readonly getPostGuidance: {
            readonly name: "GetPostGuidance";
            readonly requestType: {
                $type: "devvit.reddit.post_guidance.v1alpha.ValidatePostRequirementsRequest";
                encode(message: ValidatePostRequirementsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ValidatePostRequirementsRequest;
                fromJSON(object: any): ValidatePostRequirementsRequest;
                toJSON(message: ValidatePostRequirementsRequest): unknown;
                create(base?: DeepPartial<ValidatePostRequirementsRequest>): ValidatePostRequirementsRequest;
                fromPartial(object: DeepPartial<ValidatePostRequirementsRequest>): ValidatePostRequirementsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.reddit.post_guidance.v1alpha.ValidatePostRequirementsResponse";
                encode(message: ValidatePostRequirementsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ValidatePostRequirementsResponse;
                fromJSON(object: any): ValidatePostRequirementsResponse;
                toJSON(message: ValidatePostRequirementsResponse): unknown;
                create(base?: DeepPartial<ValidatePostRequirementsResponse>): ValidatePostRequirementsResponse;
                fromPartial(object: DeepPartial<ValidatePostRequirementsResponse>): ValidatePostRequirementsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=post_guidance.d.ts.map