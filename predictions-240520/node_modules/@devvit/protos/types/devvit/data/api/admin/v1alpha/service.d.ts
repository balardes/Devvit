/**
 * #service.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { Metadata } from "../../../../../../lib/Types.js";
import { CreateAuditLogEventRequest, CreateAuditLogEventResponse, GetAuditLogEventsByOrganizationNameRequest, GetAuditLogEventsByOrganizationNameResponse } from './audit.js';
import { CreateAccessTokenRequest, CreateAccessTokenResponse, GetAccessTokenByIdRequest, GetAccessTokenByIdResponse, GetAccessTokensByOrganizationNameRequest, GetAccessTokensByOrganizationNameResponse, RevokeAccessTokenByIdRequest, RevokeAccessTokenByIdResponse } from './auth.js';
import { CreateOrganizationRequest, CreateOrganizationResponse, GetOrganizationByNameRequest, GetOrganizationByNameResponse, GetOrganizationsRequest, GetOrganizationsResponse } from './organization.js';
import { CreateSubscriptionRequest, CreateSubscriptionResponse, DeleteSubscriptionRequest, DeleteSubscriptionResponse, GetSubscriptionByIdRequest, GetSubscriptionByIdResponse, GetSubscriptionsByOrganizationNameRequest, GetSubscriptionsByOrganizationNameResponse, UpdateSubscriptionRequest, UpdateSubscriptionResponse } from './subscription.js';
export interface Admin {
    /** Auth */
    CreateAccessToken(request: CreateAccessTokenRequest, metadata?: Metadata): Promise<CreateAccessTokenResponse>;
    GetAccessTokenById(request: GetAccessTokenByIdRequest, metadata?: Metadata): Promise<GetAccessTokenByIdResponse>;
    GetAccessTokensByOrganizationName(request: GetAccessTokensByOrganizationNameRequest, metadata?: Metadata): Promise<GetAccessTokensByOrganizationNameResponse>;
    RevokeAccessTokenById(request: RevokeAccessTokenByIdRequest, metadata?: Metadata): Promise<RevokeAccessTokenByIdResponse>;
    /** Subscriptions */
    CreateSubscription(request: CreateSubscriptionRequest, metadata?: Metadata): Promise<CreateSubscriptionResponse>;
    GetSubscriptionById(request: GetSubscriptionByIdRequest, metadata?: Metadata): Promise<GetSubscriptionByIdResponse>;
    GetSubscriptionsByOrganizationName(request: GetSubscriptionsByOrganizationNameRequest, metadata?: Metadata): Promise<GetSubscriptionsByOrganizationNameResponse>;
    UpdateSubscription(request: UpdateSubscriptionRequest, metadata?: Metadata): Promise<UpdateSubscriptionResponse>;
    DeleteSubscription(request: DeleteSubscriptionRequest, metadata?: Metadata): Promise<DeleteSubscriptionResponse>;
    /** Organizations */
    CreateOrganization(request: CreateOrganizationRequest, metadata?: Metadata): Promise<CreateOrganizationResponse>;
    GetOrganizationByName(request: GetOrganizationByNameRequest, metadata?: Metadata): Promise<GetOrganizationByNameResponse>;
    GetOrganizations(request: GetOrganizationsRequest, metadata?: Metadata): Promise<GetOrganizationsResponse>;
    /** Audit Logs */
    GetAuditLogEventsByOrganizationName(request: GetAuditLogEventsByOrganizationNameRequest, metadata?: Metadata): Promise<GetAuditLogEventsByOrganizationNameResponse>;
    CreateAuditLogEvent(request: CreateAuditLogEventRequest, metadata?: Metadata): Promise<CreateAuditLogEventResponse>;
}
export declare const AdminServiceName = "devvit.data.api.admin.v1alpha.Admin";
export declare class AdminClientImpl implements Admin {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    CreateAccessToken(request: CreateAccessTokenRequest, metadata?: Metadata): Promise<CreateAccessTokenResponse>;
    GetAccessTokenById(request: GetAccessTokenByIdRequest, metadata?: Metadata): Promise<GetAccessTokenByIdResponse>;
    GetAccessTokensByOrganizationName(request: GetAccessTokensByOrganizationNameRequest, metadata?: Metadata): Promise<GetAccessTokensByOrganizationNameResponse>;
    RevokeAccessTokenById(request: RevokeAccessTokenByIdRequest, metadata?: Metadata): Promise<RevokeAccessTokenByIdResponse>;
    CreateSubscription(request: CreateSubscriptionRequest, metadata?: Metadata): Promise<CreateSubscriptionResponse>;
    GetSubscriptionById(request: GetSubscriptionByIdRequest, metadata?: Metadata): Promise<GetSubscriptionByIdResponse>;
    GetSubscriptionsByOrganizationName(request: GetSubscriptionsByOrganizationNameRequest, metadata?: Metadata): Promise<GetSubscriptionsByOrganizationNameResponse>;
    UpdateSubscription(request: UpdateSubscriptionRequest, metadata?: Metadata): Promise<UpdateSubscriptionResponse>;
    DeleteSubscription(request: DeleteSubscriptionRequest, metadata?: Metadata): Promise<DeleteSubscriptionResponse>;
    CreateOrganization(request: CreateOrganizationRequest, metadata?: Metadata): Promise<CreateOrganizationResponse>;
    GetOrganizationByName(request: GetOrganizationByNameRequest, metadata?: Metadata): Promise<GetOrganizationByNameResponse>;
    GetOrganizations(request: GetOrganizationsRequest, metadata?: Metadata): Promise<GetOrganizationsResponse>;
    GetAuditLogEventsByOrganizationName(request: GetAuditLogEventsByOrganizationNameRequest, metadata?: Metadata): Promise<GetAuditLogEventsByOrganizationNameResponse>;
    CreateAuditLogEvent(request: CreateAuditLogEventRequest, metadata?: Metadata): Promise<CreateAuditLogEventResponse>;
}
export type AdminDefinition = typeof AdminDefinition;
export declare const AdminDefinition: {
    readonly name: "Admin";
    readonly fullName: "devvit.data.api.admin.v1alpha.Admin";
    readonly methods: {
        /** Auth */
        readonly createAccessToken: {
            readonly name: "CreateAccessToken";
            readonly requestType: {
                $type: "devvit.data.api.admin.v1alpha.CreateAccessTokenRequest";
                encode(message: CreateAccessTokenRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CreateAccessTokenRequest;
                fromJSON(object: any): CreateAccessTokenRequest;
                toJSON(message: CreateAccessTokenRequest): unknown;
                create(base?: {
                    organizationId?: string;
                    expiresIn?: {
                        seconds?: number;
                        nanos?: number;
                    } | undefined;
                } | undefined): CreateAccessTokenRequest;
                fromPartial(object: {
                    organizationId?: string;
                    expiresIn?: {
                        seconds?: number;
                        nanos?: number;
                    } | undefined;
                }): CreateAccessTokenRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.data.api.admin.v1alpha.CreateAccessTokenResponse";
                encode(message: CreateAccessTokenResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CreateAccessTokenResponse;
                fromJSON(object: any): CreateAccessTokenResponse;
                toJSON(message: CreateAccessTokenResponse): unknown;
                create(base?: {
                    token?: string;
                    expiresAt?: Date | undefined;
                } | undefined): CreateAccessTokenResponse;
                fromPartial(object: {
                    token?: string;
                    expiresAt?: Date | undefined;
                }): CreateAccessTokenResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getAccessTokenById: {
            readonly name: "GetAccessTokenById";
            readonly requestType: {
                $type: "devvit.data.api.admin.v1alpha.GetAccessTokenByIdRequest";
                encode(message: GetAccessTokenByIdRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetAccessTokenByIdRequest;
                fromJSON(object: any): GetAccessTokenByIdRequest;
                toJSON(message: GetAccessTokenByIdRequest): unknown;
                create(base?: {
                    id?: string;
                } | undefined): GetAccessTokenByIdRequest;
                fromPartial(object: {
                    id?: string;
                }): GetAccessTokenByIdRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.data.api.admin.v1alpha.GetAccessTokenByIdResponse";
                encode(message: GetAccessTokenByIdResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetAccessTokenByIdResponse;
                fromJSON(object: any): GetAccessTokenByIdResponse;
                toJSON(message: GetAccessTokenByIdResponse): unknown;
                create(base?: {
                    token?: {
                        id?: string;
                        organizationId?: string;
                        createdAt?: Date | undefined;
                        expiresAt?: Date | undefined;
                        isRevoked?: boolean;
                    } | undefined;
                } | undefined): GetAccessTokenByIdResponse;
                fromPartial(object: {
                    token?: {
                        id?: string;
                        organizationId?: string;
                        createdAt?: Date | undefined;
                        expiresAt?: Date | undefined;
                        isRevoked?: boolean;
                    } | undefined;
                }): GetAccessTokenByIdResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getAccessTokensByOrganizationName: {
            readonly name: "GetAccessTokensByOrganizationName";
            readonly requestType: {
                $type: "devvit.data.api.admin.v1alpha.GetAccessTokensByOrganizationNameRequest";
                encode(message: GetAccessTokensByOrganizationNameRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetAccessTokensByOrganizationNameRequest;
                fromJSON(object: any): GetAccessTokensByOrganizationNameRequest;
                toJSON(message: GetAccessTokensByOrganizationNameRequest): unknown;
                create(base?: {
                    organizationName?: string;
                } | undefined): GetAccessTokensByOrganizationNameRequest;
                fromPartial(object: {
                    organizationName?: string;
                }): GetAccessTokensByOrganizationNameRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.data.api.admin.v1alpha.GetAccessTokensByOrganizationNameResponse";
                encode(message: GetAccessTokensByOrganizationNameResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetAccessTokensByOrganizationNameResponse;
                fromJSON(object: any): GetAccessTokensByOrganizationNameResponse;
                toJSON(message: GetAccessTokensByOrganizationNameResponse): unknown;
                create(base?: {
                    tokens?: {
                        id?: string;
                        organizationId?: string;
                        createdAt?: Date | undefined;
                        expiresAt?: Date | undefined;
                        isRevoked?: boolean;
                    }[];
                } | undefined): GetAccessTokensByOrganizationNameResponse;
                fromPartial(object: {
                    tokens?: {
                        id?: string;
                        organizationId?: string;
                        createdAt?: Date | undefined;
                        expiresAt?: Date | undefined;
                        isRevoked?: boolean;
                    }[];
                }): GetAccessTokensByOrganizationNameResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly revokeAccessTokenById: {
            readonly name: "RevokeAccessTokenById";
            readonly requestType: {
                $type: "devvit.data.api.admin.v1alpha.RevokeAccessTokenByIdRequest";
                encode(message: RevokeAccessTokenByIdRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RevokeAccessTokenByIdRequest;
                fromJSON(object: any): RevokeAccessTokenByIdRequest;
                toJSON(message: RevokeAccessTokenByIdRequest): unknown;
                create(base?: {
                    tokenId?: string;
                } | undefined): RevokeAccessTokenByIdRequest;
                fromPartial(object: {
                    tokenId?: string;
                }): RevokeAccessTokenByIdRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.data.api.admin.v1alpha.RevokeAccessTokenByIdResponse";
                encode(_: RevokeAccessTokenByIdResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RevokeAccessTokenByIdResponse;
                fromJSON(_: any): RevokeAccessTokenByIdResponse;
                toJSON(_: RevokeAccessTokenByIdResponse): unknown;
                create(base?: {} | undefined): RevokeAccessTokenByIdResponse;
                fromPartial(_: {}): RevokeAccessTokenByIdResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Subscriptions */
        readonly createSubscription: {
            readonly name: "CreateSubscription";
            readonly requestType: {
                $type: "devvit.data.api.admin.v1alpha.CreateSubscriptionRequest";
                encode(message: CreateSubscriptionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CreateSubscriptionRequest;
                fromJSON(object: any): CreateSubscriptionRequest;
                toJSON(message: CreateSubscriptionRequest): unknown;
                create(base?: {
                    events?: import("../../../../options/options.js").FirehoseEvent[];
                    subreddits?: string[];
                    subredditRatings?: import("../../../../reddit/v2alpha/subredditv2.js").SubredditRating[];
                    organizationId?: string;
                    name?: string;
                    description?: string;
                } | undefined): CreateSubscriptionRequest;
                fromPartial(object: {
                    events?: import("../../../../options/options.js").FirehoseEvent[];
                    subreddits?: string[];
                    subredditRatings?: import("../../../../reddit/v2alpha/subredditv2.js").SubredditRating[];
                    organizationId?: string;
                    name?: string;
                    description?: string;
                }): CreateSubscriptionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.data.api.admin.v1alpha.CreateSubscriptionResponse";
                encode(message: CreateSubscriptionResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CreateSubscriptionResponse;
                fromJSON(object: any): CreateSubscriptionResponse;
                toJSON(message: CreateSubscriptionResponse): unknown;
                create(base?: {
                    subscription?: {
                        id?: string;
                        name?: string;
                        organizationId?: string;
                        description?: string;
                        events?: import("../../../../options/options.js").FirehoseEvent[];
                        subreddits?: string[];
                        subredditRatings?: import("../../../../reddit/v2alpha/subredditv2.js").SubredditRating[];
                    } | undefined;
                } | undefined): CreateSubscriptionResponse;
                fromPartial(object: {
                    subscription?: {
                        id?: string;
                        name?: string;
                        organizationId?: string;
                        description?: string;
                        events?: import("../../../../options/options.js").FirehoseEvent[];
                        subreddits?: string[];
                        subredditRatings?: import("../../../../reddit/v2alpha/subredditv2.js").SubredditRating[];
                    } | undefined;
                }): CreateSubscriptionResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getSubscriptionById: {
            readonly name: "GetSubscriptionById";
            readonly requestType: {
                $type: "devvit.data.api.admin.v1alpha.GetSubscriptionByIdRequest";
                encode(message: GetSubscriptionByIdRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetSubscriptionByIdRequest;
                fromJSON(object: any): GetSubscriptionByIdRequest;
                toJSON(message: GetSubscriptionByIdRequest): unknown;
                create(base?: {
                    subscriptionId?: string;
                } | undefined): GetSubscriptionByIdRequest;
                fromPartial(object: {
                    subscriptionId?: string;
                }): GetSubscriptionByIdRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.data.api.admin.v1alpha.GetSubscriptionByIdResponse";
                encode(message: GetSubscriptionByIdResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetSubscriptionByIdResponse;
                fromJSON(object: any): GetSubscriptionByIdResponse;
                toJSON(message: GetSubscriptionByIdResponse): unknown;
                create(base?: {
                    subscription?: {
                        id?: string;
                        name?: string;
                        organizationId?: string;
                        description?: string;
                        events?: import("../../../../options/options.js").FirehoseEvent[];
                        subreddits?: string[];
                        subredditRatings?: import("../../../../reddit/v2alpha/subredditv2.js").SubredditRating[];
                    } | undefined;
                } | undefined): GetSubscriptionByIdResponse;
                fromPartial(object: {
                    subscription?: {
                        id?: string;
                        name?: string;
                        organizationId?: string;
                        description?: string;
                        events?: import("../../../../options/options.js").FirehoseEvent[];
                        subreddits?: string[];
                        subredditRatings?: import("../../../../reddit/v2alpha/subredditv2.js").SubredditRating[];
                    } | undefined;
                }): GetSubscriptionByIdResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getSubscriptionsByOrganizationName: {
            readonly name: "GetSubscriptionsByOrganizationName";
            readonly requestType: {
                $type: "devvit.data.api.admin.v1alpha.GetSubscriptionsByOrganizationNameRequest";
                encode(message: GetSubscriptionsByOrganizationNameRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetSubscriptionsByOrganizationNameRequest;
                fromJSON(object: any): GetSubscriptionsByOrganizationNameRequest;
                toJSON(message: GetSubscriptionsByOrganizationNameRequest): unknown;
                create(base?: {
                    organizationName?: string;
                } | undefined): GetSubscriptionsByOrganizationNameRequest;
                fromPartial(object: {
                    organizationName?: string;
                }): GetSubscriptionsByOrganizationNameRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.data.api.admin.v1alpha.GetSubscriptionsByOrganizationNameResponse";
                encode(message: GetSubscriptionsByOrganizationNameResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetSubscriptionsByOrganizationNameResponse;
                fromJSON(object: any): GetSubscriptionsByOrganizationNameResponse;
                toJSON(message: GetSubscriptionsByOrganizationNameResponse): unknown;
                create(base?: {
                    subscriptions?: {
                        id?: string;
                        name?: string;
                        organizationId?: string;
                        description?: string;
                        events?: import("../../../../options/options.js").FirehoseEvent[];
                        subreddits?: string[];
                        subredditRatings?: import("../../../../reddit/v2alpha/subredditv2.js").SubredditRating[];
                    }[];
                } | undefined): GetSubscriptionsByOrganizationNameResponse;
                fromPartial(object: {
                    subscriptions?: {
                        id?: string;
                        name?: string;
                        organizationId?: string;
                        description?: string;
                        events?: import("../../../../options/options.js").FirehoseEvent[];
                        subreddits?: string[];
                        subredditRatings?: import("../../../../reddit/v2alpha/subredditv2.js").SubredditRating[];
                    }[];
                }): GetSubscriptionsByOrganizationNameResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly updateSubscription: {
            readonly name: "UpdateSubscription";
            readonly requestType: {
                $type: "devvit.data.api.admin.v1alpha.UpdateSubscriptionRequest";
                encode(message: UpdateSubscriptionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateSubscriptionRequest;
                fromJSON(object: any): UpdateSubscriptionRequest;
                toJSON(message: UpdateSubscriptionRequest): unknown;
                create(base?: {
                    subscriptionId?: string;
                    name?: string | undefined;
                    description?: string | undefined;
                    events?: import("../../../../options/options.js").FirehoseEvent[];
                    subreddits?: string[];
                    subredditRatings?: import("../../../../reddit/v2alpha/subredditv2.js").SubredditRating[];
                } | undefined): UpdateSubscriptionRequest;
                fromPartial(object: {
                    subscriptionId?: string;
                    name?: string | undefined;
                    description?: string | undefined;
                    events?: import("../../../../options/options.js").FirehoseEvent[];
                    subreddits?: string[];
                    subredditRatings?: import("../../../../reddit/v2alpha/subredditv2.js").SubredditRating[];
                }): UpdateSubscriptionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.data.api.admin.v1alpha.UpdateSubscriptionResponse";
                encode(message: UpdateSubscriptionResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateSubscriptionResponse;
                fromJSON(object: any): UpdateSubscriptionResponse;
                toJSON(message: UpdateSubscriptionResponse): unknown;
                create(base?: {
                    subscription?: {
                        id?: string;
                        name?: string;
                        organizationId?: string;
                        description?: string;
                        events?: import("../../../../options/options.js").FirehoseEvent[];
                        subreddits?: string[];
                        subredditRatings?: import("../../../../reddit/v2alpha/subredditv2.js").SubredditRating[];
                    } | undefined;
                } | undefined): UpdateSubscriptionResponse;
                fromPartial(object: {
                    subscription?: {
                        id?: string;
                        name?: string;
                        organizationId?: string;
                        description?: string;
                        events?: import("../../../../options/options.js").FirehoseEvent[];
                        subreddits?: string[];
                        subredditRatings?: import("../../../../reddit/v2alpha/subredditv2.js").SubredditRating[];
                    } | undefined;
                }): UpdateSubscriptionResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly deleteSubscription: {
            readonly name: "DeleteSubscription";
            readonly requestType: {
                $type: "devvit.data.api.admin.v1alpha.DeleteSubscriptionRequest";
                encode(message: DeleteSubscriptionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DeleteSubscriptionRequest;
                fromJSON(object: any): DeleteSubscriptionRequest;
                toJSON(message: DeleteSubscriptionRequest): unknown;
                create(base?: {
                    subscriptionId?: string;
                } | undefined): DeleteSubscriptionRequest;
                fromPartial(object: {
                    subscriptionId?: string;
                }): DeleteSubscriptionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.data.api.admin.v1alpha.DeleteSubscriptionResponse";
                encode(_: DeleteSubscriptionResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DeleteSubscriptionResponse;
                fromJSON(_: any): DeleteSubscriptionResponse;
                toJSON(_: DeleteSubscriptionResponse): unknown;
                create(base?: {} | undefined): DeleteSubscriptionResponse;
                fromPartial(_: {}): DeleteSubscriptionResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Organizations */
        readonly createOrganization: {
            readonly name: "CreateOrganization";
            readonly requestType: {
                $type: "devvit.data.api.admin.v1alpha.CreateOrganizationRequest";
                encode(message: CreateOrganizationRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CreateOrganizationRequest;
                fromJSON(object: any): CreateOrganizationRequest;
                toJSON(message: CreateOrganizationRequest): unknown;
                create(base?: {
                    name?: string;
                    isInternal?: boolean;
                } | undefined): CreateOrganizationRequest;
                fromPartial(object: {
                    name?: string;
                    isInternal?: boolean;
                }): CreateOrganizationRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.data.api.admin.v1alpha.CreateOrganizationResponse";
                encode(message: CreateOrganizationResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CreateOrganizationResponse;
                fromJSON(object: any): CreateOrganizationResponse;
                toJSON(message: CreateOrganizationResponse): unknown;
                create(base?: {
                    organization?: {
                        id?: string;
                        name?: string;
                        isInternal?: boolean;
                    } | undefined;
                } | undefined): CreateOrganizationResponse;
                fromPartial(object: {
                    organization?: {
                        id?: string;
                        name?: string;
                        isInternal?: boolean;
                    } | undefined;
                }): CreateOrganizationResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getOrganizationByName: {
            readonly name: "GetOrganizationByName";
            readonly requestType: {
                $type: "devvit.data.api.admin.v1alpha.GetOrganizationByNameRequest";
                encode(message: GetOrganizationByNameRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetOrganizationByNameRequest;
                fromJSON(object: any): GetOrganizationByNameRequest;
                toJSON(message: GetOrganizationByNameRequest): unknown;
                create(base?: {
                    name?: string;
                } | undefined): GetOrganizationByNameRequest;
                fromPartial(object: {
                    name?: string;
                }): GetOrganizationByNameRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.data.api.admin.v1alpha.GetOrganizationByNameResponse";
                encode(message: GetOrganizationByNameResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetOrganizationByNameResponse;
                fromJSON(object: any): GetOrganizationByNameResponse;
                toJSON(message: GetOrganizationByNameResponse): unknown; /** Subscriptions */
                create(base?: {
                    organization?: {
                        id?: string;
                        name?: string;
                        isInternal?: boolean;
                    } | undefined;
                } | undefined): GetOrganizationByNameResponse;
                fromPartial(object: {
                    organization?: {
                        id?: string;
                        name?: string;
                        isInternal?: boolean;
                    } | undefined;
                }): GetOrganizationByNameResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getOrganizations: {
            readonly name: "GetOrganizations";
            readonly requestType: {
                $type: "devvit.data.api.admin.v1alpha.GetOrganizationsRequest";
                encode(_: GetOrganizationsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetOrganizationsRequest;
                fromJSON(_: any): GetOrganizationsRequest;
                toJSON(_: GetOrganizationsRequest): unknown;
                create(base?: {} | undefined): GetOrganizationsRequest;
                fromPartial(_: {}): GetOrganizationsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.data.api.admin.v1alpha.GetOrganizationsResponse";
                encode(message: GetOrganizationsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetOrganizationsResponse;
                fromJSON(object: any): GetOrganizationsResponse;
                toJSON(message: GetOrganizationsResponse): unknown;
                create(base?: {
                    organizations?: {
                        id?: string;
                        name?: string;
                        isInternal?: boolean;
                    }[];
                } | undefined): GetOrganizationsResponse;
                fromPartial(object: {
                    organizations?: {
                        id?: string;
                        name?: string;
                        isInternal?: boolean;
                    }[];
                }): GetOrganizationsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Audit Logs */
        readonly getAuditLogEventsByOrganizationName: {
            readonly name: "GetAuditLogEventsByOrganizationName";
            readonly requestType: {
                $type: "devvit.data.api.admin.v1alpha.GetAuditLogEventsByOrganizationNameRequest";
                encode(message: GetAuditLogEventsByOrganizationNameRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetAuditLogEventsByOrganizationNameRequest;
                fromJSON(object: any): GetAuditLogEventsByOrganizationNameRequest;
                toJSON(message: GetAuditLogEventsByOrganizationNameRequest): unknown;
                create(base?: {
                    organizationName?: string;
                } | undefined): GetAuditLogEventsByOrganizationNameRequest;
                fromPartial(object: {
                    organizationName?: string;
                }): GetAuditLogEventsByOrganizationNameRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.data.api.admin.v1alpha.GetAuditLogEventsByOrganizationNameResponse";
                encode(message: GetAuditLogEventsByOrganizationNameResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetAuditLogEventsByOrganizationNameResponse;
                fromJSON(object: any): GetAuditLogEventsByOrganizationNameResponse;
                toJSON(message: GetAuditLogEventsByOrganizationNameResponse): unknown;
                create(base?: {
                    events?: {
                        id?: string;
                        createdAt?: Date | undefined;
                        userId?: string;
                        type?: import("./audit.js").AuditLogEventType;
                        organizationId?: string;
                        dataTokenCreatePayload?: {
                            tokenId?: string;
                            expiration?: Date | undefined;
                        } | undefined;
                        dataTokenRevokePayload?: {
                            tokenId?: string;
                        } | undefined;
                        dataSubscriptionCreatePayload?: {
                            subscriptionId?: string;
                        } | undefined;
                        dataSubscriptionUpdatePayload?: {
                            subscriptionId?: string;
                        } | undefined;
                        dataSubscriptionDeletePayload?: {
                            subscriptionId?: string;
                        } | undefined;
                    }[];
                } | undefined): GetAuditLogEventsByOrganizationNameResponse;
                fromPartial(object: {
                    events?: {
                        id?: string;
                        createdAt?: Date | undefined;
                        userId?: string;
                        type?: import("./audit.js").AuditLogEventType;
                        organizationId?: string;
                        dataTokenCreatePayload?: {
                            tokenId?: string;
                            expiration?: Date | undefined;
                        } | undefined;
                        dataTokenRevokePayload?: {
                            tokenId?: string;
                        } | undefined;
                        dataSubscriptionCreatePayload?: {
                            subscriptionId?: string;
                        } | undefined;
                        dataSubscriptionUpdatePayload?: {
                            subscriptionId?: string;
                        } | undefined;
                        dataSubscriptionDeletePayload?: {
                            subscriptionId?: string;
                        } | undefined;
                    }[];
                }): GetAuditLogEventsByOrganizationNameResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly createAuditLogEvent: {
            readonly name: "CreateAuditLogEvent";
            readonly requestType: {
                $type: "devvit.data.api.admin.v1alpha.CreateAuditLogEventRequest";
                encode(message: CreateAuditLogEventRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CreateAuditLogEventRequest;
                fromJSON(object: any): CreateAuditLogEventRequest;
                toJSON(message: CreateAuditLogEventRequest): unknown;
                create(base?: {
                    event?: {
                        id?: string;
                        createdAt?: Date | undefined;
                        userId?: string;
                        type?: import("./audit.js").AuditLogEventType;
                        organizationId?: string;
                        dataTokenCreatePayload?: {
                            tokenId?: string;
                            expiration?: Date | undefined;
                        } | undefined;
                        dataTokenRevokePayload?: {
                            tokenId?: string;
                        } | undefined;
                        dataSubscriptionCreatePayload?: {
                            subscriptionId?: string;
                        } | undefined;
                        dataSubscriptionUpdatePayload?: {
                            subscriptionId?: string;
                        } | undefined;
                        dataSubscriptionDeletePayload?: {
                            subscriptionId?: string;
                        } | undefined;
                    } | undefined;
                } | undefined): CreateAuditLogEventRequest;
                fromPartial(object: {
                    event?: {
                        id?: string;
                        createdAt?: Date | undefined;
                        userId?: string;
                        type?: import("./audit.js").AuditLogEventType;
                        organizationId?: string;
                        dataTokenCreatePayload?: {
                            tokenId?: string;
                            expiration?: Date | undefined;
                        } | undefined;
                        dataTokenRevokePayload?: {
                            tokenId?: string;
                        } | undefined;
                        dataSubscriptionCreatePayload?: {
                            subscriptionId?: string;
                        } | undefined;
                        dataSubscriptionUpdatePayload?: {
                            subscriptionId?: string;
                        } | undefined;
                        dataSubscriptionDeletePayload?: {
                            subscriptionId?: string;
                        } | undefined;
                    } | undefined;
                }): CreateAuditLogEventRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.data.api.admin.v1alpha.CreateAuditLogEventResponse";
                encode(_: CreateAuditLogEventResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CreateAuditLogEventResponse;
                fromJSON(_: any): CreateAuditLogEventResponse;
                toJSON(_: CreateAuditLogEventResponse): unknown;
                create(base?: {} | undefined): CreateAuditLogEventResponse;
                fromPartial(_: {}): CreateAuditLogEventResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=service.d.ts.map