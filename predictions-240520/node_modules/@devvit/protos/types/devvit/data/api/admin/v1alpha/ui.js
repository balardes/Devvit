/**
 * #ui.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../../../typeRegistry.js';
import { firehoseEventFromJSON, firehoseEventToJSON } from '../../../../options/options.js';
import { subredditRatingFromJSON, subredditRatingToJSON, } from '../../../../reddit/v2alpha/subredditv2.js';
function createBaseGetUISubscriptionsByOrganizationNameRequest() {
    return { organizationName: "" };
}
export const GetUISubscriptionsByOrganizationNameRequest = {
    $type: "devvit.data.api.admin.v1alpha.GetUISubscriptionsByOrganizationNameRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.organizationName !== "") {
            writer.uint32(10).string(message.organizationName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUISubscriptionsByOrganizationNameRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.organizationName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { organizationName: isSet(object.organizationName) ? globalThis.String(object.organizationName) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.organizationName !== "") {
            obj.organizationName = message.organizationName;
        }
        return obj;
    },
    create(base) {
        return GetUISubscriptionsByOrganizationNameRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUISubscriptionsByOrganizationNameRequest();
        message.organizationName = object.organizationName ?? "";
        return message;
    },
};
messageTypeRegistry.set(GetUISubscriptionsByOrganizationNameRequest.$type, GetUISubscriptionsByOrganizationNameRequest);
function createBaseGetUISubscriptionsByOrganizationNameResponse() {
    return { subscriptions: [] };
}
export const GetUISubscriptionsByOrganizationNameResponse = {
    $type: "devvit.data.api.admin.v1alpha.GetUISubscriptionsByOrganizationNameResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.subscriptions) {
            GetUISubscriptionsByOrganizationNameResponse_Subscription.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUISubscriptionsByOrganizationNameResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subscriptions.push(GetUISubscriptionsByOrganizationNameResponse_Subscription.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            subscriptions: globalThis.Array.isArray(object?.subscriptions)
                ? object.subscriptions.map((e) => GetUISubscriptionsByOrganizationNameResponse_Subscription.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscriptions?.length) {
            obj.subscriptions = message.subscriptions.map((e) => GetUISubscriptionsByOrganizationNameResponse_Subscription.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return GetUISubscriptionsByOrganizationNameResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUISubscriptionsByOrganizationNameResponse();
        message.subscriptions =
            object.subscriptions?.map((e) => GetUISubscriptionsByOrganizationNameResponse_Subscription.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(GetUISubscriptionsByOrganizationNameResponse.$type, GetUISubscriptionsByOrganizationNameResponse);
function createBaseGetUISubscriptionsByOrganizationNameResponse_SubredditInfo() {
    return { id: "", name: "", icon: "", isNsfw: false };
}
export const GetUISubscriptionsByOrganizationNameResponse_SubredditInfo = {
    $type: "devvit.data.api.admin.v1alpha.GetUISubscriptionsByOrganizationNameResponse.SubredditInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.icon !== "") {
            writer.uint32(26).string(message.icon);
        }
        if (message.isNsfw !== false) {
            writer.uint32(32).bool(message.isNsfw);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUISubscriptionsByOrganizationNameResponse_SubredditInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.icon = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.isNsfw = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
            isNsfw: isSet(object.isNsfw) ? globalThis.Boolean(object.isNsfw) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.icon !== "") {
            obj.icon = message.icon;
        }
        if (message.isNsfw !== false) {
            obj.isNsfw = message.isNsfw;
        }
        return obj;
    },
    create(base) {
        return GetUISubscriptionsByOrganizationNameResponse_SubredditInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUISubscriptionsByOrganizationNameResponse_SubredditInfo();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.icon = object.icon ?? "";
        message.isNsfw = object.isNsfw ?? false;
        return message;
    },
};
messageTypeRegistry.set(GetUISubscriptionsByOrganizationNameResponse_SubredditInfo.$type, GetUISubscriptionsByOrganizationNameResponse_SubredditInfo);
function createBaseGetUISubscriptionsByOrganizationNameResponse_Subscription() {
    return { id: "", name: "", description: "", events: [], subreddits: [], subredditRatings: [] };
}
export const GetUISubscriptionsByOrganizationNameResponse_Subscription = {
    $type: "devvit.data.api.admin.v1alpha.GetUISubscriptionsByOrganizationNameResponse.Subscription",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        writer.uint32(34).fork();
        for (const v of message.events) {
            writer.int32(v);
        }
        writer.ldelim();
        for (const v of message.subreddits) {
            GetUISubscriptionsByOrganizationNameResponse_SubredditInfo.encode(v, writer.uint32(42).fork()).ldelim();
        }
        writer.uint32(50).fork();
        for (const v of message.subredditRatings) {
            writer.int32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUISubscriptionsByOrganizationNameResponse_Subscription();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 4:
                    if (tag === 32) {
                        message.events.push(reader.int32());
                        continue;
                    }
                    if (tag === 34) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.events.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.subreddits.push(GetUISubscriptionsByOrganizationNameResponse_SubredditInfo.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag === 48) {
                        message.subredditRatings.push(reader.int32());
                        continue;
                    }
                    if (tag === 50) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.subredditRatings.push(reader.int32());
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            events: globalThis.Array.isArray(object?.events) ? object.events.map((e) => firehoseEventFromJSON(e)) : [],
            subreddits: globalThis.Array.isArray(object?.subreddits)
                ? object.subreddits.map((e) => GetUISubscriptionsByOrganizationNameResponse_SubredditInfo.fromJSON(e))
                : [],
            subredditRatings: globalThis.Array.isArray(object?.subredditRatings)
                ? object.subredditRatings.map((e) => subredditRatingFromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.events?.length) {
            obj.events = message.events.map((e) => firehoseEventToJSON(e));
        }
        if (message.subreddits?.length) {
            obj.subreddits = message.subreddits.map((e) => GetUISubscriptionsByOrganizationNameResponse_SubredditInfo.toJSON(e));
        }
        if (message.subredditRatings?.length) {
            obj.subredditRatings = message.subredditRatings.map((e) => subredditRatingToJSON(e));
        }
        return obj;
    },
    create(base) {
        return GetUISubscriptionsByOrganizationNameResponse_Subscription.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUISubscriptionsByOrganizationNameResponse_Subscription();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.description = object.description ?? "";
        message.events = object.events?.map((e) => e) || [];
        message.subreddits =
            object.subreddits?.map((e) => GetUISubscriptionsByOrganizationNameResponse_SubredditInfo.fromPartial(e)) || [];
        message.subredditRatings = object.subredditRatings?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set(GetUISubscriptionsByOrganizationNameResponse_Subscription.$type, GetUISubscriptionsByOrganizationNameResponse_Subscription);
export const ROAdminUIServiceName = "devvit.data.api.admin.v1alpha.ROAdminUI";
export class ROAdminUIClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || ROAdminUIServiceName;
        this.rpc = rpc;
        this.GetSubscriptionsByOrganizationName = this.GetSubscriptionsByOrganizationName.bind(this);
    }
    GetSubscriptionsByOrganizationName(request, metadata) {
        const data = GetUISubscriptionsByOrganizationNameRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetSubscriptionsByOrganizationName", data, metadata);
        return promise.then((data) => GetUISubscriptionsByOrganizationNameResponse.decode(_m0.Reader.create(data)));
    }
}
export const ROAdminUIDefinition = {
    name: "ROAdminUI",
    fullName: "devvit.data.api.admin.v1alpha.ROAdminUI",
    methods: {
        getSubscriptionsByOrganizationName: {
            name: "GetSubscriptionsByOrganizationName",
            requestType: GetUISubscriptionsByOrganizationNameRequest,
            requestStream: false,
            responseType: GetUISubscriptionsByOrganizationNameResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
