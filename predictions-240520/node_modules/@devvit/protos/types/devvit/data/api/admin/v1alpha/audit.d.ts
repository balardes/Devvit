/**
 * #audit.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
export declare enum AuditLogEventType {
    DATA_SUBSCRIPTION_CREATE = 0,
    DATA_SUBSCRIPTION_UPDATE = 1,
    DATA_SUBSCRIPTION_DELETE = 2,
    DATA_TOKEN_CREATE = 3,
    DATA_TOKEN_REVOKE = 4,
    UNRECOGNIZED = -1
}
export declare function auditLogEventTypeFromJSON(object: any): AuditLogEventType;
export declare function auditLogEventTypeToJSON(object: AuditLogEventType): number;
export interface AuditLogEvent {
    /** unique identifier for the event */
    id: string;
    /** when the event was created */
    createdAt?: Date | undefined;
    /** t2_ id of the user who performed the action */
    userId: string;
    /** type of the event */
    type: AuditLogEventType;
    /** id of the organization the event is associated with */
    organizationId: string;
    dataTokenCreatePayload?: DataTokenCreateAuditLogEventPayload | undefined;
    dataTokenRevokePayload?: DataTokenRevokeAuditLogEventPayload | undefined;
    dataSubscriptionCreatePayload?: DataSubscriptionCreateAuditLogEventPayload | undefined;
    dataSubscriptionUpdatePayload?: DataSubscriptionUpdateAuditLogEventPayload | undefined;
    dataSubscriptionDeletePayload?: DataSubscriptionDeleteAuditLogEventPayload | undefined;
}
export interface DataTokenCreateAuditLogEventPayload {
    /** id of the data token that was created */
    tokenId: string;
    /** expiration date of the data token */
    expiration?: Date | undefined;
}
export interface DataTokenRevokeAuditLogEventPayload {
    /** id of the data token that was revoked */
    tokenId: string;
}
export interface DataSubscriptionCreateAuditLogEventPayload {
    subscriptionId: string;
}
export interface DataSubscriptionUpdateAuditLogEventPayload {
    subscriptionId: string;
}
export interface DataSubscriptionDeleteAuditLogEventPayload {
    subscriptionId: string;
}
export interface GetAuditLogEventsByOrganizationNameRequest {
    organizationName: string;
}
export interface GetAuditLogEventsByOrganizationNameResponse {
    events: AuditLogEvent[];
}
export interface CreateAuditLogEventRequest {
    event?: AuditLogEvent | undefined;
}
export interface CreateAuditLogEventResponse {
}
export declare const AuditLogEvent: {
    $type: "devvit.data.api.admin.v1alpha.AuditLogEvent";
    encode(message: AuditLogEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AuditLogEvent;
    fromJSON(object: any): AuditLogEvent;
    toJSON(message: AuditLogEvent): unknown;
    create(base?: DeepPartial<AuditLogEvent>): AuditLogEvent;
    fromPartial(object: DeepPartial<AuditLogEvent>): AuditLogEvent;
};
export declare const DataTokenCreateAuditLogEventPayload: {
    $type: "devvit.data.api.admin.v1alpha.DataTokenCreateAuditLogEventPayload";
    encode(message: DataTokenCreateAuditLogEventPayload, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataTokenCreateAuditLogEventPayload;
    fromJSON(object: any): DataTokenCreateAuditLogEventPayload;
    toJSON(message: DataTokenCreateAuditLogEventPayload): unknown;
    create(base?: DeepPartial<DataTokenCreateAuditLogEventPayload>): DataTokenCreateAuditLogEventPayload;
    fromPartial(object: DeepPartial<DataTokenCreateAuditLogEventPayload>): DataTokenCreateAuditLogEventPayload;
};
export declare const DataTokenRevokeAuditLogEventPayload: {
    $type: "devvit.data.api.admin.v1alpha.DataTokenRevokeAuditLogEventPayload";
    encode(message: DataTokenRevokeAuditLogEventPayload, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataTokenRevokeAuditLogEventPayload;
    fromJSON(object: any): DataTokenRevokeAuditLogEventPayload;
    toJSON(message: DataTokenRevokeAuditLogEventPayload): unknown;
    create(base?: DeepPartial<DataTokenRevokeAuditLogEventPayload>): DataTokenRevokeAuditLogEventPayload;
    fromPartial(object: DeepPartial<DataTokenRevokeAuditLogEventPayload>): DataTokenRevokeAuditLogEventPayload;
};
export declare const DataSubscriptionCreateAuditLogEventPayload: {
    $type: "devvit.data.api.admin.v1alpha.DataSubscriptionCreateAuditLogEventPayload";
    encode(message: DataSubscriptionCreateAuditLogEventPayload, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataSubscriptionCreateAuditLogEventPayload;
    fromJSON(object: any): DataSubscriptionCreateAuditLogEventPayload;
    toJSON(message: DataSubscriptionCreateAuditLogEventPayload): unknown;
    create(base?: DeepPartial<DataSubscriptionCreateAuditLogEventPayload>): DataSubscriptionCreateAuditLogEventPayload;
    fromPartial(object: DeepPartial<DataSubscriptionCreateAuditLogEventPayload>): DataSubscriptionCreateAuditLogEventPayload;
};
export declare const DataSubscriptionUpdateAuditLogEventPayload: {
    $type: "devvit.data.api.admin.v1alpha.DataSubscriptionUpdateAuditLogEventPayload";
    encode(message: DataSubscriptionUpdateAuditLogEventPayload, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataSubscriptionUpdateAuditLogEventPayload;
    fromJSON(object: any): DataSubscriptionUpdateAuditLogEventPayload;
    toJSON(message: DataSubscriptionUpdateAuditLogEventPayload): unknown;
    create(base?: DeepPartial<DataSubscriptionUpdateAuditLogEventPayload>): DataSubscriptionUpdateAuditLogEventPayload;
    fromPartial(object: DeepPartial<DataSubscriptionUpdateAuditLogEventPayload>): DataSubscriptionUpdateAuditLogEventPayload;
};
export declare const DataSubscriptionDeleteAuditLogEventPayload: {
    $type: "devvit.data.api.admin.v1alpha.DataSubscriptionDeleteAuditLogEventPayload";
    encode(message: DataSubscriptionDeleteAuditLogEventPayload, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataSubscriptionDeleteAuditLogEventPayload;
    fromJSON(object: any): DataSubscriptionDeleteAuditLogEventPayload;
    toJSON(message: DataSubscriptionDeleteAuditLogEventPayload): unknown;
    create(base?: DeepPartial<DataSubscriptionDeleteAuditLogEventPayload>): DataSubscriptionDeleteAuditLogEventPayload;
    fromPartial(object: DeepPartial<DataSubscriptionDeleteAuditLogEventPayload>): DataSubscriptionDeleteAuditLogEventPayload;
};
export declare const GetAuditLogEventsByOrganizationNameRequest: {
    $type: "devvit.data.api.admin.v1alpha.GetAuditLogEventsByOrganizationNameRequest";
    encode(message: GetAuditLogEventsByOrganizationNameRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetAuditLogEventsByOrganizationNameRequest;
    fromJSON(object: any): GetAuditLogEventsByOrganizationNameRequest;
    toJSON(message: GetAuditLogEventsByOrganizationNameRequest): unknown;
    create(base?: DeepPartial<GetAuditLogEventsByOrganizationNameRequest>): GetAuditLogEventsByOrganizationNameRequest;
    fromPartial(object: DeepPartial<GetAuditLogEventsByOrganizationNameRequest>): GetAuditLogEventsByOrganizationNameRequest;
};
export declare const GetAuditLogEventsByOrganizationNameResponse: {
    $type: "devvit.data.api.admin.v1alpha.GetAuditLogEventsByOrganizationNameResponse";
    encode(message: GetAuditLogEventsByOrganizationNameResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetAuditLogEventsByOrganizationNameResponse;
    fromJSON(object: any): GetAuditLogEventsByOrganizationNameResponse;
    toJSON(message: GetAuditLogEventsByOrganizationNameResponse): unknown;
    create(base?: DeepPartial<GetAuditLogEventsByOrganizationNameResponse>): GetAuditLogEventsByOrganizationNameResponse;
    fromPartial(object: DeepPartial<GetAuditLogEventsByOrganizationNameResponse>): GetAuditLogEventsByOrganizationNameResponse;
};
export declare const CreateAuditLogEventRequest: {
    $type: "devvit.data.api.admin.v1alpha.CreateAuditLogEventRequest";
    encode(message: CreateAuditLogEventRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateAuditLogEventRequest;
    fromJSON(object: any): CreateAuditLogEventRequest;
    toJSON(message: CreateAuditLogEventRequest): unknown;
    create(base?: DeepPartial<CreateAuditLogEventRequest>): CreateAuditLogEventRequest;
    fromPartial(object: DeepPartial<CreateAuditLogEventRequest>): CreateAuditLogEventRequest;
};
export declare const CreateAuditLogEventResponse: {
    $type: "devvit.data.api.admin.v1alpha.CreateAuditLogEventResponse";
    encode(_: CreateAuditLogEventResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateAuditLogEventResponse;
    fromJSON(_: any): CreateAuditLogEventResponse;
    toJSON(_: CreateAuditLogEventResponse): unknown;
    create(base?: DeepPartial<CreateAuditLogEventResponse>): CreateAuditLogEventResponse;
    fromPartial(_: DeepPartial<CreateAuditLogEventResponse>): CreateAuditLogEventResponse;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=audit.d.ts.map