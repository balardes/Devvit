/**
 * #ui.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { Metadata } from "../../../../../../lib/Types.js";
import { FirehoseEvent } from '../../../../options/options.js';
import { SubredditRating } from '../../../../reddit/v2alpha/subredditv2.js';
export interface GetUISubscriptionsByOrganizationNameRequest {
    organizationName: string;
}
export interface GetUISubscriptionsByOrganizationNameResponse {
    subscriptions: GetUISubscriptionsByOrganizationNameResponse_Subscription[];
}
export interface GetUISubscriptionsByOrganizationNameResponse_SubredditInfo {
    /**
     * t5_ subreddit ID
     * @example "t5_2qh1o"
     */
    id: string;
    /**
     * Subreddit display name - not prefixed with r/
     * @example "aww"
     */
    name: string;
    /** Subreddit icon URL */
    icon: string;
    /** Whether the subreddit is NSFW */
    isNsfw: boolean;
}
/** Data subscription for UI consumption that includes hydrated subreddit info */
export interface GetUISubscriptionsByOrganizationNameResponse_Subscription {
    /** Subscription ID */
    id: string;
    /** Subscription name */
    name: string;
    /** Subscription description */
    description: string;
    /** Firehose events types the subscription is subscribed to */
    events: FirehoseEvent[];
    /** Subreddits the subscription is subscribed to */
    subreddits: GetUISubscriptionsByOrganizationNameResponse_SubredditInfo[];
    /** Subreddit ratings the subscription is subscribed to */
    subredditRatings: SubredditRating[];
}
export declare const GetUISubscriptionsByOrganizationNameRequest: {
    $type: "devvit.data.api.admin.v1alpha.GetUISubscriptionsByOrganizationNameRequest";
    encode(message: GetUISubscriptionsByOrganizationNameRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetUISubscriptionsByOrganizationNameRequest;
    fromJSON(object: any): GetUISubscriptionsByOrganizationNameRequest;
    toJSON(message: GetUISubscriptionsByOrganizationNameRequest): unknown;
    create(base?: DeepPartial<GetUISubscriptionsByOrganizationNameRequest>): GetUISubscriptionsByOrganizationNameRequest;
    fromPartial(object: DeepPartial<GetUISubscriptionsByOrganizationNameRequest>): GetUISubscriptionsByOrganizationNameRequest;
};
export declare const GetUISubscriptionsByOrganizationNameResponse: {
    $type: "devvit.data.api.admin.v1alpha.GetUISubscriptionsByOrganizationNameResponse";
    encode(message: GetUISubscriptionsByOrganizationNameResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetUISubscriptionsByOrganizationNameResponse;
    fromJSON(object: any): GetUISubscriptionsByOrganizationNameResponse;
    toJSON(message: GetUISubscriptionsByOrganizationNameResponse): unknown;
    create(base?: DeepPartial<GetUISubscriptionsByOrganizationNameResponse>): GetUISubscriptionsByOrganizationNameResponse;
    fromPartial(object: DeepPartial<GetUISubscriptionsByOrganizationNameResponse>): GetUISubscriptionsByOrganizationNameResponse;
};
export declare const GetUISubscriptionsByOrganizationNameResponse_SubredditInfo: {
    $type: "devvit.data.api.admin.v1alpha.GetUISubscriptionsByOrganizationNameResponse.SubredditInfo";
    encode(message: GetUISubscriptionsByOrganizationNameResponse_SubredditInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetUISubscriptionsByOrganizationNameResponse_SubredditInfo;
    fromJSON(object: any): GetUISubscriptionsByOrganizationNameResponse_SubredditInfo;
    toJSON(message: GetUISubscriptionsByOrganizationNameResponse_SubredditInfo): unknown;
    create(base?: DeepPartial<GetUISubscriptionsByOrganizationNameResponse_SubredditInfo>): GetUISubscriptionsByOrganizationNameResponse_SubredditInfo;
    fromPartial(object: DeepPartial<GetUISubscriptionsByOrganizationNameResponse_SubredditInfo>): GetUISubscriptionsByOrganizationNameResponse_SubredditInfo;
};
export declare const GetUISubscriptionsByOrganizationNameResponse_Subscription: {
    $type: "devvit.data.api.admin.v1alpha.GetUISubscriptionsByOrganizationNameResponse.Subscription";
    encode(message: GetUISubscriptionsByOrganizationNameResponse_Subscription, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetUISubscriptionsByOrganizationNameResponse_Subscription;
    fromJSON(object: any): GetUISubscriptionsByOrganizationNameResponse_Subscription;
    toJSON(message: GetUISubscriptionsByOrganizationNameResponse_Subscription): unknown;
    create(base?: DeepPartial<GetUISubscriptionsByOrganizationNameResponse_Subscription>): GetUISubscriptionsByOrganizationNameResponse_Subscription;
    fromPartial(object: DeepPartial<GetUISubscriptionsByOrganizationNameResponse_Subscription>): GetUISubscriptionsByOrganizationNameResponse_Subscription;
};
/**
 * This service augments the core Admin Service and exists to accomodate the
 * more frequently changing UI requirements. Endpoints in this service should
 * attempt to return appropriately hydrated items in order to minmize the the
 * number of server calls needed to render a view (on initial load, at least)
 */
export interface ROAdminUI {
    GetSubscriptionsByOrganizationName(request: GetUISubscriptionsByOrganizationNameRequest, metadata?: Metadata): Promise<GetUISubscriptionsByOrganizationNameResponse>;
}
export declare const ROAdminUIServiceName = "devvit.data.api.admin.v1alpha.ROAdminUI";
export declare class ROAdminUIClientImpl implements ROAdminUI {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetSubscriptionsByOrganizationName(request: GetUISubscriptionsByOrganizationNameRequest, metadata?: Metadata): Promise<GetUISubscriptionsByOrganizationNameResponse>;
}
/**
 * This service augments the core Admin Service and exists to accomodate the
 * more frequently changing UI requirements. Endpoints in this service should
 * attempt to return appropriately hydrated items in order to minmize the the
 * number of server calls needed to render a view (on initial load, at least)
 */
export type ROAdminUIDefinition = typeof ROAdminUIDefinition;
export declare const ROAdminUIDefinition: {
    readonly name: "ROAdminUI";
    readonly fullName: "devvit.data.api.admin.v1alpha.ROAdminUI";
    readonly methods: {
        readonly getSubscriptionsByOrganizationName: {
            readonly name: "GetSubscriptionsByOrganizationName";
            readonly requestType: {
                $type: "devvit.data.api.admin.v1alpha.GetUISubscriptionsByOrganizationNameRequest";
                encode(message: GetUISubscriptionsByOrganizationNameRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetUISubscriptionsByOrganizationNameRequest;
                fromJSON(object: any): GetUISubscriptionsByOrganizationNameRequest;
                toJSON(message: GetUISubscriptionsByOrganizationNameRequest): unknown;
                create(base?: DeepPartial<GetUISubscriptionsByOrganizationNameRequest>): GetUISubscriptionsByOrganizationNameRequest;
                fromPartial(object: DeepPartial<GetUISubscriptionsByOrganizationNameRequest>): GetUISubscriptionsByOrganizationNameRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.data.api.admin.v1alpha.GetUISubscriptionsByOrganizationNameResponse";
                encode(message: GetUISubscriptionsByOrganizationNameResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetUISubscriptionsByOrganizationNameResponse;
                fromJSON(object: any): GetUISubscriptionsByOrganizationNameResponse;
                toJSON(message: GetUISubscriptionsByOrganizationNameResponse): unknown;
                create(base?: DeepPartial<GetUISubscriptionsByOrganizationNameResponse>): GetUISubscriptionsByOrganizationNameResponse;
                fromPartial(object: DeepPartial<GetUISubscriptionsByOrganizationNameResponse>): GetUISubscriptionsByOrganizationNameResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=ui.d.ts.map