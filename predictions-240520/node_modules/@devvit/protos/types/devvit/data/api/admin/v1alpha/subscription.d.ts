/**
 * #subscription.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { FirehoseEvent } from '../../../../options/options.js';
import { SubredditRating } from '../../../../reddit/v2alpha/subredditv2.js';
export interface Subscription {
    id: string;
    name: string;
    organizationId: string;
    description: string;
    events: FirehoseEvent[];
    subreddits: string[];
    subredditRatings: SubredditRating[];
}
export interface CreateSubscriptionRequest {
    events: FirehoseEvent[];
    subreddits: string[];
    subredditRatings: SubredditRating[];
    organizationId: string;
    name: string;
    description: string;
}
export interface CreateSubscriptionResponse {
    subscription?: Subscription | undefined;
}
export interface GetSubscriptionByIdRequest {
    subscriptionId: string;
}
export interface GetSubscriptionByIdResponse {
    subscription?: Subscription | undefined;
}
export interface GetSubscriptionsByOrganizationNameRequest {
    organizationName: string;
}
export interface GetSubscriptionsByOrganizationNameResponse {
    subscriptions: Subscription[];
}
export interface UpdateSubscriptionRequest {
    /** Id of the subscription to update */
    subscriptionId: string;
    /** New name of the subscription */
    name?: string | undefined;
    /** New description of the subscription */
    description?: string | undefined;
    /** New events. Will overwrite the array of existing events. */
    events: FirehoseEvent[];
    /** New subreddits. Will overwrite the array of existing subreddits. */
    subreddits: string[];
    /** New subreddit ratings. Will overwrite the array of existing subreddit ratings. */
    subredditRatings: SubredditRating[];
}
export interface UpdateSubscriptionResponse {
    subscription?: Subscription | undefined;
}
export interface DeleteSubscriptionRequest {
    subscriptionId: string;
}
export interface DeleteSubscriptionResponse {
}
export declare const Subscription: {
    $type: "devvit.data.api.admin.v1alpha.Subscription";
    encode(message: Subscription, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Subscription;
    fromJSON(object: any): Subscription;
    toJSON(message: Subscription): unknown;
    create(base?: DeepPartial<Subscription>): Subscription;
    fromPartial(object: DeepPartial<Subscription>): Subscription;
};
export declare const CreateSubscriptionRequest: {
    $type: "devvit.data.api.admin.v1alpha.CreateSubscriptionRequest";
    encode(message: CreateSubscriptionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateSubscriptionRequest;
    fromJSON(object: any): CreateSubscriptionRequest;
    toJSON(message: CreateSubscriptionRequest): unknown;
    create(base?: DeepPartial<CreateSubscriptionRequest>): CreateSubscriptionRequest;
    fromPartial(object: DeepPartial<CreateSubscriptionRequest>): CreateSubscriptionRequest;
};
export declare const CreateSubscriptionResponse: {
    $type: "devvit.data.api.admin.v1alpha.CreateSubscriptionResponse";
    encode(message: CreateSubscriptionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateSubscriptionResponse;
    fromJSON(object: any): CreateSubscriptionResponse;
    toJSON(message: CreateSubscriptionResponse): unknown;
    create(base?: DeepPartial<CreateSubscriptionResponse>): CreateSubscriptionResponse;
    fromPartial(object: DeepPartial<CreateSubscriptionResponse>): CreateSubscriptionResponse;
};
export declare const GetSubscriptionByIdRequest: {
    $type: "devvit.data.api.admin.v1alpha.GetSubscriptionByIdRequest";
    encode(message: GetSubscriptionByIdRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetSubscriptionByIdRequest;
    fromJSON(object: any): GetSubscriptionByIdRequest;
    toJSON(message: GetSubscriptionByIdRequest): unknown;
    create(base?: DeepPartial<GetSubscriptionByIdRequest>): GetSubscriptionByIdRequest;
    fromPartial(object: DeepPartial<GetSubscriptionByIdRequest>): GetSubscriptionByIdRequest;
};
export declare const GetSubscriptionByIdResponse: {
    $type: "devvit.data.api.admin.v1alpha.GetSubscriptionByIdResponse";
    encode(message: GetSubscriptionByIdResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetSubscriptionByIdResponse;
    fromJSON(object: any): GetSubscriptionByIdResponse;
    toJSON(message: GetSubscriptionByIdResponse): unknown;
    create(base?: DeepPartial<GetSubscriptionByIdResponse>): GetSubscriptionByIdResponse;
    fromPartial(object: DeepPartial<GetSubscriptionByIdResponse>): GetSubscriptionByIdResponse;
};
export declare const GetSubscriptionsByOrganizationNameRequest: {
    $type: "devvit.data.api.admin.v1alpha.GetSubscriptionsByOrganizationNameRequest";
    encode(message: GetSubscriptionsByOrganizationNameRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetSubscriptionsByOrganizationNameRequest;
    fromJSON(object: any): GetSubscriptionsByOrganizationNameRequest;
    toJSON(message: GetSubscriptionsByOrganizationNameRequest): unknown;
    create(base?: DeepPartial<GetSubscriptionsByOrganizationNameRequest>): GetSubscriptionsByOrganizationNameRequest;
    fromPartial(object: DeepPartial<GetSubscriptionsByOrganizationNameRequest>): GetSubscriptionsByOrganizationNameRequest;
};
export declare const GetSubscriptionsByOrganizationNameResponse: {
    $type: "devvit.data.api.admin.v1alpha.GetSubscriptionsByOrganizationNameResponse";
    encode(message: GetSubscriptionsByOrganizationNameResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetSubscriptionsByOrganizationNameResponse;
    fromJSON(object: any): GetSubscriptionsByOrganizationNameResponse;
    toJSON(message: GetSubscriptionsByOrganizationNameResponse): unknown;
    create(base?: DeepPartial<GetSubscriptionsByOrganizationNameResponse>): GetSubscriptionsByOrganizationNameResponse;
    fromPartial(object: DeepPartial<GetSubscriptionsByOrganizationNameResponse>): GetSubscriptionsByOrganizationNameResponse;
};
export declare const UpdateSubscriptionRequest: {
    $type: "devvit.data.api.admin.v1alpha.UpdateSubscriptionRequest";
    encode(message: UpdateSubscriptionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSubscriptionRequest;
    fromJSON(object: any): UpdateSubscriptionRequest;
    toJSON(message: UpdateSubscriptionRequest): unknown;
    create(base?: DeepPartial<UpdateSubscriptionRequest>): UpdateSubscriptionRequest;
    fromPartial(object: DeepPartial<UpdateSubscriptionRequest>): UpdateSubscriptionRequest;
};
export declare const UpdateSubscriptionResponse: {
    $type: "devvit.data.api.admin.v1alpha.UpdateSubscriptionResponse";
    encode(message: UpdateSubscriptionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSubscriptionResponse;
    fromJSON(object: any): UpdateSubscriptionResponse;
    toJSON(message: UpdateSubscriptionResponse): unknown;
    create(base?: DeepPartial<UpdateSubscriptionResponse>): UpdateSubscriptionResponse;
    fromPartial(object: DeepPartial<UpdateSubscriptionResponse>): UpdateSubscriptionResponse;
};
export declare const DeleteSubscriptionRequest: {
    $type: "devvit.data.api.admin.v1alpha.DeleteSubscriptionRequest";
    encode(message: DeleteSubscriptionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteSubscriptionRequest;
    fromJSON(object: any): DeleteSubscriptionRequest;
    toJSON(message: DeleteSubscriptionRequest): unknown;
    create(base?: DeepPartial<DeleteSubscriptionRequest>): DeleteSubscriptionRequest;
    fromPartial(object: DeepPartial<DeleteSubscriptionRequest>): DeleteSubscriptionRequest;
};
export declare const DeleteSubscriptionResponse: {
    $type: "devvit.data.api.admin.v1alpha.DeleteSubscriptionResponse";
    encode(_: DeleteSubscriptionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteSubscriptionResponse;
    fromJSON(_: any): DeleteSubscriptionResponse;
    toJSON(_: DeleteSubscriptionResponse): unknown;
    create(base?: DeepPartial<DeleteSubscriptionResponse>): DeleteSubscriptionResponse;
    fromPartial(_: DeepPartial<DeleteSubscriptionResponse>): DeleteSubscriptionResponse;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=subscription.d.ts.map