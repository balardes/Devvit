/**
 * #intake.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { Metadata } from "../../../../../lib/Types.js";
import { Any } from '../../../../google/protobuf/any.js';
export interface IntakeEvent {
    topic: string;
    id: string;
    event?: Any | undefined;
}
export interface IntakeResponse {
}
export declare const IntakeEvent: {
    $type: "devvit.data.api.v1alpha.IntakeEvent";
    encode(message: IntakeEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): IntakeEvent;
    fromJSON(object: any): IntakeEvent;
    toJSON(message: IntakeEvent): unknown;
    create(base?: DeepPartial<IntakeEvent>): IntakeEvent;
    fromPartial(object: DeepPartial<IntakeEvent>): IntakeEvent;
};
export declare const IntakeResponse: {
    $type: "devvit.data.api.v1alpha.IntakeResponse";
    encode(_: IntakeResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): IntakeResponse;
    fromJSON(_: any): IntakeResponse;
    toJSON(_: IntakeResponse): unknown;
    create(base?: DeepPartial<IntakeResponse>): IntakeResponse;
    fromPartial(_: DeepPartial<IntakeResponse>): IntakeResponse;
};
export interface DataIntaker {
    OnEvent(request: IntakeEvent, metadata?: Metadata): Promise<IntakeResponse>;
}
export declare const DataIntakerServiceName = "devvit.data.api.v1alpha.DataIntaker";
export declare class DataIntakerClientImpl implements DataIntaker {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnEvent(request: IntakeEvent, metadata?: Metadata): Promise<IntakeResponse>;
}
export type DataIntakerDefinition = typeof DataIntakerDefinition;
export declare const DataIntakerDefinition: {
    readonly name: "DataIntaker";
    readonly fullName: "devvit.data.api.v1alpha.DataIntaker";
    readonly methods: {
        readonly onEvent: {
            readonly name: "OnEvent";
            readonly requestType: {
                $type: "devvit.data.api.v1alpha.IntakeEvent";
                encode(message: IntakeEvent, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): IntakeEvent;
                fromJSON(object: any): IntakeEvent;
                toJSON(message: IntakeEvent): unknown;
                create(base?: DeepPartial<IntakeEvent>): IntakeEvent;
                fromPartial(object: DeepPartial<IntakeEvent>): IntakeEvent;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.data.api.v1alpha.IntakeResponse";
                encode(_: IntakeResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): IntakeResponse;
                fromJSON(_: any): IntakeResponse;
                toJSON(_: IntakeResponse): unknown;
                create(base?: DeepPartial<IntakeResponse>): IntakeResponse;
                fromPartial(_: DeepPartial<IntakeResponse>): IntakeResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=intake.d.ts.map