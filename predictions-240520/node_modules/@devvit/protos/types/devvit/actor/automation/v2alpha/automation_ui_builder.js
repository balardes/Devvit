/**
 * #automation_ui_builder.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
import { Form } from '../../../ui/form_builder/v1alpha/form.js';
import { Automation } from '../v1alpha/automation.js';
import { Trigger, triggerTypeFromJSON, triggerTypeToJSON } from '../v1alpha/trigger.js';
/** The type of step it is. Used to filter list request */
export var AutomationUIBuilderStepType;
(function (AutomationUIBuilderStepType) {
    /** ACTION - Action type step */
    AutomationUIBuilderStepType[AutomationUIBuilderStepType["ACTION"] = 0] = "ACTION";
    /** FILTER - Filter type step */
    AutomationUIBuilderStepType[AutomationUIBuilderStepType["FILTER"] = 1] = "FILTER";
    AutomationUIBuilderStepType[AutomationUIBuilderStepType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AutomationUIBuilderStepType || (AutomationUIBuilderStepType = {}));
export function automationUIBuilderStepTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "ACTION":
            return AutomationUIBuilderStepType.ACTION;
        case 1:
        case "FILTER":
            return AutomationUIBuilderStepType.FILTER;
        case -1:
        case "UNRECOGNIZED":
        default:
            return AutomationUIBuilderStepType.UNRECOGNIZED;
    }
}
export function automationUIBuilderStepTypeToJSON(object) {
    switch (object) {
        case AutomationUIBuilderStepType.ACTION:
            return 0;
        case AutomationUIBuilderStepType.FILTER:
            return 1;
        case AutomationUIBuilderStepType.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseAutomationUIBuilderListTriggersRequest() {
    return {};
}
export const AutomationUIBuilderListTriggersRequest = {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderListTriggersRequest",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAutomationUIBuilderListTriggersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return AutomationUIBuilderListTriggersRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseAutomationUIBuilderListTriggersRequest();
        return message;
    },
};
messageTypeRegistry.set(AutomationUIBuilderListTriggersRequest.$type, AutomationUIBuilderListTriggersRequest);
function createBaseAutomationUIBuilderListTriggersResponse() {
    return { triggers: [] };
}
export const AutomationUIBuilderListTriggersResponse = {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderListTriggersResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.triggers) {
            Trigger.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAutomationUIBuilderListTriggersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.triggers.push(Trigger.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            triggers: globalThis.Array.isArray(object?.triggers) ? object.triggers.map((e) => Trigger.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.triggers?.length) {
            obj.triggers = message.triggers.map((e) => Trigger.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return AutomationUIBuilderListTriggersResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAutomationUIBuilderListTriggersResponse();
        message.triggers = object.triggers?.map((e) => Trigger.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(AutomationUIBuilderListTriggersResponse.$type, AutomationUIBuilderListTriggersResponse);
function createBaseAutomationUIBuilderListStepsRequest() {
    return { location: "", triggerType: 0, stepType: 0 };
}
export const AutomationUIBuilderListStepsRequest = {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderListStepsRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.location !== "") {
            writer.uint32(10).string(message.location);
        }
        if (message.triggerType !== 0) {
            writer.uint32(16).int32(message.triggerType);
        }
        if (message.stepType !== 0) {
            writer.uint32(24).int32(message.stepType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAutomationUIBuilderListStepsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.location = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.triggerType = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.stepType = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            location: isSet(object.location) ? globalThis.String(object.location) : "",
            triggerType: isSet(object.triggerType) ? triggerTypeFromJSON(object.triggerType) : 0,
            stepType: isSet(object.stepType) ? automationUIBuilderStepTypeFromJSON(object.stepType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.location !== "") {
            obj.location = message.location;
        }
        if (message.triggerType !== 0) {
            obj.triggerType = triggerTypeToJSON(message.triggerType);
        }
        if (message.stepType !== 0) {
            obj.stepType = automationUIBuilderStepTypeToJSON(message.stepType);
        }
        return obj;
    },
    create(base) {
        return AutomationUIBuilderListStepsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAutomationUIBuilderListStepsRequest();
        message.location = object.location ?? "";
        message.triggerType = object.triggerType ?? 0;
        message.stepType = object.stepType ?? 0;
        return message;
    },
};
messageTypeRegistry.set(AutomationUIBuilderListStepsRequest.$type, AutomationUIBuilderListStepsRequest);
function createBaseAutomationUIBuilderStepActor() {
    return { actor: "", label: "", description: "", type: 0 };
}
export const AutomationUIBuilderStepActor = {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderStepActor",
    encode(message, writer = _m0.Writer.create()) {
        if (message.actor !== "") {
            writer.uint32(10).string(message.actor);
        }
        if (message.label !== "") {
            writer.uint32(18).string(message.label);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        if (message.type !== 0) {
            writer.uint32(32).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAutomationUIBuilderStepActor();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.actor = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.label = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            actor: isSet(object.actor) ? globalThis.String(object.actor) : "",
            label: isSet(object.label) ? globalThis.String(object.label) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            type: isSet(object.type) ? automationUIBuilderStepTypeFromJSON(object.type) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.actor !== "") {
            obj.actor = message.actor;
        }
        if (message.label !== "") {
            obj.label = message.label;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.type !== 0) {
            obj.type = automationUIBuilderStepTypeToJSON(message.type);
        }
        return obj;
    },
    create(base) {
        return AutomationUIBuilderStepActor.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAutomationUIBuilderStepActor();
        message.actor = object.actor ?? "";
        message.label = object.label ?? "";
        message.description = object.description ?? "";
        message.type = object.type ?? 0;
        return message;
    },
};
messageTypeRegistry.set(AutomationUIBuilderStepActor.$type, AutomationUIBuilderStepActor);
function createBaseAutomationUIBuilderListStepsResponse() {
    return { steps: [] };
}
export const AutomationUIBuilderListStepsResponse = {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderListStepsResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.steps) {
            AutomationUIBuilderStepActor.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAutomationUIBuilderListStepsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.steps.push(AutomationUIBuilderStepActor.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            steps: globalThis.Array.isArray(object?.steps)
                ? object.steps.map((e) => AutomationUIBuilderStepActor.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.steps?.length) {
            obj.steps = message.steps.map((e) => AutomationUIBuilderStepActor.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return AutomationUIBuilderListStepsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAutomationUIBuilderListStepsResponse();
        message.steps = object.steps?.map((e) => AutomationUIBuilderStepActor.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(AutomationUIBuilderListStepsResponse.$type, AutomationUIBuilderListStepsResponse);
function createBaseAutomationUIBuilderListAutomationsRequest() {
    return { location: "" };
}
export const AutomationUIBuilderListAutomationsRequest = {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderListAutomationsRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.location !== "") {
            writer.uint32(10).string(message.location);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAutomationUIBuilderListAutomationsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.location = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { location: isSet(object.location) ? globalThis.String(object.location) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.location !== "") {
            obj.location = message.location;
        }
        return obj;
    },
    create(base) {
        return AutomationUIBuilderListAutomationsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAutomationUIBuilderListAutomationsRequest();
        message.location = object.location ?? "";
        return message;
    },
};
messageTypeRegistry.set(AutomationUIBuilderListAutomationsRequest.$type, AutomationUIBuilderListAutomationsRequest);
function createBaseAutomationUIBuilderListAutomationsResponse() {
    return { automations: [] };
}
export const AutomationUIBuilderListAutomationsResponse = {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderListAutomationsResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.automations) {
            Automation.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAutomationUIBuilderListAutomationsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.automations.push(Automation.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            automations: globalThis.Array.isArray(object?.automations)
                ? object.automations.map((e) => Automation.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.automations?.length) {
            obj.automations = message.automations.map((e) => Automation.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return AutomationUIBuilderListAutomationsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAutomationUIBuilderListAutomationsResponse();
        message.automations = object.automations?.map((e) => Automation.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(AutomationUIBuilderListAutomationsResponse.$type, AutomationUIBuilderListAutomationsResponse);
function createBaseAutomationUIBuilderGetAutomationRequest() {
    return { id: "" };
}
export const AutomationUIBuilderGetAutomationRequest = {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderGetAutomationRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAutomationUIBuilderGetAutomationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return AutomationUIBuilderGetAutomationRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAutomationUIBuilderGetAutomationRequest();
        message.id = object.id ?? "";
        return message;
    },
};
messageTypeRegistry.set(AutomationUIBuilderGetAutomationRequest.$type, AutomationUIBuilderGetAutomationRequest);
function createBaseAutomationUIBuilderGetAutomationResponse() {
    return { automation: undefined };
}
export const AutomationUIBuilderGetAutomationResponse = {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderGetAutomationResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.automation !== undefined) {
            Automation.encode(message.automation, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAutomationUIBuilderGetAutomationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.automation = Automation.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { automation: isSet(object.automation) ? Automation.fromJSON(object.automation) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.automation !== undefined) {
            obj.automation = Automation.toJSON(message.automation);
        }
        return obj;
    },
    create(base) {
        return AutomationUIBuilderGetAutomationResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAutomationUIBuilderGetAutomationResponse();
        message.automation = (object.automation !== undefined && object.automation !== null)
            ? Automation.fromPartial(object.automation)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(AutomationUIBuilderGetAutomationResponse.$type, AutomationUIBuilderGetAutomationResponse);
function createBaseAutomationUIBuilderGetStepFormRequest() {
    return { actor: "" };
}
export const AutomationUIBuilderGetStepFormRequest = {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderGetStepFormRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.actor !== "") {
            writer.uint32(10).string(message.actor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAutomationUIBuilderGetStepFormRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.actor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { actor: isSet(object.actor) ? globalThis.String(object.actor) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.actor !== "") {
            obj.actor = message.actor;
        }
        return obj;
    },
    create(base) {
        return AutomationUIBuilderGetStepFormRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAutomationUIBuilderGetStepFormRequest();
        message.actor = object.actor ?? "";
        return message;
    },
};
messageTypeRegistry.set(AutomationUIBuilderGetStepFormRequest.$type, AutomationUIBuilderGetStepFormRequest);
function createBaseAutomationUIBuilderGetStepFormResponse() {
    return { form: undefined };
}
export const AutomationUIBuilderGetStepFormResponse = {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderGetStepFormResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.form !== undefined) {
            Form.encode(message.form, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAutomationUIBuilderGetStepFormResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.form = Form.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { form: isSet(object.form) ? Form.fromJSON(object.form) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.form !== undefined) {
            obj.form = Form.toJSON(message.form);
        }
        return obj;
    },
    create(base) {
        return AutomationUIBuilderGetStepFormResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAutomationUIBuilderGetStepFormResponse();
        message.form = (object.form !== undefined && object.form !== null) ? Form.fromPartial(object.form) : undefined;
        return message;
    },
};
messageTypeRegistry.set(AutomationUIBuilderGetStepFormResponse.$type, AutomationUIBuilderGetStepFormResponse);
function createBaseAutomationUIBuilderUpdateAutomationRequest() {
    return { id: "", automation: undefined };
}
export const AutomationUIBuilderUpdateAutomationRequest = {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderUpdateAutomationRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.automation !== undefined) {
            Automation.encode(message.automation, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAutomationUIBuilderUpdateAutomationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.automation = Automation.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            automation: isSet(object.automation) ? Automation.fromJSON(object.automation) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.automation !== undefined) {
            obj.automation = Automation.toJSON(message.automation);
        }
        return obj;
    },
    create(base) {
        return AutomationUIBuilderUpdateAutomationRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAutomationUIBuilderUpdateAutomationRequest();
        message.id = object.id ?? "";
        message.automation = (object.automation !== undefined && object.automation !== null)
            ? Automation.fromPartial(object.automation)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(AutomationUIBuilderUpdateAutomationRequest.$type, AutomationUIBuilderUpdateAutomationRequest);
function createBaseAutomationUIBuilderUpdateAutomationResponse() {
    return {};
}
export const AutomationUIBuilderUpdateAutomationResponse = {
    $type: "devvit.actor.automation.v2alpha.AutomationUIBuilderUpdateAutomationResponse",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAutomationUIBuilderUpdateAutomationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return AutomationUIBuilderUpdateAutomationResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseAutomationUIBuilderUpdateAutomationResponse();
        return message;
    },
};
messageTypeRegistry.set(AutomationUIBuilderUpdateAutomationResponse.$type, AutomationUIBuilderUpdateAutomationResponse);
export const AutomationUIBuilderServiceName = "devvit.actor.automation.v2alpha.AutomationUIBuilder";
export class AutomationUIBuilderClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || AutomationUIBuilderServiceName;
        this.rpc = rpc;
        this.ListTriggers = this.ListTriggers.bind(this);
        this.ListSteps = this.ListSteps.bind(this);
        this.ListAutomations = this.ListAutomations.bind(this);
        this.GetAutomation = this.GetAutomation.bind(this);
        this.UpdateAutomation = this.UpdateAutomation.bind(this);
        this.GetStepForm = this.GetStepForm.bind(this);
    }
    ListTriggers(request, metadata) {
        const data = AutomationUIBuilderListTriggersRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ListTriggers", data, metadata);
        return promise.then((data) => AutomationUIBuilderListTriggersResponse.decode(_m0.Reader.create(data)));
    }
    ListSteps(request, metadata) {
        const data = AutomationUIBuilderListStepsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ListSteps", data, metadata);
        return promise.then((data) => AutomationUIBuilderListStepsResponse.decode(_m0.Reader.create(data)));
    }
    ListAutomations(request, metadata) {
        const data = AutomationUIBuilderListAutomationsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ListAutomations", data, metadata);
        return promise.then((data) => AutomationUIBuilderListAutomationsResponse.decode(_m0.Reader.create(data)));
    }
    GetAutomation(request, metadata) {
        const data = AutomationUIBuilderGetAutomationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetAutomation", data, metadata);
        return promise.then((data) => AutomationUIBuilderGetAutomationResponse.decode(_m0.Reader.create(data)));
    }
    UpdateAutomation(request, metadata) {
        const data = AutomationUIBuilderUpdateAutomationRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateAutomation", data, metadata);
        return promise.then((data) => AutomationUIBuilderUpdateAutomationResponse.decode(_m0.Reader.create(data)));
    }
    GetStepForm(request, metadata) {
        const data = AutomationUIBuilderGetStepFormRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetStepForm", data, metadata);
        return promise.then((data) => AutomationUIBuilderGetStepFormResponse.decode(_m0.Reader.create(data)));
    }
}
export const AutomationUIBuilderDefinition = {
    name: "AutomationUIBuilder",
    fullName: "devvit.actor.automation.v2alpha.AutomationUIBuilder",
    methods: {
        /** Looks up all registered Triggers from the database */
        listTriggers: {
            name: "ListTriggers",
            requestType: AutomationUIBuilderListTriggersRequest,
            requestStream: false,
            responseType: AutomationUIBuilderListTriggersResponse,
            responseStream: false,
            options: {},
        },
        /** Find all installed Apps for the installation and return any actors that implement the trigger and step type */
        listSteps: {
            name: "ListSteps",
            requestType: AutomationUIBuilderListStepsRequest,
            requestStream: false,
            responseType: AutomationUIBuilderListStepsResponse,
            responseStream: false,
            options: {},
        },
        /** Get all automations for a given location (subreddit) */
        listAutomations: {
            name: "ListAutomations",
            requestType: AutomationUIBuilderListAutomationsRequest,
            requestStream: false,
            responseType: AutomationUIBuilderListAutomationsResponse,
            responseStream: false,
            options: {},
        },
        /** Gets an automation */
        getAutomation: {
            name: "GetAutomation",
            requestType: AutomationUIBuilderGetAutomationRequest,
            requestStream: false,
            responseType: AutomationUIBuilderGetAutomationResponse,
            responseStream: false,
            options: {},
        },
        /** Updates an automation. Will create a new automation if ID isn't set */
        updateAutomation: {
            name: "UpdateAutomation",
            requestType: AutomationUIBuilderUpdateAutomationRequest,
            requestStream: false,
            responseType: AutomationUIBuilderUpdateAutomationResponse,
            responseStream: false,
            options: {},
        },
        /** Get form layout for step */
        getStepForm: {
            name: "GetStepForm",
            requestType: AutomationUIBuilderGetStepFormRequest,
            requestStream: false,
            responseType: AutomationUIBuilderGetStepFormResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
