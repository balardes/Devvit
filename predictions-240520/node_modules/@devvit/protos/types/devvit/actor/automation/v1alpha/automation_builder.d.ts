/**
 * #automation_builder.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { Metadata } from "../../../../../lib/Types.js";
import { Empty } from '../../../../google/protobuf/empty.js';
import { ConfigForm } from '../../user_configurable/user_configurable.js';
import { Automation } from './automation.js';
import { Trigger, TriggerType } from './trigger.js';
/** The type of step it is. Used to filter list request */
export declare enum StepType {
    /** ACTION - Action type step */
    ACTION = 0,
    /** FILTER - Filter type step1 */
    FILTER = 1,
    UNRECOGNIZED = -1
}
export declare function stepTypeFromJSON(object: any): StepType;
export declare function stepTypeToJSON(object: StepType): number;
export interface GetTriggersRequest {
}
export interface ListStepsRequest {
    /** t5 id for subreddit */
    location: string;
    /** datatype the step operates on */
    triggerType: TriggerType;
    /** type of step */
    stepType: StepType;
}
export interface ListAutomationRequest {
    /** t2_id for subreddit */
    location: string;
}
export interface StepActor {
    actor: string;
    label: string;
    description: string;
    type: StepType;
}
export interface ActorList {
    actors: StepActor[];
}
export interface AutomationList {
    automations: Automation[];
}
export interface TriggerList {
    triggers: Trigger[];
}
export interface UpdateAutomationRequest {
    automation?: Automation | undefined;
    location: string;
}
export interface GetStepFormRequest {
    actor: string;
}
export declare const GetTriggersRequest: {
    $type: "devvit.actor.automation.v1alpha.GetTriggersRequest";
    encode(_: GetTriggersRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetTriggersRequest;
    fromJSON(_: any): GetTriggersRequest;
    toJSON(_: GetTriggersRequest): unknown;
    create(base?: DeepPartial<GetTriggersRequest>): GetTriggersRequest;
    fromPartial(_: DeepPartial<GetTriggersRequest>): GetTriggersRequest;
};
export declare const ListStepsRequest: {
    $type: "devvit.actor.automation.v1alpha.ListStepsRequest";
    encode(message: ListStepsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListStepsRequest;
    fromJSON(object: any): ListStepsRequest;
    toJSON(message: ListStepsRequest): unknown;
    create(base?: DeepPartial<ListStepsRequest>): ListStepsRequest;
    fromPartial(object: DeepPartial<ListStepsRequest>): ListStepsRequest;
};
export declare const ListAutomationRequest: {
    $type: "devvit.actor.automation.v1alpha.ListAutomationRequest";
    encode(message: ListAutomationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListAutomationRequest;
    fromJSON(object: any): ListAutomationRequest;
    toJSON(message: ListAutomationRequest): unknown;
    create(base?: DeepPartial<ListAutomationRequest>): ListAutomationRequest;
    fromPartial(object: DeepPartial<ListAutomationRequest>): ListAutomationRequest;
};
export declare const StepActor: {
    $type: "devvit.actor.automation.v1alpha.StepActor";
    encode(message: StepActor, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StepActor;
    fromJSON(object: any): StepActor;
    toJSON(message: StepActor): unknown;
    create(base?: DeepPartial<StepActor>): StepActor;
    fromPartial(object: DeepPartial<StepActor>): StepActor;
};
export declare const ActorList: {
    $type: "devvit.actor.automation.v1alpha.ActorList";
    encode(message: ActorList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ActorList;
    fromJSON(object: any): ActorList;
    toJSON(message: ActorList): unknown;
    create(base?: DeepPartial<ActorList>): ActorList;
    fromPartial(object: DeepPartial<ActorList>): ActorList;
};
export declare const AutomationList: {
    $type: "devvit.actor.automation.v1alpha.AutomationList";
    encode(message: AutomationList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomationList;
    fromJSON(object: any): AutomationList;
    toJSON(message: AutomationList): unknown;
    create(base?: DeepPartial<AutomationList>): AutomationList;
    fromPartial(object: DeepPartial<AutomationList>): AutomationList;
};
export declare const TriggerList: {
    $type: "devvit.actor.automation.v1alpha.TriggerList";
    encode(message: TriggerList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TriggerList;
    fromJSON(object: any): TriggerList;
    toJSON(message: TriggerList): unknown;
    create(base?: DeepPartial<TriggerList>): TriggerList;
    fromPartial(object: DeepPartial<TriggerList>): TriggerList;
};
export declare const UpdateAutomationRequest: {
    $type: "devvit.actor.automation.v1alpha.UpdateAutomationRequest";
    encode(message: UpdateAutomationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAutomationRequest;
    fromJSON(object: any): UpdateAutomationRequest;
    toJSON(message: UpdateAutomationRequest): unknown;
    create(base?: DeepPartial<UpdateAutomationRequest>): UpdateAutomationRequest;
    fromPartial(object: DeepPartial<UpdateAutomationRequest>): UpdateAutomationRequest;
};
export declare const GetStepFormRequest: {
    $type: "devvit.actor.automation.v1alpha.GetStepFormRequest";
    encode(message: GetStepFormRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetStepFormRequest;
    fromJSON(object: any): GetStepFormRequest;
    toJSON(message: GetStepFormRequest): unknown;
    create(base?: DeepPartial<GetStepFormRequest>): GetStepFormRequest;
    fromPartial(object: DeepPartial<GetStepFormRequest>): GetStepFormRequest;
};
/** Service for providing data to Automation Builder UI element */
export interface AutomationBuilder {
    /** Looks up all registered Triggers from the database */
    GetTriggers(request: GetTriggersRequest, metadata?: Metadata): Promise<TriggerList>;
    /** Find all installed Apps for the installation and return any actors that implement the trigger and step type */
    ListSteps(request: ListStepsRequest, metadata?: Metadata): Promise<ActorList>;
    /** Get all automations for a given location (subreddit) */
    ListAutomations(request: ListAutomationRequest, metadata?: Metadata): Promise<AutomationList>;
    /** Updates an automation. Will create a new automation if ID isn't set */
    UpdateAutomation(request: UpdateAutomationRequest, metadata?: Metadata): Promise<Empty>;
    /** Get form layout for step */
    GetStepForm(request: GetStepFormRequest, metadata?: Metadata): Promise<ConfigForm>;
}
export declare const AutomationBuilderServiceName = "devvit.actor.automation.v1alpha.AutomationBuilder";
export declare class AutomationBuilderClientImpl implements AutomationBuilder {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetTriggers(request: GetTriggersRequest, metadata?: Metadata): Promise<TriggerList>;
    ListSteps(request: ListStepsRequest, metadata?: Metadata): Promise<ActorList>;
    ListAutomations(request: ListAutomationRequest, metadata?: Metadata): Promise<AutomationList>;
    UpdateAutomation(request: UpdateAutomationRequest, metadata?: Metadata): Promise<Empty>;
    GetStepForm(request: GetStepFormRequest, metadata?: Metadata): Promise<ConfigForm>;
}
/** Service for providing data to Automation Builder UI element */
export type AutomationBuilderDefinition = typeof AutomationBuilderDefinition;
export declare const AutomationBuilderDefinition: {
    readonly name: "AutomationBuilder";
    readonly fullName: "devvit.actor.automation.v1alpha.AutomationBuilder";
    readonly methods: {
        /** Looks up all registered Triggers from the database */
        readonly getTriggers: {
            readonly name: "GetTriggers";
            readonly requestType: {
                $type: "devvit.actor.automation.v1alpha.GetTriggersRequest";
                encode(_: GetTriggersRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetTriggersRequest;
                fromJSON(_: any): GetTriggersRequest;
                toJSON(_: GetTriggersRequest): unknown;
                create(base?: DeepPartial<GetTriggersRequest>): GetTriggersRequest;
                fromPartial(_: DeepPartial<GetTriggersRequest>): GetTriggersRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.TriggerList";
                encode(message: TriggerList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): TriggerList;
                fromJSON(object: any): TriggerList;
                toJSON(message: TriggerList): unknown;
                create(base?: DeepPartial<TriggerList>): TriggerList;
                fromPartial(object: DeepPartial<TriggerList>): TriggerList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Find all installed Apps for the installation and return any actors that implement the trigger and step type */
        readonly listSteps: {
            readonly name: "ListSteps";
            readonly requestType: {
                $type: "devvit.actor.automation.v1alpha.ListStepsRequest";
                encode(message: ListStepsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ListStepsRequest;
                fromJSON(object: any): ListStepsRequest;
                toJSON(message: ListStepsRequest): unknown;
                create(base?: DeepPartial<ListStepsRequest>): ListStepsRequest;
                fromPartial(object: DeepPartial<ListStepsRequest>): ListStepsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.ActorList";
                encode(message: ActorList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ActorList;
                fromJSON(object: any): ActorList;
                toJSON(message: ActorList): unknown;
                create(base?: DeepPartial<ActorList>): ActorList;
                fromPartial(object: DeepPartial<ActorList>): ActorList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Get all automations for a given location (subreddit) */
        readonly listAutomations: {
            readonly name: "ListAutomations";
            readonly requestType: {
                $type: "devvit.actor.automation.v1alpha.ListAutomationRequest";
                encode(message: ListAutomationRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ListAutomationRequest;
                fromJSON(object: any): ListAutomationRequest;
                toJSON(message: ListAutomationRequest): unknown;
                create(base?: DeepPartial<ListAutomationRequest>): ListAutomationRequest;
                fromPartial(object: DeepPartial<ListAutomationRequest>): ListAutomationRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.AutomationList";
                encode(message: AutomationList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AutomationList;
                fromJSON(object: any): AutomationList;
                toJSON(message: AutomationList): unknown;
                create(base?: DeepPartial<AutomationList>): AutomationList;
                fromPartial(object: DeepPartial<AutomationList>): AutomationList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Updates an automation. Will create a new automation if ID isn't set */
        readonly updateAutomation: {
            readonly name: "UpdateAutomation";
            readonly requestType: {
                $type: "devvit.actor.automation.v1alpha.UpdateAutomationRequest";
                encode(message: UpdateAutomationRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAutomationRequest;
                fromJSON(object: any): UpdateAutomationRequest;
                toJSON(message: UpdateAutomationRequest): unknown;
                create(base?: DeepPartial<UpdateAutomationRequest>): UpdateAutomationRequest;
                fromPartial(object: DeepPartial<UpdateAutomationRequest>): UpdateAutomationRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty; /** type of step */
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Get form layout for step */
        readonly getStepForm: {
            readonly name: "GetStepForm";
            readonly requestType: {
                $type: "devvit.actor.automation.v1alpha.GetStepFormRequest";
                encode(message: GetStepFormRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetStepFormRequest;
                fromJSON(object: any): GetStepFormRequest;
                toJSON(message: GetStepFormRequest): unknown;
                create(base?: DeepPartial<GetStepFormRequest>): GetStepFormRequest;
                fromPartial(object: DeepPartial<GetStepFormRequest>): GetStepFormRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.user_configurable.ConfigForm";
                encode(message: ConfigForm, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ConfigForm;
                fromJSON(object: any): ConfigForm;
                toJSON(message: ConfigForm): unknown;
                create(base?: {
                    fields?: {
                        fieldType?: import("../../user_configurable/user_configurable.js").ConfigFieldType;
                        key?: string;
                        prompt?: string;
                        response?: string;
                    }[];
                } | undefined): ConfigForm;
                fromPartial(object: {
                    fields?: {
                        fieldType?: import("../../user_configurable/user_configurable.js").ConfigFieldType;
                        key?: string;
                        prompt?: string;
                        response?: string;
                    }[];
                }): ConfigForm;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=automation_builder.d.ts.map