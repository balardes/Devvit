var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AsyncStateHook_changed, _AsyncStateHook_initializer, _AsyncStateHook_hookId;
import { registerHook } from './BlocksHandler.js';
import { RenderInterruptError } from './types.js';
export function useState(initialState) {
    const hook = registerHook({ namespace: 'useState' }, ({ changed }) => {
        const state = initialState instanceof Function ? initialState() : initialState;
        if (state instanceof Promise) {
            throw new Error('Cannot use async initializer with useState, use useAsyncState instead.');
        }
        const setter = (action) => {
            hook.state = action instanceof Function ? action(hook.state) : action;
            changed();
        };
        return { state, setter };
    });
    return [hook.state, hook.setter];
}
class AsyncStateHook {
    constructor(initializer, params) {
        this.state = { value: null, loading: false };
        _AsyncStateHook_changed.set(this, void 0);
        _AsyncStateHook_initializer.set(this, void 0);
        _AsyncStateHook_hookId.set(this, void 0);
        __classPrivateFieldSet(this, _AsyncStateHook_initializer, initializer, "f");
        __classPrivateFieldSet(this, _AsyncStateHook_hookId, params.hookId, "f");
        __classPrivateFieldSet(this, _AsyncStateHook_changed, params.changed, "f");
    }
    async onUIEvent() {
        if (this.state.value === null) {
            this.state.value = await __classPrivateFieldGet(this, _AsyncStateHook_initializer, "f").call(this);
            this.state.loading = false;
            __classPrivateFieldGet(this, _AsyncStateHook_changed, "f").call(this);
        }
    }
    setter(action) {
        this.state.value = action instanceof Function ? action(this.state.value) : action;
        __classPrivateFieldGet(this, _AsyncStateHook_changed, "f").call(this);
    }
    onLoad(renderContext) {
        if (this.state.value === null && !this.state.loading) {
            this.state.loading = true;
            __classPrivateFieldGet(this, _AsyncStateHook_changed, "f").call(this);
            const requeueEvent = {
                asyncRequest: { requestId: __classPrivateFieldGet(this, _AsyncStateHook_hookId, "f") },
                hook: __classPrivateFieldGet(this, _AsyncStateHook_hookId, "f"),
            };
            renderContext.addToRequeueEvents(requeueEvent);
            throw new RenderInterruptError();
        }
    }
}
_AsyncStateHook_changed = new WeakMap(), _AsyncStateHook_initializer = new WeakMap(), _AsyncStateHook_hookId = new WeakMap();
export function useAsyncState(initializer) {
    const hook = registerHook({ namespace: 'useAsyncState' }, (params) => {
        return new AsyncStateHook(initializer, params);
    });
    return [hook.state.value, hook.setter.bind(hook)];
}
