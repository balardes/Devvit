/**
 * #auth.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Duration } from '../../../../../google/protobuf/duration.js';
import { Timestamp } from '../../../../../google/protobuf/timestamp.js';
import { messageTypeRegistry } from '../../../../../typeRegistry.js';
function createBaseAccessToken() {
    return { id: "", organizationId: "", createdAt: undefined, expiresAt: undefined, isRevoked: false };
}
export const AccessToken = {
    $type: "devvit.data.api.admin.v1alpha.AccessToken",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.organizationId !== "") {
            writer.uint32(18).string(message.organizationId);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(26).fork()).ldelim();
        }
        if (message.expiresAt !== undefined) {
            Timestamp.encode(toTimestamp(message.expiresAt), writer.uint32(34).fork()).ldelim();
        }
        if (message.isRevoked !== false) {
            writer.uint32(40).bool(message.isRevoked);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccessToken();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.organizationId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.expiresAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.isRevoked = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            organizationId: isSet(object.organizationId) ? globalThis.String(object.organizationId) : "",
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            expiresAt: isSet(object.expiresAt) ? fromJsonTimestamp(object.expiresAt) : undefined,
            isRevoked: isSet(object.isRevoked) ? globalThis.Boolean(object.isRevoked) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.organizationId !== "") {
            obj.organizationId = message.organizationId;
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = message.createdAt.toISOString();
        }
        if (message.expiresAt !== undefined) {
            obj.expiresAt = message.expiresAt.toISOString();
        }
        if (message.isRevoked !== false) {
            obj.isRevoked = message.isRevoked;
        }
        return obj;
    },
    create(base) {
        return AccessToken.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAccessToken();
        message.id = object.id ?? "";
        message.organizationId = object.organizationId ?? "";
        message.createdAt = object.createdAt ?? undefined;
        message.expiresAt = object.expiresAt ?? undefined;
        message.isRevoked = object.isRevoked ?? false;
        return message;
    },
};
messageTypeRegistry.set(AccessToken.$type, AccessToken);
function createBaseCreateAccessTokenRequest() {
    return { organizationId: "", expiresIn: undefined };
}
export const CreateAccessTokenRequest = {
    $type: "devvit.data.api.admin.v1alpha.CreateAccessTokenRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.organizationId !== "") {
            writer.uint32(10).string(message.organizationId);
        }
        if (message.expiresIn !== undefined) {
            Duration.encode(message.expiresIn, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateAccessTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.organizationId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.expiresIn = Duration.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            organizationId: isSet(object.organizationId) ? globalThis.String(object.organizationId) : "",
            expiresIn: isSet(object.expiresIn) ? Duration.fromJSON(object.expiresIn) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.organizationId !== "") {
            obj.organizationId = message.organizationId;
        }
        if (message.expiresIn !== undefined) {
            obj.expiresIn = Duration.toJSON(message.expiresIn);
        }
        return obj;
    },
    create(base) {
        return CreateAccessTokenRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateAccessTokenRequest();
        message.organizationId = object.organizationId ?? "";
        message.expiresIn = (object.expiresIn !== undefined && object.expiresIn !== null)
            ? Duration.fromPartial(object.expiresIn)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(CreateAccessTokenRequest.$type, CreateAccessTokenRequest);
function createBaseCreateAccessTokenResponse() {
    return { token: "", expiresAt: undefined };
}
export const CreateAccessTokenResponse = {
    $type: "devvit.data.api.admin.v1alpha.CreateAccessTokenResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        if (message.expiresAt !== undefined) {
            Timestamp.encode(toTimestamp(message.expiresAt), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateAccessTokenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.expiresAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            token: isSet(object.token) ? globalThis.String(object.token) : "",
            expiresAt: isSet(object.expiresAt) ? fromJsonTimestamp(object.expiresAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.token !== "") {
            obj.token = message.token;
        }
        if (message.expiresAt !== undefined) {
            obj.expiresAt = message.expiresAt.toISOString();
        }
        return obj;
    },
    create(base) {
        return CreateAccessTokenResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateAccessTokenResponse();
        message.token = object.token ?? "";
        message.expiresAt = object.expiresAt ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(CreateAccessTokenResponse.$type, CreateAccessTokenResponse);
function createBaseGetAccessTokenByIdRequest() {
    return { id: "" };
}
export const GetAccessTokenByIdRequest = {
    $type: "devvit.data.api.admin.v1alpha.GetAccessTokenByIdRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAccessTokenByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return GetAccessTokenByIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAccessTokenByIdRequest();
        message.id = object.id ?? "";
        return message;
    },
};
messageTypeRegistry.set(GetAccessTokenByIdRequest.$type, GetAccessTokenByIdRequest);
function createBaseGetAccessTokenByIdResponse() {
    return { token: undefined };
}
export const GetAccessTokenByIdResponse = {
    $type: "devvit.data.api.admin.v1alpha.GetAccessTokenByIdResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.token !== undefined) {
            AccessToken.encode(message.token, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAccessTokenByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.token = AccessToken.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { token: isSet(object.token) ? AccessToken.fromJSON(object.token) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.token !== undefined) {
            obj.token = AccessToken.toJSON(message.token);
        }
        return obj;
    },
    create(base) {
        return GetAccessTokenByIdResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAccessTokenByIdResponse();
        message.token = (object.token !== undefined && object.token !== null)
            ? AccessToken.fromPartial(object.token)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(GetAccessTokenByIdResponse.$type, GetAccessTokenByIdResponse);
function createBaseGetAccessTokensByOrganizationNameRequest() {
    return { organizationName: "" };
}
export const GetAccessTokensByOrganizationNameRequest = {
    $type: "devvit.data.api.admin.v1alpha.GetAccessTokensByOrganizationNameRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.organizationName !== "") {
            writer.uint32(10).string(message.organizationName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAccessTokensByOrganizationNameRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.organizationName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { organizationName: isSet(object.organizationName) ? globalThis.String(object.organizationName) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.organizationName !== "") {
            obj.organizationName = message.organizationName;
        }
        return obj;
    },
    create(base) {
        return GetAccessTokensByOrganizationNameRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAccessTokensByOrganizationNameRequest();
        message.organizationName = object.organizationName ?? "";
        return message;
    },
};
messageTypeRegistry.set(GetAccessTokensByOrganizationNameRequest.$type, GetAccessTokensByOrganizationNameRequest);
function createBaseGetAccessTokensByOrganizationNameResponse() {
    return { tokens: [] };
}
export const GetAccessTokensByOrganizationNameResponse = {
    $type: "devvit.data.api.admin.v1alpha.GetAccessTokensByOrganizationNameResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.tokens) {
            AccessToken.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAccessTokensByOrganizationNameResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.tokens.push(AccessToken.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tokens: globalThis.Array.isArray(object?.tokens) ? object.tokens.map((e) => AccessToken.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tokens?.length) {
            obj.tokens = message.tokens.map((e) => AccessToken.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return GetAccessTokensByOrganizationNameResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAccessTokensByOrganizationNameResponse();
        message.tokens = object.tokens?.map((e) => AccessToken.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(GetAccessTokensByOrganizationNameResponse.$type, GetAccessTokensByOrganizationNameResponse);
function createBaseRevokeAccessTokenByIdRequest() {
    return { tokenId: "" };
}
export const RevokeAccessTokenByIdRequest = {
    $type: "devvit.data.api.admin.v1alpha.RevokeAccessTokenByIdRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.tokenId !== "") {
            writer.uint32(10).string(message.tokenId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRevokeAccessTokenByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.tokenId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { tokenId: isSet(object.tokenId) ? globalThis.String(object.tokenId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.tokenId !== "") {
            obj.tokenId = message.tokenId;
        }
        return obj;
    },
    create(base) {
        return RevokeAccessTokenByIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRevokeAccessTokenByIdRequest();
        message.tokenId = object.tokenId ?? "";
        return message;
    },
};
messageTypeRegistry.set(RevokeAccessTokenByIdRequest.$type, RevokeAccessTokenByIdRequest);
function createBaseRevokeAccessTokenByIdResponse() {
    return {};
}
export const RevokeAccessTokenByIdResponse = {
    $type: "devvit.data.api.admin.v1alpha.RevokeAccessTokenByIdResponse",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRevokeAccessTokenByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return RevokeAccessTokenByIdResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseRevokeAccessTokenByIdResponse();
        return message;
    },
};
messageTypeRegistry.set(RevokeAccessTokenByIdResponse.$type, RevokeAccessTokenByIdResponse);
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
