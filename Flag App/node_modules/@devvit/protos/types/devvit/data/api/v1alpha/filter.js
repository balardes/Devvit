/**
 * #filter.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
import { firehoseEventFromJSON, firehoseEventToJSON } from '../../../options/options.js';
import { subredditRatingFromJSON, subredditRatingToJSON, subredditTypeFromJSON, subredditTypeToJSON, } from '../../../reddit/v2alpha/subredditv2.js';
/** The approval status for a post or comment */
export var FirehoseFilterData_ApprovalStatus;
(function (FirehoseFilterData_ApprovalStatus) {
    FirehoseFilterData_ApprovalStatus[FirehoseFilterData_ApprovalStatus["UNKNOWN_APPROVAL_STATUS"] = 0] = "UNKNOWN_APPROVAL_STATUS";
    FirehoseFilterData_ApprovalStatus[FirehoseFilterData_ApprovalStatus["MOD_APPROVED"] = 1] = "MOD_APPROVED";
    FirehoseFilterData_ApprovalStatus[FirehoseFilterData_ApprovalStatus["MOD_REMOVED"] = 2] = "MOD_REMOVED";
    FirehoseFilterData_ApprovalStatus[FirehoseFilterData_ApprovalStatus["MOD_SPAMMED"] = 3] = "MOD_SPAMMED";
    FirehoseFilterData_ApprovalStatus[FirehoseFilterData_ApprovalStatus["ADMIN_APPROVED"] = 4] = "ADMIN_APPROVED";
    FirehoseFilterData_ApprovalStatus[FirehoseFilterData_ApprovalStatus["ADMIN_REMOVED"] = 5] = "ADMIN_REMOVED";
    FirehoseFilterData_ApprovalStatus[FirehoseFilterData_ApprovalStatus["ADMIN_SPAMMED"] = 6] = "ADMIN_SPAMMED";
    FirehoseFilterData_ApprovalStatus[FirehoseFilterData_ApprovalStatus["AUTHOR_REMOVED"] = 7] = "AUTHOR_REMOVED";
    FirehoseFilterData_ApprovalStatus[FirehoseFilterData_ApprovalStatus["AUTHOR_SPAMMED"] = 8] = "AUTHOR_SPAMMED";
    FirehoseFilterData_ApprovalStatus[FirehoseFilterData_ApprovalStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FirehoseFilterData_ApprovalStatus || (FirehoseFilterData_ApprovalStatus = {}));
export function firehoseFilterData_ApprovalStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "UNKNOWN_APPROVAL_STATUS":
            return FirehoseFilterData_ApprovalStatus.UNKNOWN_APPROVAL_STATUS;
        case 1:
        case "MOD_APPROVED":
            return FirehoseFilterData_ApprovalStatus.MOD_APPROVED;
        case 2:
        case "MOD_REMOVED":
            return FirehoseFilterData_ApprovalStatus.MOD_REMOVED;
        case 3:
        case "MOD_SPAMMED":
            return FirehoseFilterData_ApprovalStatus.MOD_SPAMMED;
        case 4:
        case "ADMIN_APPROVED":
            return FirehoseFilterData_ApprovalStatus.ADMIN_APPROVED;
        case 5:
        case "ADMIN_REMOVED":
            return FirehoseFilterData_ApprovalStatus.ADMIN_REMOVED;
        case 6:
        case "ADMIN_SPAMMED":
            return FirehoseFilterData_ApprovalStatus.ADMIN_SPAMMED;
        case 7:
        case "AUTHOR_REMOVED":
            return FirehoseFilterData_ApprovalStatus.AUTHOR_REMOVED;
        case 8:
        case "AUTHOR_SPAMMED":
            return FirehoseFilterData_ApprovalStatus.AUTHOR_SPAMMED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return FirehoseFilterData_ApprovalStatus.UNRECOGNIZED;
    }
}
export function firehoseFilterData_ApprovalStatusToJSON(object) {
    switch (object) {
        case FirehoseFilterData_ApprovalStatus.UNKNOWN_APPROVAL_STATUS:
            return 0;
        case FirehoseFilterData_ApprovalStatus.MOD_APPROVED:
            return 1;
        case FirehoseFilterData_ApprovalStatus.MOD_REMOVED:
            return 2;
        case FirehoseFilterData_ApprovalStatus.MOD_SPAMMED:
            return 3;
        case FirehoseFilterData_ApprovalStatus.ADMIN_APPROVED:
            return 4;
        case FirehoseFilterData_ApprovalStatus.ADMIN_REMOVED:
            return 5;
        case FirehoseFilterData_ApprovalStatus.ADMIN_SPAMMED:
            return 6;
        case FirehoseFilterData_ApprovalStatus.AUTHOR_REMOVED:
            return 7;
        case FirehoseFilterData_ApprovalStatus.AUTHOR_SPAMMED:
            return 8;
        case FirehoseFilterData_ApprovalStatus.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseFirehoseFilterData() {
    return { event: 0, subredditId: "", subredditRating: 0, post: undefined, comment: undefined, subredditType: 0 };
}
export const FirehoseFilterData = {
    $type: "devvit.data.api.v1alpha.FirehoseFilterData",
    encode(message, writer = _m0.Writer.create()) {
        if (message.event !== 0) {
            writer.uint32(8).int32(message.event);
        }
        if (message.subredditId !== "") {
            writer.uint32(18).string(message.subredditId);
        }
        if (message.subredditRating !== 0) {
            writer.uint32(24).int32(message.subredditRating);
        }
        if (message.post !== undefined) {
            FirehoseFilterData_PostFilterData.encode(message.post, writer.uint32(34).fork()).ldelim();
        }
        if (message.comment !== undefined) {
            FirehoseFilterData_CommentFilterData.encode(message.comment, writer.uint32(42).fork()).ldelim();
        }
        if (message.subredditType !== 0) {
            writer.uint32(48).int32(message.subredditType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFirehoseFilterData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.event = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.subredditId = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.subredditRating = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.post = FirehoseFilterData_PostFilterData.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.comment = FirehoseFilterData_CommentFilterData.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.subredditType = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            event: isSet(object.event) ? firehoseEventFromJSON(object.event) : 0,
            subredditId: isSet(object.subredditId) ? globalThis.String(object.subredditId) : "",
            subredditRating: isSet(object.subredditRating) ? subredditRatingFromJSON(object.subredditRating) : 0,
            post: isSet(object.post) ? FirehoseFilterData_PostFilterData.fromJSON(object.post) : undefined,
            comment: isSet(object.comment) ? FirehoseFilterData_CommentFilterData.fromJSON(object.comment) : undefined,
            subredditType: isSet(object.subredditType) ? subredditTypeFromJSON(object.subredditType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.event !== 0) {
            obj.event = firehoseEventToJSON(message.event);
        }
        if (message.subredditId !== "") {
            obj.subredditId = message.subredditId;
        }
        if (message.subredditRating !== 0) {
            obj.subredditRating = subredditRatingToJSON(message.subredditRating);
        }
        if (message.post !== undefined) {
            obj.post = FirehoseFilterData_PostFilterData.toJSON(message.post);
        }
        if (message.comment !== undefined) {
            obj.comment = FirehoseFilterData_CommentFilterData.toJSON(message.comment);
        }
        if (message.subredditType !== 0) {
            obj.subredditType = subredditTypeToJSON(message.subredditType);
        }
        return obj;
    },
    create(base) {
        return FirehoseFilterData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFirehoseFilterData();
        message.event = object.event ?? 0;
        message.subredditId = object.subredditId ?? "";
        message.subredditRating = object.subredditRating ?? 0;
        message.post = (object.post !== undefined && object.post !== null)
            ? FirehoseFilterData_PostFilterData.fromPartial(object.post)
            : undefined;
        message.comment = (object.comment !== undefined && object.comment !== null)
            ? FirehoseFilterData_CommentFilterData.fromPartial(object.comment)
            : undefined;
        message.subredditType = object.subredditType ?? 0;
        return message;
    },
};
messageTypeRegistry.set(FirehoseFilterData.$type, FirehoseFilterData);
function createBaseFirehoseFilterData_SafetyTag() {
    return { versions: {}, score: 0 };
}
export const FirehoseFilterData_SafetyTag = {
    $type: "devvit.data.api.v1alpha.FirehoseFilterData.SafetyTag",
    encode(message, writer = _m0.Writer.create()) {
        Object.entries(message.versions).forEach(([key, value]) => {
            FirehoseFilterData_SafetyTag_VersionsEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        if (message.score !== 0) {
            writer.uint32(17).double(message.score);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFirehoseFilterData_SafetyTag();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = FirehoseFilterData_SafetyTag_VersionsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.versions[entry1.key] = entry1.value;
                    }
                    continue;
                case 2:
                    if (tag !== 17) {
                        break;
                    }
                    message.score = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            versions: isObject(object.versions)
                ? Object.entries(object.versions).reduce((acc, [key, value]) => {
                    acc[key] = Number(value);
                    return acc;
                }, {})
                : {},
            score: isSet(object.score) ? globalThis.Number(object.score) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.versions) {
            const entries = Object.entries(message.versions);
            if (entries.length > 0) {
                obj.versions = {};
                entries.forEach(([k, v]) => {
                    obj.versions[k] = v;
                });
            }
        }
        if (message.score !== 0) {
            obj.score = message.score;
        }
        return obj;
    },
    create(base) {
        return FirehoseFilterData_SafetyTag.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFirehoseFilterData_SafetyTag();
        message.versions = Object.entries(object.versions ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.Number(value);
            }
            return acc;
        }, {});
        message.score = object.score ?? 0;
        return message;
    },
};
messageTypeRegistry.set(FirehoseFilterData_SafetyTag.$type, FirehoseFilterData_SafetyTag);
function createBaseFirehoseFilterData_SafetyTag_VersionsEntry() {
    return { key: "", value: 0 };
}
export const FirehoseFilterData_SafetyTag_VersionsEntry = {
    $type: "devvit.data.api.v1alpha.FirehoseFilterData.SafetyTag.VersionsEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(17).double(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFirehoseFilterData_SafetyTag_VersionsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 17) {
                        break;
                    }
                    message.value = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== 0) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return FirehoseFilterData_SafetyTag_VersionsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFirehoseFilterData_SafetyTag_VersionsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? 0;
        return message;
    },
};
messageTypeRegistry.set(FirehoseFilterData_SafetyTag_VersionsEntry.$type, FirehoseFilterData_SafetyTag_VersionsEntry);
function createBaseFirehoseFilterData_PostFilterData() {
    return {
        adminTakedown: false,
        perspectiveScoresTitle: {},
        perspectiveScoresBody: {},
        safetyXTag: undefined,
        safetyVTag: undefined,
        approvalStatus: 0,
        sexuallyExplicit: false,
        mediaIds: [],
        languageCode: "",
    };
}
export const FirehoseFilterData_PostFilterData = {
    $type: "devvit.data.api.v1alpha.FirehoseFilterData.PostFilterData",
    encode(message, writer = _m0.Writer.create()) {
        if (message.adminTakedown !== false) {
            writer.uint32(8).bool(message.adminTakedown);
        }
        Object.entries(message.perspectiveScoresTitle).forEach(([key, value]) => {
            FirehoseFilterData_PostFilterData_PerspectiveScoresTitleEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        Object.entries(message.perspectiveScoresBody).forEach(([key, value]) => {
            FirehoseFilterData_PostFilterData_PerspectiveScoresBodyEntry.encode({ key: key, value }, writer.uint32(26).fork()).ldelim();
        });
        if (message.safetyXTag !== undefined) {
            FirehoseFilterData_SafetyTag.encode(message.safetyXTag, writer.uint32(34).fork()).ldelim();
        }
        if (message.safetyVTag !== undefined) {
            FirehoseFilterData_SafetyTag.encode(message.safetyVTag, writer.uint32(42).fork()).ldelim();
        }
        if (message.approvalStatus !== 0) {
            writer.uint32(48).int32(message.approvalStatus);
        }
        if (message.sexuallyExplicit !== false) {
            writer.uint32(56).bool(message.sexuallyExplicit);
        }
        for (const v of message.mediaIds) {
            writer.uint32(66).string(v);
        }
        if (message.languageCode !== "") {
            writer.uint32(74).string(message.languageCode);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFirehoseFilterData_PostFilterData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.adminTakedown = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = FirehoseFilterData_PostFilterData_PerspectiveScoresTitleEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.perspectiveScoresTitle[entry2.key] = entry2.value;
                    }
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = FirehoseFilterData_PostFilterData_PerspectiveScoresBodyEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.perspectiveScoresBody[entry3.key] = entry3.value;
                    }
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.safetyXTag = FirehoseFilterData_SafetyTag.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.safetyVTag = FirehoseFilterData_SafetyTag.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.approvalStatus = reader.int32();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.sexuallyExplicit = reader.bool();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.mediaIds.push(reader.string());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.languageCode = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            adminTakedown: isSet(object.adminTakedown) ? globalThis.Boolean(object.adminTakedown) : false,
            perspectiveScoresTitle: isObject(object.perspectiveScoresTitle)
                ? Object.entries(object.perspectiveScoresTitle).reduce((acc, [key, value]) => {
                    acc[key] = Number(value);
                    return acc;
                }, {})
                : {},
            perspectiveScoresBody: isObject(object.perspectiveScoresBody)
                ? Object.entries(object.perspectiveScoresBody).reduce((acc, [key, value]) => {
                    acc[key] = Number(value);
                    return acc;
                }, {})
                : {},
            safetyXTag: isSet(object.safetyXTag) ? FirehoseFilterData_SafetyTag.fromJSON(object.safetyXTag) : undefined,
            safetyVTag: isSet(object.safetyVTag) ? FirehoseFilterData_SafetyTag.fromJSON(object.safetyVTag) : undefined,
            approvalStatus: isSet(object.approvalStatus)
                ? firehoseFilterData_ApprovalStatusFromJSON(object.approvalStatus)
                : 0,
            sexuallyExplicit: isSet(object.sexuallyExplicit) ? globalThis.Boolean(object.sexuallyExplicit) : false,
            mediaIds: globalThis.Array.isArray(object?.mediaIds) ? object.mediaIds.map((e) => globalThis.String(e)) : [],
            languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.adminTakedown !== false) {
            obj.adminTakedown = message.adminTakedown;
        }
        if (message.perspectiveScoresTitle) {
            const entries = Object.entries(message.perspectiveScoresTitle);
            if (entries.length > 0) {
                obj.perspectiveScoresTitle = {};
                entries.forEach(([k, v]) => {
                    obj.perspectiveScoresTitle[k] = v;
                });
            }
        }
        if (message.perspectiveScoresBody) {
            const entries = Object.entries(message.perspectiveScoresBody);
            if (entries.length > 0) {
                obj.perspectiveScoresBody = {};
                entries.forEach(([k, v]) => {
                    obj.perspectiveScoresBody[k] = v;
                });
            }
        }
        if (message.safetyXTag !== undefined) {
            obj.safetyXTag = FirehoseFilterData_SafetyTag.toJSON(message.safetyXTag);
        }
        if (message.safetyVTag !== undefined) {
            obj.safetyVTag = FirehoseFilterData_SafetyTag.toJSON(message.safetyVTag);
        }
        if (message.approvalStatus !== 0) {
            obj.approvalStatus = firehoseFilterData_ApprovalStatusToJSON(message.approvalStatus);
        }
        if (message.sexuallyExplicit !== false) {
            obj.sexuallyExplicit = message.sexuallyExplicit;
        }
        if (message.mediaIds?.length) {
            obj.mediaIds = message.mediaIds;
        }
        if (message.languageCode !== "") {
            obj.languageCode = message.languageCode;
        }
        return obj;
    },
    create(base) {
        return FirehoseFilterData_PostFilterData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFirehoseFilterData_PostFilterData();
        message.adminTakedown = object.adminTakedown ?? false;
        message.perspectiveScoresTitle = Object.entries(object.perspectiveScoresTitle ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.Number(value);
            }
            return acc;
        }, {});
        message.perspectiveScoresBody = Object.entries(object.perspectiveScoresBody ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.Number(value);
            }
            return acc;
        }, {});
        message.safetyXTag = (object.safetyXTag !== undefined && object.safetyXTag !== null)
            ? FirehoseFilterData_SafetyTag.fromPartial(object.safetyXTag)
            : undefined;
        message.safetyVTag = (object.safetyVTag !== undefined && object.safetyVTag !== null)
            ? FirehoseFilterData_SafetyTag.fromPartial(object.safetyVTag)
            : undefined;
        message.approvalStatus = object.approvalStatus ?? 0;
        message.sexuallyExplicit = object.sexuallyExplicit ?? false;
        message.mediaIds = object.mediaIds?.map((e) => e) || [];
        message.languageCode = object.languageCode ?? "";
        return message;
    },
};
messageTypeRegistry.set(FirehoseFilterData_PostFilterData.$type, FirehoseFilterData_PostFilterData);
function createBaseFirehoseFilterData_PostFilterData_PerspectiveScoresTitleEntry() {
    return { key: "", value: 0 };
}
export const FirehoseFilterData_PostFilterData_PerspectiveScoresTitleEntry = {
    $type: "devvit.data.api.v1alpha.FirehoseFilterData.PostFilterData.PerspectiveScoresTitleEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(17).double(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFirehoseFilterData_PostFilterData_PerspectiveScoresTitleEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 17) {
                        break;
                    }
                    message.value = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== 0) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return FirehoseFilterData_PostFilterData_PerspectiveScoresTitleEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFirehoseFilterData_PostFilterData_PerspectiveScoresTitleEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? 0;
        return message;
    },
};
messageTypeRegistry.set(FirehoseFilterData_PostFilterData_PerspectiveScoresTitleEntry.$type, FirehoseFilterData_PostFilterData_PerspectiveScoresTitleEntry);
function createBaseFirehoseFilterData_PostFilterData_PerspectiveScoresBodyEntry() {
    return { key: "", value: 0 };
}
export const FirehoseFilterData_PostFilterData_PerspectiveScoresBodyEntry = {
    $type: "devvit.data.api.v1alpha.FirehoseFilterData.PostFilterData.PerspectiveScoresBodyEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(17).double(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFirehoseFilterData_PostFilterData_PerspectiveScoresBodyEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 17) {
                        break;
                    }
                    message.value = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== 0) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return FirehoseFilterData_PostFilterData_PerspectiveScoresBodyEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFirehoseFilterData_PostFilterData_PerspectiveScoresBodyEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? 0;
        return message;
    },
};
messageTypeRegistry.set(FirehoseFilterData_PostFilterData_PerspectiveScoresBodyEntry.$type, FirehoseFilterData_PostFilterData_PerspectiveScoresBodyEntry);
function createBaseFirehoseFilterData_CommentFilterData() {
    return {
        adminTakedown: false,
        abuseScore: 0,
        perspectiveScores: {},
        approvalStatus: 0,
        safetyXTag: undefined,
        safetyVTag: undefined,
        sexuallyExplicit: false,
        mediaIds: [],
    };
}
export const FirehoseFilterData_CommentFilterData = {
    $type: "devvit.data.api.v1alpha.FirehoseFilterData.CommentFilterData",
    encode(message, writer = _m0.Writer.create()) {
        if (message.adminTakedown !== false) {
            writer.uint32(8).bool(message.adminTakedown);
        }
        if (message.abuseScore !== 0) {
            writer.uint32(17).double(message.abuseScore);
        }
        Object.entries(message.perspectiveScores).forEach(([key, value]) => {
            FirehoseFilterData_CommentFilterData_PerspectiveScoresEntry.encode({ key: key, value }, writer.uint32(26).fork()).ldelim();
        });
        if (message.approvalStatus !== 0) {
            writer.uint32(32).int32(message.approvalStatus);
        }
        if (message.safetyXTag !== undefined) {
            FirehoseFilterData_SafetyTag.encode(message.safetyXTag, writer.uint32(42).fork()).ldelim();
        }
        if (message.safetyVTag !== undefined) {
            FirehoseFilterData_SafetyTag.encode(message.safetyVTag, writer.uint32(50).fork()).ldelim();
        }
        if (message.sexuallyExplicit !== false) {
            writer.uint32(56).bool(message.sexuallyExplicit);
        }
        for (const v of message.mediaIds) {
            writer.uint32(66).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFirehoseFilterData_CommentFilterData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.adminTakedown = reader.bool();
                    continue;
                case 2:
                    if (tag !== 17) {
                        break;
                    }
                    message.abuseScore = reader.double();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = FirehoseFilterData_CommentFilterData_PerspectiveScoresEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.perspectiveScores[entry3.key] = entry3.value;
                    }
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.approvalStatus = reader.int32();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.safetyXTag = FirehoseFilterData_SafetyTag.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.safetyVTag = FirehoseFilterData_SafetyTag.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.sexuallyExplicit = reader.bool();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.mediaIds.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            adminTakedown: isSet(object.adminTakedown) ? globalThis.Boolean(object.adminTakedown) : false,
            abuseScore: isSet(object.abuseScore) ? globalThis.Number(object.abuseScore) : 0,
            perspectiveScores: isObject(object.perspectiveScores)
                ? Object.entries(object.perspectiveScores).reduce((acc, [key, value]) => {
                    acc[key] = Number(value);
                    return acc;
                }, {})
                : {},
            approvalStatus: isSet(object.approvalStatus)
                ? firehoseFilterData_ApprovalStatusFromJSON(object.approvalStatus)
                : 0,
            safetyXTag: isSet(object.safetyXTag) ? FirehoseFilterData_SafetyTag.fromJSON(object.safetyXTag) : undefined,
            safetyVTag: isSet(object.safetyVTag) ? FirehoseFilterData_SafetyTag.fromJSON(object.safetyVTag) : undefined,
            sexuallyExplicit: isSet(object.sexuallyExplicit) ? globalThis.Boolean(object.sexuallyExplicit) : false,
            mediaIds: globalThis.Array.isArray(object?.mediaIds) ? object.mediaIds.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.adminTakedown !== false) {
            obj.adminTakedown = message.adminTakedown;
        }
        if (message.abuseScore !== 0) {
            obj.abuseScore = message.abuseScore;
        }
        if (message.perspectiveScores) {
            const entries = Object.entries(message.perspectiveScores);
            if (entries.length > 0) {
                obj.perspectiveScores = {};
                entries.forEach(([k, v]) => {
                    obj.perspectiveScores[k] = v;
                });
            }
        }
        if (message.approvalStatus !== 0) {
            obj.approvalStatus = firehoseFilterData_ApprovalStatusToJSON(message.approvalStatus);
        }
        if (message.safetyXTag !== undefined) {
            obj.safetyXTag = FirehoseFilterData_SafetyTag.toJSON(message.safetyXTag);
        }
        if (message.safetyVTag !== undefined) {
            obj.safetyVTag = FirehoseFilterData_SafetyTag.toJSON(message.safetyVTag);
        }
        if (message.sexuallyExplicit !== false) {
            obj.sexuallyExplicit = message.sexuallyExplicit;
        }
        if (message.mediaIds?.length) {
            obj.mediaIds = message.mediaIds;
        }
        return obj;
    },
    create(base) {
        return FirehoseFilterData_CommentFilterData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFirehoseFilterData_CommentFilterData();
        message.adminTakedown = object.adminTakedown ?? false;
        message.abuseScore = object.abuseScore ?? 0;
        message.perspectiveScores = Object.entries(object.perspectiveScores ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.Number(value);
            }
            return acc;
        }, {});
        message.approvalStatus = object.approvalStatus ?? 0;
        message.safetyXTag = (object.safetyXTag !== undefined && object.safetyXTag !== null)
            ? FirehoseFilterData_SafetyTag.fromPartial(object.safetyXTag)
            : undefined;
        message.safetyVTag = (object.safetyVTag !== undefined && object.safetyVTag !== null)
            ? FirehoseFilterData_SafetyTag.fromPartial(object.safetyVTag)
            : undefined;
        message.sexuallyExplicit = object.sexuallyExplicit ?? false;
        message.mediaIds = object.mediaIds?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set(FirehoseFilterData_CommentFilterData.$type, FirehoseFilterData_CommentFilterData);
function createBaseFirehoseFilterData_CommentFilterData_PerspectiveScoresEntry() {
    return { key: "", value: 0 };
}
export const FirehoseFilterData_CommentFilterData_PerspectiveScoresEntry = {
    $type: "devvit.data.api.v1alpha.FirehoseFilterData.CommentFilterData.PerspectiveScoresEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(17).double(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFirehoseFilterData_CommentFilterData_PerspectiveScoresEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 17) {
                        break;
                    }
                    message.value = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== 0) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return FirehoseFilterData_CommentFilterData_PerspectiveScoresEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFirehoseFilterData_CommentFilterData_PerspectiveScoresEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? 0;
        return message;
    },
};
messageTypeRegistry.set(FirehoseFilterData_CommentFilterData_PerspectiveScoresEntry.$type, FirehoseFilterData_CommentFilterData_PerspectiveScoresEntry);
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
