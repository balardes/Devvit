/**
 * #intake.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Any } from '../../../../google/protobuf/any.js';
import { messageTypeRegistry } from '../../../../typeRegistry.js';
function createBaseIntakeEvent() {
    return { topic: "", id: "", event: undefined };
}
export const IntakeEvent = {
    $type: "devvit.data.api.v1alpha.IntakeEvent",
    encode(message, writer = _m0.Writer.create()) {
        if (message.topic !== "") {
            writer.uint32(10).string(message.topic);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.event !== undefined) {
            Any.encode(message.event, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIntakeEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.topic = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.event = Any.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            topic: isSet(object.topic) ? globalThis.String(object.topic) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            event: isSet(object.event) ? Any.fromJSON(object.event) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.topic !== "") {
            obj.topic = message.topic;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.event !== undefined) {
            obj.event = Any.toJSON(message.event);
        }
        return obj;
    },
    create(base) {
        return IntakeEvent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIntakeEvent();
        message.topic = object.topic ?? "";
        message.id = object.id ?? "";
        message.event = (object.event !== undefined && object.event !== null) ? Any.fromPartial(object.event) : undefined;
        return message;
    },
};
messageTypeRegistry.set(IntakeEvent.$type, IntakeEvent);
function createBaseIntakeResponse() {
    return {};
}
export const IntakeResponse = {
    $type: "devvit.data.api.v1alpha.IntakeResponse",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIntakeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return IntakeResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseIntakeResponse();
        return message;
    },
};
messageTypeRegistry.set(IntakeResponse.$type, IntakeResponse);
export const DataIntakerServiceName = "devvit.data.api.v1alpha.DataIntaker";
export class DataIntakerClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || DataIntakerServiceName;
        this.rpc = rpc;
        this.OnEvent = this.OnEvent.bind(this);
    }
    OnEvent(request, metadata) {
        const data = IntakeEvent.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnEvent", data, metadata);
        return promise.then((data) => IntakeResponse.decode(_m0.Reader.create(data)));
    }
}
export const DataIntakerDefinition = {
    name: "DataIntaker",
    fullName: "devvit.data.api.v1alpha.DataIntaker",
    methods: {
        onEvent: {
            name: "OnEvent",
            requestType: IntakeEvent,
            requestStream: false,
            responseType: IntakeResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
