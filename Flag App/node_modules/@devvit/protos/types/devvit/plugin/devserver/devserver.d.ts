/**
 * #devserver.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
import { Observable } from "rxjs";
import { Metadata } from "../../../../lib/Types.js";
import { Empty } from '../../../google/protobuf/empty.js';
import { LinkedBundle } from '../../runtime/bundle.js';
import { CompileLog } from '../buildpack/buildpack_common.js';
import { File, FileSystem } from '../buildpack/filesystem.js';
import { TestCasesList } from './testcases.js';
export interface ProjectListRequest {
    projectRootDirectory: string;
}
export interface ProjectBuildProblems {
    warnings: CompileLog[];
    errors: CompileLog[];
}
export interface ProjectListingResponse {
    projectRootDirectory: string;
    projectFileSystem?: FileSystem | undefined;
    buildProblems: {
        [key: string]: ProjectBuildProblems;
    };
}
export interface ProjectListingResponse_BuildProblemsEntry {
    key: string;
    value?: ProjectBuildProblems | undefined;
}
export interface ProjectUpdatesRequest {
    projectRootDirectory: string;
}
export interface ProjectUpdateResponse {
    projectRootDirectory: string;
    /** deleting a file results in a change update of the parent directory */
    file?: File | undefined;
    /**
     * provide a semi-linked bundle
     * it does not fully provide `bundle.uses` because it assumes
     * that the devserver client will be loading all actors within
     * the system. Should revisit.
     *
     * TODO download and link non-native actors from some source
     */
    linkedBundle?: LinkedBundle | undefined;
    /**
     * Provides the project-relative path to the actor (i.e.: actors/foo)
     * Note that the path separator here is OS-dependent - '\\' on Windows,
     * '/' everywhere else - so if you want to split this up, you'll want to
     * use `path.sep` if available, or `PATH_SEPARATOR_REGEX` if it isn't.
     */
    actorPath: string;
    buildProblems: {
        [key: string]: ProjectBuildProblems;
    };
}
export interface ProjectUpdateResponse_BuildProblemsEntry {
    key: string;
    value?: ProjectBuildProblems | undefined;
}
/** Specifies which actor you'd like the test cases for */
export interface TestCasesRequest {
    actorName: string;
}
export interface AuthenticationRequest {
}
export interface AuthenticationResponse {
    storedToken?: StoredToken | undefined;
}
export interface ValidationRequest {
}
export interface StoredToken {
    refreshToken: string;
    accessToken: string;
    /** Milliseconds to expiry. */
    expiresAt?: Date | undefined;
    scope: string;
    tokenType: string;
}
export declare const ProjectListRequest: {
    $type: "devvit.plugin.devserver.ProjectListRequest";
    encode(message: ProjectListRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProjectListRequest;
    fromJSON(object: any): ProjectListRequest;
    toJSON(message: ProjectListRequest): unknown;
    create(base?: DeepPartial<ProjectListRequest>): ProjectListRequest;
    fromPartial(object: DeepPartial<ProjectListRequest>): ProjectListRequest;
};
export declare const ProjectBuildProblems: {
    $type: "devvit.plugin.devserver.ProjectBuildProblems";
    encode(message: ProjectBuildProblems, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProjectBuildProblems;
    fromJSON(object: any): ProjectBuildProblems;
    toJSON(message: ProjectBuildProblems): unknown;
    create(base?: DeepPartial<ProjectBuildProblems>): ProjectBuildProblems;
    fromPartial(object: DeepPartial<ProjectBuildProblems>): ProjectBuildProblems;
};
export declare const ProjectListingResponse: {
    $type: "devvit.plugin.devserver.ProjectListingResponse";
    encode(message: ProjectListingResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProjectListingResponse;
    fromJSON(object: any): ProjectListingResponse;
    toJSON(message: ProjectListingResponse): unknown;
    create(base?: DeepPartial<ProjectListingResponse>): ProjectListingResponse;
    fromPartial(object: DeepPartial<ProjectListingResponse>): ProjectListingResponse;
};
export declare const ProjectListingResponse_BuildProblemsEntry: {
    $type: "devvit.plugin.devserver.ProjectListingResponse.BuildProblemsEntry";
    encode(message: ProjectListingResponse_BuildProblemsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProjectListingResponse_BuildProblemsEntry;
    fromJSON(object: any): ProjectListingResponse_BuildProblemsEntry;
    toJSON(message: ProjectListingResponse_BuildProblemsEntry): unknown;
    create(base?: DeepPartial<ProjectListingResponse_BuildProblemsEntry>): ProjectListingResponse_BuildProblemsEntry;
    fromPartial(object: DeepPartial<ProjectListingResponse_BuildProblemsEntry>): ProjectListingResponse_BuildProblemsEntry;
};
export declare const ProjectUpdatesRequest: {
    $type: "devvit.plugin.devserver.ProjectUpdatesRequest";
    encode(message: ProjectUpdatesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProjectUpdatesRequest;
    fromJSON(object: any): ProjectUpdatesRequest;
    toJSON(message: ProjectUpdatesRequest): unknown;
    create(base?: DeepPartial<ProjectUpdatesRequest>): ProjectUpdatesRequest;
    fromPartial(object: DeepPartial<ProjectUpdatesRequest>): ProjectUpdatesRequest;
};
export declare const ProjectUpdateResponse: {
    $type: "devvit.plugin.devserver.ProjectUpdateResponse";
    encode(message: ProjectUpdateResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProjectUpdateResponse;
    fromJSON(object: any): ProjectUpdateResponse;
    toJSON(message: ProjectUpdateResponse): unknown;
    create(base?: DeepPartial<ProjectUpdateResponse>): ProjectUpdateResponse;
    fromPartial(object: DeepPartial<ProjectUpdateResponse>): ProjectUpdateResponse;
};
export declare const ProjectUpdateResponse_BuildProblemsEntry: {
    $type: "devvit.plugin.devserver.ProjectUpdateResponse.BuildProblemsEntry";
    encode(message: ProjectUpdateResponse_BuildProblemsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProjectUpdateResponse_BuildProblemsEntry;
    fromJSON(object: any): ProjectUpdateResponse_BuildProblemsEntry;
    toJSON(message: ProjectUpdateResponse_BuildProblemsEntry): unknown;
    create(base?: DeepPartial<ProjectUpdateResponse_BuildProblemsEntry>): ProjectUpdateResponse_BuildProblemsEntry;
    fromPartial(object: DeepPartial<ProjectUpdateResponse_BuildProblemsEntry>): ProjectUpdateResponse_BuildProblemsEntry;
};
export declare const TestCasesRequest: {
    $type: "devvit.plugin.devserver.TestCasesRequest";
    encode(message: TestCasesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestCasesRequest;
    fromJSON(object: any): TestCasesRequest;
    toJSON(message: TestCasesRequest): unknown;
    create(base?: DeepPartial<TestCasesRequest>): TestCasesRequest;
    fromPartial(object: DeepPartial<TestCasesRequest>): TestCasesRequest;
};
export declare const AuthenticationRequest: {
    $type: "devvit.plugin.devserver.AuthenticationRequest";
    encode(_: AuthenticationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AuthenticationRequest;
    fromJSON(_: any): AuthenticationRequest;
    toJSON(_: AuthenticationRequest): unknown;
    create(base?: DeepPartial<AuthenticationRequest>): AuthenticationRequest;
    fromPartial(_: DeepPartial<AuthenticationRequest>): AuthenticationRequest;
};
export declare const AuthenticationResponse: {
    $type: "devvit.plugin.devserver.AuthenticationResponse";
    encode(message: AuthenticationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AuthenticationResponse;
    fromJSON(object: any): AuthenticationResponse;
    toJSON(message: AuthenticationResponse): unknown;
    create(base?: DeepPartial<AuthenticationResponse>): AuthenticationResponse;
    fromPartial(object: DeepPartial<AuthenticationResponse>): AuthenticationResponse;
};
export declare const ValidationRequest: {
    $type: "devvit.plugin.devserver.ValidationRequest";
    encode(_: ValidationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ValidationRequest;
    fromJSON(_: any): ValidationRequest;
    toJSON(_: ValidationRequest): unknown;
    create(base?: DeepPartial<ValidationRequest>): ValidationRequest;
    fromPartial(_: DeepPartial<ValidationRequest>): ValidationRequest;
};
export declare const StoredToken: {
    $type: "devvit.plugin.devserver.StoredToken";
    encode(message: StoredToken, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StoredToken;
    fromJSON(object: any): StoredToken;
    toJSON(message: StoredToken): unknown;
    create(base?: DeepPartial<StoredToken>): StoredToken;
    fromPartial(object: DeepPartial<StoredToken>): StoredToken;
};
export interface DevServer {
    /**
     * Used when the client connects initially to populate the sidebar.
     * This could be updated to take in target project root directory
     * if we support one server powering multiple projects
     */
    ListProject(request: ProjectListRequest, metadata?: Metadata): Promise<ProjectListingResponse>;
    /** For now the webUI will request linked bundles over http request caching */
    NotifyBundleUpdates(request: ProjectUpdatesRequest, metadata?: Metadata): Observable<ProjectUpdateResponse>;
    /** Get the list of test cases saved with a given actor */
    GetTestCases(request: TestCasesRequest, metadata?: Metadata): Promise<TestCasesList>;
    /** Update the list of test cases saved with a given actor */
    UpdateTestCases(request: TestCasesList, metadata?: Metadata): Promise<Empty>;
}
export declare const DevServerServiceName = "devvit.plugin.devserver.DevServer";
export declare class DevServerClientImpl implements DevServer {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    ListProject(request: ProjectListRequest, metadata?: Metadata): Promise<ProjectListingResponse>;
    NotifyBundleUpdates(request: ProjectUpdatesRequest, metadata?: Metadata): Observable<ProjectUpdateResponse>;
    GetTestCases(request: TestCasesRequest, metadata?: Metadata): Promise<TestCasesList>;
    UpdateTestCases(request: TestCasesList, metadata?: Metadata): Promise<Empty>;
}
export type DevServerDefinition = typeof DevServerDefinition;
export declare const DevServerDefinition: {
    readonly name: "DevServer";
    readonly fullName: "devvit.plugin.devserver.DevServer";
    readonly methods: {
        /**
         * Used when the client connects initially to populate the sidebar.
         * This could be updated to take in target project root directory
         * if we support one server powering multiple projects
         */
        readonly listProject: {
            readonly name: "ListProject";
            readonly requestType: {
                $type: "devvit.plugin.devserver.ProjectListRequest";
                encode(message: ProjectListRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ProjectListRequest;
                fromJSON(object: any): ProjectListRequest;
                toJSON(message: ProjectListRequest): unknown;
                create(base?: DeepPartial<ProjectListRequest>): ProjectListRequest;
                fromPartial(object: DeepPartial<ProjectListRequest>): ProjectListRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.devserver.ProjectListingResponse";
                encode(message: ProjectListingResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ProjectListingResponse;
                fromJSON(object: any): ProjectListingResponse;
                toJSON(message: ProjectListingResponse): unknown;
                create(base?: DeepPartial<ProjectListingResponse>): ProjectListingResponse;
                fromPartial(object: DeepPartial<ProjectListingResponse>): ProjectListingResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** For now the webUI will request linked bundles over http request caching */
        readonly notifyBundleUpdates: {
            readonly name: "NotifyBundleUpdates";
            readonly requestType: {
                $type: "devvit.plugin.devserver.ProjectUpdatesRequest";
                encode(message: ProjectUpdatesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ProjectUpdatesRequest;
                fromJSON(object: any): ProjectUpdatesRequest;
                toJSON(message: ProjectUpdatesRequest): unknown;
                create(base?: DeepPartial<ProjectUpdatesRequest>): ProjectUpdatesRequest;
                fromPartial(object: DeepPartial<ProjectUpdatesRequest>): ProjectUpdatesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.devserver.ProjectUpdateResponse";
                encode(message: ProjectUpdateResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ProjectUpdateResponse;
                fromJSON(object: any): ProjectUpdateResponse;
                toJSON(message: ProjectUpdateResponse): unknown;
                create(base?: DeepPartial<ProjectUpdateResponse>): ProjectUpdateResponse;
                fromPartial(object: DeepPartial<ProjectUpdateResponse>): ProjectUpdateResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /** Get the list of test cases saved with a given actor */
        readonly getTestCases: {
            readonly name: "GetTestCases";
            readonly requestType: {
                $type: "devvit.plugin.devserver.TestCasesRequest";
                encode(message: TestCasesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): TestCasesRequest;
                fromJSON(object: any): TestCasesRequest;
                toJSON(message: TestCasesRequest): unknown;
                create(base?: DeepPartial<TestCasesRequest>): TestCasesRequest;
                fromPartial(object: DeepPartial<TestCasesRequest>): TestCasesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.devserver.TestCasesList";
                encode(message: TestCasesList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): TestCasesList;
                fromJSON(object: any): TestCasesList;
                toJSON(message: TestCasesList): unknown;
                create(base?: {
                    actorName?: string;
                    testCases?: {
                        methodName?: string;
                        testName?: string;
                        testInput?: string;
                    }[];
                } | undefined): TestCasesList;
                fromPartial(object: {
                    actorName?: string;
                    testCases?: {
                        methodName?: string;
                        testName?: string;
                        testInput?: string;
                    }[];
                }): TestCasesList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Update the list of test cases saved with a given actor */
        readonly updateTestCases: {
            readonly name: "UpdateTestCases";
            readonly requestType: {
                $type: "devvit.plugin.devserver.TestCasesList";
                encode(message: TestCasesList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): TestCasesList;
                fromJSON(object: any): TestCasesList;
                toJSON(message: TestCasesList): unknown;
                create(base?: {
                    actorName?: string;
                    testCases?: {
                        methodName?: string;
                        testName?: string;
                        testInput?: string;
                    }[];
                } | undefined): TestCasesList;
                fromPartial(object: {
                    actorName?: string;
                    testCases?: {
                        methodName?: string;
                        testName?: string;
                        testInput?: string;
                    }[];
                }): TestCasesList;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OAuthProvider {
    Authenticate(request: AuthenticationRequest, metadata?: Metadata): Promise<AuthenticationResponse>;
    Validate(request: ValidationRequest, metadata?: Metadata): Promise<AuthenticationResponse>;
    NotifyAuthenticationUpdates(request: Empty, metadata?: Metadata): Observable<AuthenticationResponse>;
    Logout(request: Empty, metadata?: Metadata): Promise<Empty>;
}
export declare const OAuthProviderServiceName = "devvit.plugin.devserver.OAuthProvider";
export declare class OAuthProviderClientImpl implements OAuthProvider {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Authenticate(request: AuthenticationRequest, metadata?: Metadata): Promise<AuthenticationResponse>;
    Validate(request: ValidationRequest, metadata?: Metadata): Promise<AuthenticationResponse>;
    NotifyAuthenticationUpdates(request: Empty, metadata?: Metadata): Observable<AuthenticationResponse>;
    Logout(request: Empty, metadata?: Metadata): Promise<Empty>;
}
export type OAuthProviderDefinition = typeof OAuthProviderDefinition;
export declare const OAuthProviderDefinition: {
    readonly name: "OAuthProvider";
    readonly fullName: "devvit.plugin.devserver.OAuthProvider";
    readonly methods: {
        readonly authenticate: {
            readonly name: "Authenticate";
            readonly requestType: {
                $type: "devvit.plugin.devserver.AuthenticationRequest";
                encode(_: AuthenticationRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AuthenticationRequest;
                fromJSON(_: any): AuthenticationRequest;
                toJSON(_: AuthenticationRequest): unknown;
                create(base?: DeepPartial<AuthenticationRequest>): AuthenticationRequest;
                fromPartial(_: DeepPartial<AuthenticationRequest>): AuthenticationRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.devserver.AuthenticationResponse";
                encode(message: AuthenticationResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AuthenticationResponse;
                fromJSON(object: any): AuthenticationResponse;
                toJSON(message: AuthenticationResponse): unknown;
                create(base?: DeepPartial<AuthenticationResponse>): AuthenticationResponse;
                fromPartial(object: DeepPartial<AuthenticationResponse>): AuthenticationResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly validate: {
            readonly name: "Validate";
            readonly requestType: {
                $type: "devvit.plugin.devserver.ValidationRequest";
                encode(_: ValidationRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ValidationRequest;
                fromJSON(_: any): ValidationRequest;
                toJSON(_: ValidationRequest): unknown;
                create(base?: DeepPartial<ValidationRequest>): ValidationRequest;
                fromPartial(_: DeepPartial<ValidationRequest>): ValidationRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.devserver.AuthenticationResponse";
                encode(message: AuthenticationResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AuthenticationResponse;
                fromJSON(object: any): AuthenticationResponse;
                toJSON(message: AuthenticationResponse): unknown;
                create(base?: DeepPartial<AuthenticationResponse>): AuthenticationResponse;
                fromPartial(object: DeepPartial<AuthenticationResponse>): AuthenticationResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly notifyAuthenticationUpdates: {
            readonly name: "NotifyAuthenticationUpdates";
            readonly requestType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.devserver.AuthenticationResponse";
                encode(message: AuthenticationResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AuthenticationResponse;
                fromJSON(object: any): AuthenticationResponse;
                toJSON(message: AuthenticationResponse): unknown;
                create(base?: DeepPartial<AuthenticationResponse>): AuthenticationResponse;
                fromPartial(object: DeepPartial<AuthenticationResponse>): AuthenticationResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        readonly logout: {
            readonly name: "Logout";
            readonly requestType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
    clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>, metadata?: Metadata): Promise<Uint8Array>;
    serverStreamingRequest(service: string, method: string, data: Uint8Array, metadata?: Metadata): Observable<Uint8Array>;
    bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>, metadata?: Metadata): Observable<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=devserver.d.ts.map