/**
 * #testcases.ts
 *
 * @packageDocumentation
 */
import _m0 from 'protobufjs/minimal.js';
/** A list of test cases. Contains the actor these test cases belong to, and an array of actual test cases. */
export interface TestCasesList {
    actorName: string;
    testCases: TestCase[];
}
/**
 * An individual test case contains the method that this test is for, the name of the test, and
 * the message body that acts as the input to that method.
 */
export interface TestCase {
    methodName: string;
    testName: string;
    testInput: string;
}
export declare const TestCasesList: {
    $type: "devvit.plugin.devserver.TestCasesList";
    encode(message: TestCasesList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestCasesList;
    fromJSON(object: any): TestCasesList;
    toJSON(message: TestCasesList): unknown;
    create(base?: DeepPartial<TestCasesList>): TestCasesList;
    fromPartial(object: DeepPartial<TestCasesList>): TestCasesList;
};
export declare const TestCase: {
    $type: "devvit.plugin.devserver.TestCase";
    encode(message: TestCase, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestCase;
    fromJSON(object: any): TestCase;
    toJSON(message: TestCase): unknown;
    create(base?: DeepPartial<TestCase>): TestCase;
    fromPartial(object: DeepPartial<TestCase>): TestCase;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=testcases.d.ts.map