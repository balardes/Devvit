/**
 * #privatemessages_svc.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { Listing } from '../common/common_msg.js';
import { ComposeRequest, GenericPrivateMessagesRequest, MessageWhereRequest, ReadAllMessagesRequest, } from './privatemessages_msg.js';
export const PrivateMessagesServiceName = "devvit.plugin.redditapi.privatemessages.PrivateMessages";
export class PrivateMessagesClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || PrivateMessagesServiceName;
        this.rpc = rpc;
        this.Block = this.Block.bind(this);
        this.CollapseMessage = this.CollapseMessage.bind(this);
        this.Compose = this.Compose.bind(this);
        this.DelMsg = this.DelMsg.bind(this);
        this.ReadAllMessages = this.ReadAllMessages.bind(this);
        this.ReadMessage = this.ReadMessage.bind(this);
        this.UnblockSubreddit = this.UnblockSubreddit.bind(this);
        this.UncollapseMessage = this.UncollapseMessage.bind(this);
        this.UnreadMessage = this.UnreadMessage.bind(this);
        this.MessageWhere = this.MessageWhere.bind(this);
    }
    Block(request, metadata) {
        const data = GenericPrivateMessagesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Block", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    CollapseMessage(request, metadata) {
        const data = GenericPrivateMessagesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CollapseMessage", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    Compose(request, metadata) {
        const data = ComposeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Compose", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    DelMsg(request, metadata) {
        const data = GenericPrivateMessagesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "DelMsg", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    ReadAllMessages(request, metadata) {
        const data = ReadAllMessagesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ReadAllMessages", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    ReadMessage(request, metadata) {
        const data = GenericPrivateMessagesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ReadMessage", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    UnblockSubreddit(request, metadata) {
        const data = GenericPrivateMessagesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UnblockSubreddit", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    UncollapseMessage(request, metadata) {
        const data = GenericPrivateMessagesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UncollapseMessage", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    UnreadMessage(request, metadata) {
        const data = GenericPrivateMessagesRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UnreadMessage", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    MessageWhere(request, metadata) {
        const data = MessageWhereRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "MessageWhere", data, metadata);
        return promise.then((data) => Listing.decode(_m0.Reader.create(data)));
    }
}
export const PrivateMessagesDefinition = {
    name: "PrivateMessages",
    fullName: "devvit.plugin.redditapi.privatemessages.PrivateMessages",
    methods: {
        /** https://www.reddit.com/dev/api#POST_api_block */
        block: {
            name: "Block",
            requestType: GenericPrivateMessagesRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_collapse_message */
        collapseMessage: {
            name: "CollapseMessage",
            requestType: GenericPrivateMessagesRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_compose */
        compose: {
            name: "Compose",
            requestType: ComposeRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_del_msg */
        delMsg: {
            name: "DelMsg",
            requestType: GenericPrivateMessagesRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_read_all_messages */
        readAllMessages: {
            name: "ReadAllMessages",
            requestType: ReadAllMessagesRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_read_message */
        readMessage: {
            name: "ReadMessage",
            requestType: GenericPrivateMessagesRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_unblock_subreddit */
        unblockSubreddit: {
            name: "UnblockSubreddit",
            requestType: GenericPrivateMessagesRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_uncollapse_message */
        uncollapseMessage: {
            name: "UncollapseMessage",
            requestType: GenericPrivateMessagesRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#POST_api_unread_message */
        unreadMessage: {
            name: "UnreadMessage",
            requestType: GenericPrivateMessagesRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** https://www.reddit.com/dev/api#GET_message_where */
        messageWhere: {
            name: "MessageWhere",
            requestType: MessageWhereRequest,
            requestStream: false,
            responseType: Listing,
            responseStream: false,
            options: {},
        },
    },
};
